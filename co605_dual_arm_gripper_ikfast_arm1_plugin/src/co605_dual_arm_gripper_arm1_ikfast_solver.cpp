/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2020-05-11 19:18:49.533263
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKsin(j[3]);
x8=IKcos(j[3]);
x9=IKsin(j[0]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((0.00159999795200393)*x11);
x13=((0.999998720002458)*x10);
x14=((1.0)*x6);
x15=((1.0)*x3);
x16=((0.355)*x0);
x17=((0.00159999795200393)*x10);
x18=((0.4)*x4);
x19=((1.0)*x5);
x20=((0.999998720002458)*x11);
x21=((9.9e-7)*x3);
x22=((0.355)*x8);
x23=((9.9e-7)*x8);
x24=((1.0)*x2);
x25=((9.9e-7)*x2);
x26=((0.355)*x2);
x27=((1.0)*x9);
x28=(x7*x9);
x29=(x3*x9);
x30=(x0*x4);
x31=(x5*x8);
x32=(x6*x8);
x33=(x1*x3);
x34=(x2*x4);
x35=(x3*x4);
x36=(x1*x9);
x37=(x4*x9);
x38=(x0*x7);
x39=(x0*x1);
x40=(x24*x4);
x41=(x2*x39);
x42=(x24*x30);
x43=(x24*x37);
x44=((((-1.0)*x1*x15))+x40);
x45=((((-1.0)*x1*x24))+(((-1.0)*x15*x4)));
x46=(((x1*x24))+((x15*x4)));
x47=(x44*x5);
x48=((((-1.0)*x42))+((x0*x33)));
x49=((((-1.0)*x43))+((x1*x29)));
x50=(x46*x7);
x51=(x45*x8);
x52=((((-1.0)*x24*x39))+(((-1.0)*x15*x30)));
x53=((((-1.0)*x24*x36))+(((-1.0)*x15*x37)));
x54=(x48*x8);
x55=(x49*x8);
x56=(x5*x52);
x57=(x5*x53);
x58=(x54+(((-1.0)*x27*x7)));
x59=(x38+x55);
x60=(((x7*((x42+(((-1.0)*x15*x39))))))+(((-1.0)*x27*x8)));
x61=(((x0*x8))+((x7*((x43+(((-1.0)*x15*x36)))))));
x62=((0.999998720002458)*x61);
x63=(x58*x6);
x64=(x47+((x32*x45)));
x65=((((-1.0)*x47))+(((-1.0)*x32*x45)));
x66=(x56+x63);
x67=(x57+((x59*x6)));
x68=((((-1.0)*x19*x52))+(((-1.0)*x14*x58)));
x69=((((-1.0)*x19*x53))+(((-1.0)*x14*x59)));
eerot[0]=(((x5*x58))+((x6*((((x3*x30))+x41)))));
eerot[1]=(((x12*x68))+(((-1.0)*x20*x60))+((x17*x60))+(((-1.0)*x13*x66)));
IkReal x70=((1.0)*x60);
eerot[2]=((((-1.0)*x13*x70))+(((-1.0)*x12*x70))+(((-1.0)*x20*x68))+(((-1.0)*x17*x66)));
eetrans[0]=(((x6*((((x16*x35))+((x1*x16*x2))))))+((x0*x18*x3))+((x6*((((x23*x48))+(((-9.9e-7)*x28))))))+((x5*(((((-1.0)*x25*x39))+(((-1.0)*x21*x30))))))+(((0.4)*x41))+(((-1.93e-6)*x30))+(((0.4)*x39))+((x5*((((x22*x48))+(((-0.355)*x28)))))));
eerot[3]=(((x6*((((x29*x4))+((x2*x36))))))+((x5*x59)));
eerot[4]=(((x12*x69))+(((-1.0)*x20*x61))+((x17*x61))+(((-1.0)*x13*x67)));
IkReal x71=((1.0)*x61);
eerot[5]=((((-1.0)*x13*x71))+(((-1.0)*x12*x71))+(((-1.0)*x20*x69))+(((-1.0)*x17*x67)));
IkReal x72=((0.4)*x36);
eetrans[1]=(((x18*x29))+((x6*((((x23*x49))+(((9.9e-7)*x38))))))+x72+((x6*((((x26*x36))+(((0.355)*x29*x4))))))+((x5*(((((-1.0)*x25*x36))+(((-1.0)*x21*x37))))))+(((-1.93e-6)*x37))+((x5*((((x22*x49))+((x16*x7))))))+((x2*x72)));
eerot[6]=(((x6*(((((-1.0)*x40))+x33))))+((x31*x45)));
eerot[7]=(((x12*x65))+((x17*x50))+(((-1.0)*x20*x50))+(((-1.0)*x13*x64)));
IkReal x73=((1.0)*x50);
eerot[8]=((((-1.0)*x13*x73))+(((-1.0)*x12*x73))+(((-1.0)*x20*x65))+(((-1.0)*x17*x64)));
IkReal x74=((1.0)*x1);
IkReal x75=((1.0)*x4);
IkReal x76=((1.0)*x18);
eetrans[2]=((0.3215)+(((-1.0)*x2*x76))+((x6*(((((0.355)*x33))+(((-1.0)*x26*x75))))))+(((-1.0)*x76))+(((-1.93e-6)*x1))+((x31*(((((-0.355)*x35))+(((-1.0)*x26*x74))))))+((x5*(((((-1.0)*x21*x74))+((x25*x4))))))+(((0.4)*x33))+((x32*(((((-1.0)*x25*x74))+(((-1.0)*x21*x75)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,j15,cj15,sj15,htj15,j15mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij10[2], _nj10,_ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14,_ij15[2], _nj15;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.999998720002458)*r01))+(((-0.00159999795200393)*r02)));
new_r01=((((-0.999998720002458)*r02))+(((0.00159999795200393)*r01)));
new_r02=r00;
new_px=(px+(((-0.355)*r00)));
new_r10=((((-0.999998720002458)*r11))+(((-0.00159999795200393)*r12)));
new_r11=((((0.00159999795200393)*r11))+(((-0.999998720002458)*r12)));
new_r12=r10;
new_py=(py+(((-0.355)*r10)));
new_r20=((((-0.999998720002458)*r21))+(((-0.00159999795200393)*r22)));
new_r21=((((-0.999998720002458)*r22))+(((0.00159999795200393)*r21)));
new_r22=r20;
new_pz=((-0.3215)+pz+(((-0.355)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x77=((1.0)*px);
IkReal x78=((1.0)*pz);
IkReal x79=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x79))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x78)));
rxp0_2=((((-1.0)*r10*x77))+((py*r00)));
rxp1_0=((((-1.0)*r21*x79))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x78)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x77)));
rxp2_0=((((-1.0)*r22*x79))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x78)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x77)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x80=((1.25)*pp);
IkReal x81=((2.475e-6)*npx);
IkReal x82=((1.0)*rxp2_2);
IkReal x83=((9.9e-7)*r21);
IkReal x84=((1.0)*npz);
IkReal x85=(x83+(((-1.0)*x82)));
IkReal x86=((-3.431e-12)+x80);
IkReal x87=((((-1.0)*x83))+(((-1.0)*x82)));
IkReal x88=(npz+x86+(((-1.0)*x81)));
IkReal x89=(x86+(((-1.0)*x84))+(((-1.0)*x81)));
IkReal x90=(x81+x86+(((-1.0)*x84)));
IkReal x91=(npz+x81+x86);
IkReal gconst0=x85;
IkReal gconst1=x89;
IkReal gconst2=x88;
IkReal gconst3=x85;
IkReal gconst4=x89;
IkReal gconst5=x88;
IkReal gconst6=x87;
IkReal gconst7=x90;
IkReal gconst8=x91;
IkReal gconst9=x87;
IkReal gconst10=x90;
IkReal gconst11=x91;
IkReal x92=npx*npx;
IkReal x93=rxp0_2*rxp0_2;
IkReal x94=rxp2_2*rxp2_2;
IkReal x95=r21*r21;
IkReal x96=(gconst6*gconst7);
IkReal x97=(gconst11*r21);
IkReal x98=((4.0)*gconst6);
IkReal x99=((1.98e-5)*npx);
IkReal x100=((4.95e-6)*npy);
IkReal x101=(gconst8*r21);
IkReal x102=(npx*rxp1_2);
IkReal x103=(gconst10*gconst9);
IkReal x104=((1.98e-6)*r20);
IkReal x105=((3.96e-6)*gconst6);
IkReal x106=(npy*rxp2_2);
IkReal x107=((1.9602e-11)*rxp0_2);
IkReal x108=(gconst11*rxp2_2);
IkReal x109=((1.9602e-12)*r20);
IkReal x110=(gconst10*gconst8);
IkReal x111=((7.8408e-12)*r20);
IkReal x112=(r20*rxp2_2);
IkReal x113=(gconst6*rxp2_2);
IkReal x114=(gconst10*gconst6);
IkReal x115=(npy*r21);
IkReal x116=((7.92e-6)*r20);
IkReal x117=(gconst6*npx);
IkReal x118=(gconst8*rxp0_2);
IkReal x119=(r20*r21);
IkReal x120=(gconst10*rxp0_2);
IkReal x121=((7.92e-6)*rxp1_2);
IkReal x122=(gconst8*rxp2_2);
IkReal x123=(gconst8*r20);
IkReal x124=((4.9005e-12)*npy);
IkReal x125=(rxp2_2*x92);
IkReal x126=(gconst6*npy*rxp0_2);
IkReal x127=(npx*x120);
IkReal x128=(r21*x92);
IkReal x129=(gconst8*x94);
IkReal x130=((4.851495e-18)*npy*x95);
IkReal x131=((1.98e-5)*npy*x93);
op[0]=((((-4.0)*x110*x93))+(((-3.881196e-18)*gconst6*r21))+(((-1.0)*x125*x98))+(((-1.0)*x103*x96))+(((-3.9204e-12)*x113))+(((-3.96e-6)*npx*rxp0_2*x101))+(((-1.0)*x127*x98))+(((9.9e-7)*x96*x97))+(((-1.0)*gconst11*x129))+(((-7.92e-6)*npx*x113))+((x103*x122))+(((-7.8408e-12)*r21*x117))+(((9.9e-7)*x101*x103))+(((-4.0)*npx*rxp2_2*x118))+((x108*x96))+(((-3.96e-6)*rxp2_2*x118))+(((-1.98e-6)*x122*x97))+(((-1.0)*x105*x120))+(((-1.0)*x105*x128))+(((-3.9204e-12)*rxp0_2*x101))+(((-9.801e-13)*gconst11*gconst8*x95)));
op[1]=((((-8.0)*npy*rxp0_2*x114))+((rxp2_2*x104*x110))+(((-1.0)*rxp0_2*x106*x99))+(((-1.584e-5)*gconst6*x106))+(((-7.92e-6)*x112*x92))+(((-7.762392e-18)*x112))+(((-1.0)*gconst11*x104*x96))+(((-1.0)*x100*x129))+(((-1.0)*gconst9*x100*x96))+(((-1.0)*gconst11*x100*x94))+(((-1.0)*gconst11*x130))+(((-9.801e-12)*x101*x106))+((npx*x116*x118))+(((1.56816e-11)*r20*x117))+(((-16.0)*x106*x117))+((x111*x118))+((rxp2_2*x100*x103))+(((-16.0)*rxp0_2*rxp1_2*x110))+(((-1.0)*npx*x107*x115))+(((7.762392e-18)*gconst6*r20))+(((4.9005e-12)*x115*x96))+(((-1.0)*x111*x120))+(((-1.0)*x111*x128))+(((-1.0)*x116*x127))+(((-1.0)*gconst8*x103*x104))+(((-1.5524784e-17)*npx*x119))+(((-1.0)*gconst6*x100*x103))+(((-1.0)*x106*x107))+((gconst6*x124*x97))+(((-7.92e-6)*x101*x102))+(((-1.56816e-11)*gconst6*x115))+((gconst6*x116*x92))+((gconst7*x104*x108))+(((-1.0)*gconst10*x131))+(((-1.0)*gconst7*x103*x104))+(((3.96e-6)*x108*x123))+(((-1.584e-5)*x115*x117))+(((-7.8408e-12)*rxp1_2*x101))+((gconst9*x100*x122))+(((-1.0)*x121*x122))+(((-7.92e-6)*npy*rxp0_2*x101))+(((-1.56816e-11)*npx*x112))+(((-7.68476808e-24)*x119))+(((3.9204e-12)*x123*x97))+(((-1.0)*gconst8*x131))+(((-1.0)*gconst8*x130))+(((-1.0)*x114*x121))+(((-1.940598e-17)*rxp0_2*x115))+(((-1.0)*x126*x99))+(((-8.0)*x106*x118))+((rxp2_2*x100*x96))+(((-1.0)*gconst6*npy*x107))+(((-1.0)*gconst10*x104*x96))+((gconst9*x101*x124))+(((4.9005e-12)*x103*x115))+(((-9.801e-12)*x106*x97))+((gconst7*x109*x97))+((gconst6*x100*x108))+(((-8.0)*x102*x114))+((gconst10*x101*x109))+(((-8.0)*x102*x122)));
op[2]=((((1.188e-5)*gconst8*npx*r21*rxp0_2))+(((-3.96e-5)*npx*npy*rxp1_2*rxp2_2))+(((9.9e-7)*gconst0*gconst11*gconst7*r21))+(((-7.92e-6)*gconst6*npx*rxp2_2))+(((-3.881196e-17)*npy*r21*rxp1_2))+(((2.910897e-17)*gconst11*npy*r20*r21))+(((-9.801e-12)*gconst8*gconst9*npy*r20))+(((-3.881196e-18)*gconst6*r21))+((gconst10*gconst3*gconst8*rxp2_2))+(((-3.9204e-11)*npy*rxp1_2*rxp2_2))+(((-16.0)*gconst10*gconst6*npy*rxp1_2))+(((3.9204e-12)*gconst8*r21*rxp0_2))+((gconst10*gconst8*gconst9*rxp2_2))+(((-1.584e-5)*gconst10*npy*r20*rxp0_2))+(((-4.0)*gconst4*gconst8*(rxp0_2*rxp0_2)))+((gconst11*gconst6*gconst7*rxp2_2))+(((1.188e-5)*gconst6*r21*(npx*npx)))+(((-4.851495e-17)*r21*rxp2_2*(npy*npy)))+(((-3.96e-6)*gconst2*npx*r21*rxp0_2))+(((-7.92e-6)*gconst0*npx*rxp2_2))+(((1.56816e-11)*(npx*npx)*(r20*r20)))+(((-9.801e-11)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-1.0)*gconst5*gconst8*(rxp2_2*rxp2_2)))+(((-3.96e-6)*gconst0*r21*(npx*npx)))+(((-1.17612e-11)*gconst6*rxp2_2))+(((9.70299e-18)*gconst7*npy*r20*r21))+(((2.45025e-11)*gconst9*rxp2_2*(npy*npy)))+(((1.584e-5)*gconst8*npy*r20*rxp0_2))+(((9.9e-7)*gconst10*gconst2*gconst9*r21))+(((-16.0)*gconst10*gconst8*(rxp1_2*rxp1_2)))+(((7.8408e-12)*gconst6*npx*r21))+(((9.9e-7)*gconst5*gconst6*gconst7*r21))+(((-1.56816e-11)*gconst10*r20*rxp1_2))+(((-9.9e-7)*gconst11*gconst6*gconst7*r21))+((gconst5*gconst6*gconst7*rxp2_2))+(((-1.0)*gconst10*gconst3*gconst6*gconst7))+(((-9.801e-12)*gconst7*gconst9*npy*r20))+(((-1.0)*gconst11*gconst2*(rxp2_2*rxp2_2)))+(((3.1049568e-17)*npx*(r20*r20)))+(((-3.96e-6)*gconst2*rxp0_2*rxp2_2))+(((-3.96e-5)*rxp0_2*rxp2_2*(npy*npy)))+(((-7.92e-5)*gconst8*npy*rxp0_2*rxp1_2))+(((1.9602e-12)*gconst11*gconst8*(r21*r21)))+(((-3.9204e-12)*gconst0*rxp2_2))+(((-4.0)*gconst0*rxp2_2*(npx*npx)))+(((-15.9999999999755)*gconst6*rxp2_2*(npy*npy)))+(((4.0)*gconst8*npx*rxp0_2*rxp2_2))+(((-1.98e-6)*gconst5*gconst8*r21*rxp2_2))+(((-9.9e-7)*gconst10*gconst8*gconst9*r21))+(((-1.9602e-11)*gconst10*gconst9*npy*r20))+(((2.910897e-17)*gconst8*npy*r20*r21))+(((9.9e-7)*gconst10*gconst3*gconst8*r21))+(((-4.0)*gconst0*gconst10*npx*rxp0_2))+(((-9.801e-12)*gconst11*gconst6*npy*r20))+(((1.536953616e-23)*(r20*r20)))+(((9.801e-12)*gconst7*npy*r20*rxp2_2))+(((-3.13632e-11)*npx*npy*r20*r21))+(((-16.0)*gconst8*npy*rxp1_2*rxp2_2))+(((8.0)*gconst10*gconst6*npx*rxp0_2))+(((-3.9204e-12)*gconst11*gconst8*(r20*r20)))+(((-2.45025e-11)*gconst6*gconst9*(npy*npy)))+(((3.168e-5)*gconst6*npx*npy*r20))+(((-2.0)*gconst11*gconst8*(rxp2_2*rxp2_2)))+(((-3.9204e-12)*gconst10*gconst8*(r20*r20)))+(((8.0)*gconst10*gconst8*(rxp0_2*rxp0_2)))+((gconst0*gconst11*gconst7*rxp2_2))+(((-2.45025e-11)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-3.96e-6)*gconst0*gconst10*rxp0_2))+(((-4.0)*gconst2*npx*rxp0_2*rxp2_2))+(((-3.9204e-12)*gconst11*gconst7*(r20*r20)))+(((9.9e-7)*gconst4*gconst8*gconst9*r21))+(((2.9403e-11)*gconst8*npy*r20*rxp2_2))+((gconst4*gconst8*gconst9*rxp2_2))+(((1.584e-5)*gconst8*npx*r20*rxp1_2))+((gconst10*gconst2*gconst9*rxp2_2))+(((-1.0)*gconst4*gconst6*gconst7*gconst9))+(((-3.9204e-11)*npx*npy*r21*rxp1_2))+(((-3.96e-6)*gconst4*gconst6*rxp0_2))+(((2.9403e-11)*gconst11*npy*r20*rxp2_2))+(((-1.9602e-11)*gconst6*gconst7*npy*r20))+(((-9.801e-13)*gconst11*gconst2*(r21*r21)))+(((-3.9204e-11)*gconst6*npy*rxp1_2))+(((-4.0)*gconst4*gconst6*npx*rxp0_2))+(((4.0)*gconst6*rxp2_2*(npx*npx)))+(((-1.584e-5)*gconst10*npx*r20*rxp1_2))+(((1.56816e-11)*gconst8*r20*rxp1_2))+(((-1.58399999999757e-5)*gconst6*r21*(npy*npy)))+(((9.801e-12)*gconst10*npy*r20*rxp2_2))+(((-1.0)*gconst1*gconst10*gconst6*gconst9))+(((-2.401490025e-23)*(npy*npy)*(r21*r21)))+(((-7.92e-5)*gconst10*npy*rxp0_2*rxp1_2))+(((-3.1049568e-17)*npy*r20*r21))+(((-4.0)*gconst10*gconst2*(rxp0_2*rxp0_2)))+(((-1.0)*gconst0*gconst10*gconst7*gconst9))+((gconst1*gconst11*gconst6*rxp2_2))+(((-7.8408e-12)*gconst0*npx*r21))+(((9.9e-7)*gconst1*gconst11*gconst6*r21))+(((9.70299e-18)*gconst10*npy*r20*r21))+(((3.13632e-11)*gconst6*npy*r20))+(((-3.881196e-18)*gconst0*r21))+(((-3.9204e-12)*gconst10*gconst7*(r20*r20)))+(((-3.9204e-12)*gconst2*r21*rxp0_2))+(((-3.168e-5)*npx*npy*r20*rxp2_2))+(((-9.801e-13)*gconst5*gconst8*(r21*r21)))+(((-3.96e-5)*gconst6*npx*npy*rxp1_2))+(((-1.584e-5)*gconst8*npy*r21*rxp1_2))+(((2.4257475e-17)*gconst9*r21*(npy*npy)))+(((-3.96e-5)*gconst6*rxp0_2*(npy*npy)))+(((-3.9204e-11)*r21*rxp0_2*(npy*npy)))+(((-3.96e-6)*gconst8*rxp0_2*rxp2_2))+(((-1.98e-6)*gconst11*gconst2*r21*rxp2_2))+(((-9.801e-12)*gconst10*gconst6*npy*r20))+(((-3.13632e-11)*npy*r20*rxp2_2)));
op[3]=((((-9.801e-12)*gconst5*npy*r21*rxp2_2))+(((7.762392e-18)*gconst0*r20))+(((4.9005e-12)*gconst1*gconst6*npy*r21))+(((-4.9005e-12)*gconst10*gconst9*npy*r21))+(((-4.95e-6)*gconst4*gconst6*gconst9*npy))+(((3.96e-5)*gconst6*npx*npy*rxp0_2))+(((-16.0)*gconst4*gconst8*rxp0_2*rxp1_2))+(((3.96e-6)*gconst5*gconst8*r20*rxp2_2))+(((-4.95e-6)*gconst10*gconst3*gconst6*npy))+(((2.35224e-11)*r20*r21*(npx*npx)))+(((1.940598e-17)*npy*r21*rxp0_2))+(((-1.98e-6)*gconst1*gconst10*gconst9*r20))+(((-4.95e-6)*gconst0*gconst10*gconst9*npy))+(((-9.9e-6)*gconst11*npy*(rxp2_2*rxp2_2)))+(((3.9204e-12)*gconst5*gconst8*r20*r21))+(((-9.801e-12)*gconst2*npy*r21*rxp2_2))+(((-4.95e-6)*gconst5*npy*(rxp2_2*rxp2_2)))+(((3.96e-6)*gconst11*gconst2*r20*rxp2_2))+(((-16.0)*gconst10*gconst2*rxp0_2*rxp1_2))+(((-1.98e-6)*gconst5*gconst6*gconst7*r20))+(((-1.9602e-11)*npy*rxp0_2*rxp2_2))+(((4.95e-6)*gconst0*gconst7*npy*rxp2_2))+(((-4.851495e-18)*gconst5*npy*(r21*r21)))+(((-1.98e-5)*gconst4*npy*(rxp0_2*rxp0_2)))+(((-4.95e-6)*gconst3*gconst6*gconst7*npy))+(((6.2099136e-17)*npy*(r20*r20)))+(((4.95e-6)*gconst11*gconst6*npy*rxp2_2))+(((-1.56816e-11)*npx*r20*rxp2_2))+(((1.5524784e-17)*npx*r20*r21))+(((1.98e-6)*gconst4*gconst8*r20*rxp2_2))+(((-1.98e-5)*gconst0*npx*npy*rxp0_2))+(((4.95e-6)*gconst0*gconst11*npy*rxp2_2))+(((-1.98e-6)*gconst0*gconst11*gconst7*r20))+(((-8.0)*gconst4*gconst6*npy*rxp0_2))+(((-7.68476808e-24)*r20*r21))+(((-1.98e-6)*gconst1*gconst10*gconst6*r20))+(((-3.9204e-10)*rxp0_2*rxp1_2*(npy*npy)))+(((-4.9005e-12)*gconst6*gconst7*npy*r21))+(((-4.9005e-12)*gconst11*gconst6*npy*r21))+(((1.9602e-12)*gconst10*gconst2*r20*r21))+(((-16.0)*gconst0*npx*npy*rxp2_2))+(((-3.9204e-12)*gconst11*gconst8*r20*r21))+(((3.96e-5)*gconst10*npy*(rxp0_2*rxp0_2)))+(((-1.9602e-12)*gconst11*gconst7*r20*r21))+(((-8.0)*gconst2*npy*rxp0_2*rxp2_2))+(((-9.70299e-17)*gconst9*r20*(npy*npy)))+(((1.98e-6)*gconst5*gconst7*r20*rxp2_2))+(((4.9005e-12)*gconst4*gconst9*npy*r21))+(((1.9602e-12)*gconst4*gconst8*r20*r21))+(((-1.9602e-12)*gconst10*gconst8*r20*r21))+(((-3.168e-5)*gconst10*npy*r20*rxp1_2))+(((8.0)*gconst10*gconst6*npx*rxp1_2))+(((-4.95e-6)*gconst1*gconst6*gconst9*npy))+(((-1.584e-5)*gconst0*npx*npy*r21))+(((-3.881196e-17)*gconst11*npy*(r20*r20)))+(((4.95e-6)*gconst6*gconst7*npy*rxp2_2))+(((7.92e-6)*gconst0*r20*(npx*npx)))+(((-7.92e-6)*gconst2*npx*r21*rxp1_2))+(((1.9602e-12)*gconst1*gconst11*r20*r21))+(((-1.584e-5)*gconst0*npy*rxp2_2))+(((4.95e-6)*gconst2*gconst9*npy*rxp2_2))+(((-1.584e-5)*gconst8*rxp1_2*rxp2_2))+(((4.95e-6)*gconst4*gconst9*npy*rxp2_2))+(((-7.92e-6)*gconst4*npx*r20*rxp0_2))+(((-7.8408e-11)*r21*rxp1_2*(npy*npy)))+(((4.95e-6)*gconst5*gconst6*npy*rxp2_2))+(((-8.0)*gconst0*gconst10*npy*rxp0_2))+(((-1.56816e-11)*gconst0*npy*r21))+(((-1.98e-6)*gconst4*gconst7*gconst9*r20))+(((4.95e-6)*gconst3*gconst8*npy*rxp2_2))+(((-1.98e-6)*gconst4*gconst8*gconst9*r20))+(((-4.95e-6)*gconst0*gconst7*gconst9*npy))+(((-3.168e-5)*gconst6*npy*rxp2_2))+(((4.95e-6)*gconst10*gconst9*npy*rxp2_2))+(((-3.13631999998079e-11)*r20*r21*(npy*npy)))+(((1.98e-6)*gconst10*gconst8*r20*rxp2_2))+(((-1.98e-6)*gconst4*gconst6*gconst7*r20))+(((4.95e-6)*gconst1*gconst6*npy*rxp2_2))+(((-7.92e-5)*gconst8*npy*(rxp1_2*rxp1_2)))+(((-3.881196e-17)*gconst8*npy*(r20*r20)))+(((1.584e-5)*gconst8*npy*r21*rxp0_2))+(((-1.9602e-11)*gconst0*npy*rxp0_2))+(((3.168e-5)*gconst6*npx*npy*r21))+(((-7.8408e-12)*gconst2*r21*rxp1_2))+(((-7.92e-6)*gconst2*rxp1_2*rxp2_2))+(((5.8806e-11)*npx*npy*r21*rxp0_2))+(((-1.98e-6)*gconst1*gconst11*gconst6*r20))+(((1.584e-5)*gconst10*npx*r20*rxp0_2))+(((9.70299e-18)*gconst8*npy*(r21*r21)))+(((-7.92e-6)*gconst2*npy*r21*rxp0_2))+(((4.9005e-12)*gconst10*gconst3*npy*r21))+(((4.9005e-12)*gconst2*gconst9*npy*r21))+(((-3.881196e-17)*gconst10*npy*(r20*r20)))+(((3.96e-6)*gconst11*gconst8*r20*rxp2_2))+(((-7.92e-5)*gconst10*npy*(rxp1_2*rxp1_2)))+(((-9.9e-6)*gconst8*npy*(rxp2_2*rxp2_2)))+(((-7.8408e-12)*gconst4*r20*rxp0_2))+(((1.9602e-12)*gconst5*gconst7*r20*r21))+(((-7.92e-5)*rxp1_2*rxp2_2*(npy*npy)))+(((4.9005e-12)*gconst0*gconst7*npy*r21))+(((-7.92e-6)*gconst4*gconst6*rxp1_2))+(((16.0)*gconst10*gconst8*rxp0_2*rxp1_2))+(((1.98e-6)*gconst10*gconst2*r20*rxp2_2))+(((-3.16799999998059e-5)*r20*rxp2_2*(npy*npy)))+(((3.168e-5)*gconst8*npy*r20*rxp1_2))+(((3.1679999999903e-5)*gconst6*r20*(npy*npy)))+(((6.27264e-11)*npx*npy*(r20*r20)))+(((-1.98e-6)*gconst10*gconst2*gconst9*r20))+(((-1.98e-6)*gconst10*gconst3*gconst8*r20))+(((-3.881196e-17)*gconst7*npy*(r20*r20)))+(((1.5524784e-17)*gconst6*r20))+(((3.96e-5)*gconst8*npy*(rxp0_2*rxp0_2)))+(((7.8408e-12)*gconst2*r20*rxp0_2))+(((-1.98e-6)*gconst10*gconst3*gconst7*r20))+(((-7.92e-6)*gconst10*gconst6*rxp1_2))+(((1.98e-5)*npx*npy*rxp0_2*rxp2_2))+(((-1.584e-5)*gconst8*npx*r20*rxp0_2))+(((1.584e-5)*gconst8*npx*r21*rxp1_2))+(((9.70299e-18)*gconst11*npy*(r21*r21)))+(((-1.98e-6)*gconst0*gconst10*gconst7*r20))+(((-8.0)*gconst0*gconst10*npx*rxp1_2))+(((4.9005e-12)*gconst0*gconst11*npy*r21))+(((1.98e-6)*gconst11*gconst7*r20*rxp2_2))+(((-4.851495e-18)*gconst2*npy*(r21*r21)))+(((4.95e-6)*gconst10*gconst3*npy*rxp2_2))+(((1.98e-6)*gconst1*gconst11*r20*rxp2_2))+(((7.92e-6)*gconst2*npx*r20*rxp0_2))+(((8.0)*gconst10*gconst6*npy*rxp0_2))+(((-1.584e-5)*gconst6*r20*(npx*npx)))+(((1.56816e-11)*gconst0*npx*r20))+(((-8.0)*gconst4*gconst6*npx*rxp1_2))+(((4.9005e-12)*gconst5*gconst6*npy*r21))+(((-7.92e-5)*gconst6*rxp1_2*(npy*npy)))+(((-7.92e-6)*gconst0*gconst10*rxp1_2))+(((-4.9005e-12)*gconst8*gconst9*npy*r21))+(((3.9204e-12)*gconst11*gconst2*r20*r21))+(((-1.98e-5)*gconst2*npy*(rxp0_2*rxp0_2)))+(((7.92e-6)*r20*rxp2_2*(npx*npx)))+(((4.95e-6)*gconst8*gconst9*npy*rxp2_2))+(((-4.95e-6)*gconst2*npy*(rxp2_2*rxp2_2)))+(((-8.0)*gconst2*npx*rxp1_2*rxp2_2))+(((4.9005e-12)*gconst3*gconst8*npy*r21))+(((-2.3287176e-17)*r20*rxp2_2)));
op[4]=((((9.70299e-18)*gconst1*npy*r20*r21))+(((-3.96e-5)*gconst0*npx*npy*rxp1_2))+((gconst3*gconst4*gconst8*rxp2_2))+(((-2.4257475e-17)*gconst9*r21*(npy*npy)))+(((9.9e-7)*gconst3*gconst4*gconst8*r21))+(((-16.0)*gconst10*gconst2*(rxp1_2*rxp1_2)))+(((-1.17612e-11)*gconst0*rxp2_2))+((gconst10*gconst3*gconst8*rxp2_2))+(((-2.0)*gconst11*gconst2*(rxp2_2*rxp2_2)))+(((4.0)*gconst0*rxp2_2*(npx*npx)))+(((-1.0)*gconst11*gconst8*(rxp2_2*rxp2_2)))+(((1.188e-5)*gconst2*npx*r21*rxp0_2))+(((3.9204e-12)*gconst8*r21*rxp0_2))+((gconst10*gconst2*gconst3*rxp2_2))+(((-1.9602e-11)*gconst10*gconst3*npy*r20))+(((-1.9602e-11)*gconst4*gconst9*npy*r20))+(((1.584e-5)*gconst10*npx*r20*rxp1_2))+(((-9.801e-12)*gconst4*gconst6*npy*r20))+(((-7.92e-6)*gconst0*npx*rxp2_2))+(((3.96e-5)*gconst6*npx*npy*rxp1_2))+(((-2.910897e-17)*gconst11*npy*r20*r21))+(((4.0)*gconst2*npx*rxp0_2*rxp2_2))+(((9.9e-7)*gconst2*gconst4*gconst9*r21))+(((-1.9602e-11)*gconst0*gconst7*npy*r20))+(((-1.17612e-11)*gconst6*rxp2_2))+(((-3.9204e-12)*gconst1*gconst11*(r20*r20)))+(((-4.9005e-11)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-1.584e-5)*gconst8*npx*r20*rxp1_2))+(((-6.27264e-11)*npy*r20*rxp2_2))+(((2.910897e-17)*gconst2*npy*r20*r21))+(((2.45025e-11)*gconst9*rxp2_2*(npy*npy)))+(((-3.96e-5)*gconst0*rxp0_2*(npy*npy)))+(((8.0)*gconst0*gconst10*npx*rxp0_2))+(((2.4257475e-17)*gconst3*r21*(npy*npy)))+(((-1.98e-6)*gconst2*gconst5*r21*rxp2_2))+(((7.8408e-12)*gconst6*npx*r21))+(((3.96e-6)*gconst10*gconst6*rxp0_2))+(((8.0)*gconst4*gconst8*(rxp0_2*rxp0_2)))+(((3.073907232e-23)*(r20*r20)))+(((1.9602e-12)*gconst11*gconst2*(r21*r21)))+(((-2.45025e-11)*gconst3*gconst6*(npy*npy)))+(((9.70299e-18)*gconst4*npy*r20*r21))+(((-1.56816e-11)*gconst10*r20*rxp1_2))+(((-1.56816e-11)*gconst4*r20*rxp1_2))+(((-3.9204e-12)*gconst1*gconst10*(r20*r20)))+(((-1.0)*gconst0*gconst10*gconst3*gconst7))+(((-9.801e-12)*gconst3*gconst8*npy*r20))+(((-16.0)*gconst4*gconst6*npy*rxp1_2))+(((1.584e-5)*gconst2*npy*r20*rxp0_2))+(((-3.9204e-12)*gconst4*gconst7*(r20*r20)))+((gconst5*gconst6*gconst7*rxp2_2))+(((3.168e-5)*gconst0*npx*npy*r20))+(((-9.801e-12)*gconst3*gconst7*npy*r20))+(((-1.0)*gconst1*gconst4*gconst6*gconst9))+(((3.96e-6)*gconst8*rxp0_2*rxp2_2))+(((4.80298005e-23)*(npy*npy)*(r21*r21)))+(((-3.96e-6)*gconst2*rxp0_2*rxp2_2))+(((-1.0)*gconst0*gconst1*gconst10*gconst9))+(((1.9602e-12)*gconst5*gconst8*(r21*r21)))+(((-4.0)*gconst10*gconst6*npx*rxp0_2))+(((1.584e-5)*gconst10*npy*r20*rxp0_2))+(((-2.45025e-11)*gconst0*gconst9*(npy*npy)))+(((1.584e-5)*gconst8*npy*r21*rxp1_2))+(((-15.9999999999755)*gconst6*rxp2_2*(npy*npy)))+(((4.0)*gconst8*npx*rxp0_2*rxp2_2))+(((1.9602e-10)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-9.801e-12)*gconst0*gconst10*npy*r20))+(((-9.9e-7)*gconst4*gconst8*gconst9*r21))+(((-1.584e-5)*gconst4*npx*r20*rxp1_2))+(((-9.70299e-18)*gconst7*npy*r20*r21))+(((-9.801e-12)*gconst5*gconst6*npy*r20))+(((3.13632e-11)*gconst0*npy*r20))+(((-4.0)*gconst10*gconst8*(rxp0_2*rxp0_2)))+(((-3.9204e-10)*(npy*npy)*(rxp1_2*rxp1_2)))+(((7.92e-5)*gconst10*npy*rxp0_2*rxp1_2))+(((2.9403e-11)*gconst5*npy*r20*rxp2_2))+(((2.9403e-11)*gconst2*npy*r20*rxp2_2))+(((6.27264e-11)*npx*npy*r20*r21))+(((9.801e-12)*gconst7*npy*r20*rxp2_2))+(((3.96e-5)*gconst6*rxp0_2*(npy*npy)))+(((-16.0)*gconst8*npy*rxp1_2*rxp2_2))+(((9.9e-7)*gconst0*gconst1*gconst11*r21))+(((-1.584e-5)*gconst2*npy*r21*rxp1_2))+(((-9.9e-7)*gconst1*gconst11*gconst6*r21))+(((-9.70299e-18)*gconst10*npy*r20*r21))+(((9.9e-7)*gconst10*gconst2*gconst3*r21))+((gconst1*gconst5*gconst6*rxp2_2))+(((-3.9204e-11)*gconst0*npy*rxp1_2))+(((-7.92e-5)*gconst2*npy*rxp0_2*rxp1_2))+(((7.92e-6)*gconst6*npx*rxp2_2))+(((-9.801e-12)*gconst1*gconst9*npy*r20))+(((-2.910897e-17)*gconst8*npy*r20*r21))+(((7.8408e-11)*r21*rxp0_2*(npy*npy)))+(((2.45025e-11)*gconst3*rxp2_2*(npy*npy)))+(((-3.9204e-12)*gconst5*gconst7*(r20*r20)))+(((-9.801e-12)*gconst0*gconst11*npy*r20))+((gconst0*gconst11*gconst7*rxp2_2))+(((-16.0)*gconst0*gconst10*npy*rxp1_2))+(((-7.92e-5)*gconst4*npy*rxp0_2*rxp1_2))+(((3.9204e-12)*gconst2*r21*rxp0_2))+(((-7.8408e-11)*npy*rxp1_2*rxp2_2))+(((-1.9602e-11)*gconst1*gconst6*npy*r20))+(((-9.801e-13)*gconst2*gconst5*(r21*r21)))+(((2.9403e-11)*gconst8*npy*r20*rxp2_2))+((gconst4*gconst8*gconst9*rxp2_2))+((gconst10*gconst2*gconst9*rxp2_2))+(((-1.0)*gconst1*gconst10*gconst3*gconst6))+(((1.584e-5)*gconst2*npx*r20*rxp1_2))+(((6.27263999996158e-11)*(npy*npy)*(r20*r20)))+(((-1.584e-5)*gconst4*npy*r20*rxp0_2))+(((2.9403e-11)*gconst11*npy*r20*rxp2_2))+(((-3.168e-5)*gconst6*npx*npy*r20))+(((9.9e-7)*gconst0*gconst5*gconst7*r21))+(((-3.9204e-11)*gconst6*npy*rxp1_2))+(((-9.9e-7)*gconst0*gconst11*gconst7*r21))+(((4.0)*gconst6*rxp2_2*(npx*npx)))+(((-1.188e-5)*gconst8*npx*r21*rxp0_2))+(((-15.9999999999755)*gconst0*rxp2_2*(npy*npy)))+(((1.56816e-11)*gconst8*r20*rxp1_2))+(((-9.801e-13)*gconst11*gconst8*(r21*r21)))+(((9.801e-12)*gconst10*npy*r20*rxp2_2))+(((-2.0)*gconst5*gconst8*(rxp2_2*rxp2_2)))+(((-3.9204e-12)*gconst11*gconst2*(r20*r20)))+(((-3.13632e-11)*(npx*npx)*(r20*r20)))+(((-1.0)*gconst0*gconst4*gconst7*gconst9))+((gconst1*gconst11*gconst6*rxp2_2))+((gconst2*gconst4*gconst9*rxp2_2))+(((3.13632e-11)*gconst6*npy*r20))+(((1.56816e-11)*gconst2*r20*rxp1_2))+((gconst0*gconst1*gconst11*rxp2_2))+(((-3.9204e-12)*gconst4*gconst8*(r20*r20)))+(((-3.881196e-18)*gconst0*r21))+(((9.9e-7)*gconst1*gconst5*gconst6*r21))+(((-16.0)*gconst2*npy*rxp1_2*rxp2_2))+(((8.0)*gconst4*gconst6*npx*rxp0_2))+(((-4.0)*gconst0*gconst4*npx*rxp0_2))+(((1.188e-5)*gconst0*r21*(npx*npx)))+(((-1.0)*gconst3*gconst4*gconst6*gconst7))+(((-9.801e-12)*gconst2*gconst9*npy*r20))+(((-1.584e-5)*gconst8*npy*r20*rxp0_2))+(((9.801e-12)*gconst1*npy*r20*rxp2_2))+(((-1.188e-5)*gconst6*r21*(npx*npx)))+(((2.910897e-17)*gconst5*npy*r20*r21))+(((-9.9e-7)*gconst5*gconst6*gconst7*r21))+(((7.92e-5)*gconst8*npy*rxp0_2*rxp1_2))+(((-4.0)*gconst2*gconst4*(rxp0_2*rxp0_2)))+(((7.8408e-12)*gconst0*npx*r21))+(((-1.0)*gconst2*gconst5*(rxp2_2*rxp2_2)))+(((1.98e-6)*gconst11*gconst8*r21*rxp2_2))+(((-9.9e-7)*gconst10*gconst2*gconst9*r21))+(((-3.96e-6)*gconst0*gconst4*rxp0_2))+(((8.0)*gconst10*gconst2*(rxp0_2*rxp0_2)))+(((9.801e-12)*gconst4*npy*r20*rxp2_2))+(((3.881196e-18)*gconst6*r21))+(((-1.58399999999757e-5)*gconst0*r21*(npy*npy)))+(((-9.9e-7)*gconst10*gconst3*gconst8*r21))+(((-3.9204e-12)*gconst10*gconst2*(r20*r20)))+(((-3.9204e-12)*gconst5*gconst8*(r20*r20)))+(((7.8408e-11)*npx*npy*r21*rxp1_2))+(((-16.0)*gconst4*gconst8*(rxp1_2*rxp1_2)))+(((1.58399999999757e-5)*gconst6*r21*(npy*npy)))+((gconst0*gconst5*gconst7*rxp2_2)));
op[5]=((((7.92e-6)*gconst8*npx*r20*rxp0_2))+(((3.96e-5)*gconst0*npx*npy*rxp0_2))+(((-4.9005e-12)*gconst0*gconst11*npy*r21))+(((-3.881196e-17)*gconst1*npy*(r20*r20)))+(((-4.95e-6)*gconst11*npy*(rxp2_2*rxp2_2)))+(((-16.0)*gconst2*gconst4*rxp0_2*rxp1_2))+(((3.96e-6)*gconst5*gconst8*r20*rxp2_2))+(((1.940598e-17)*npy*r21*rxp0_2))+(((3.96e-6)*gconst2*gconst5*r20*rxp2_2))+(((-3.881196e-17)*gconst2*npy*(r20*r20)))+(((-1.584e-5)*gconst6*npy*rxp2_2))+(((7.8408e-12)*gconst8*r21*rxp1_2))+(((-2.35224e-11)*r20*r21*(npx*npx)))+(((3.96e-6)*gconst11*gconst2*r20*rxp2_2))+(((-1.98e-6)*gconst0*gconst4*gconst7*r20))+(((-7.92e-6)*gconst0*gconst4*rxp1_2))+(((-4.95e-6)*gconst3*gconst4*gconst6*npy))+(((-3.881196e-17)*gconst5*npy*(r20*r20)))+(((4.95e-6)*gconst0*gconst7*npy*rxp2_2))+(((7.8408e-11)*r21*rxp1_2*(npy*npy)))+(((6.2099136e-17)*npy*(r20*r20)))+(((-1.98e-6)*gconst0*gconst1*gconst10*r20))+(((4.95e-6)*gconst0*gconst1*npy*rxp2_2))+(((-7.8408e-12)*gconst8*r20*rxp0_2))+(((-4.95e-6)*gconst0*gconst4*gconst9*npy))+(((9.70299e-18)*gconst5*npy*(r21*r21)))+(((7.68476808e-24)*r20*r21))+(((3.1679999999903e-5)*gconst0*r20*(npy*npy)))+(((1.5524784e-17)*npx*r20*r21))+(((1.98e-6)*gconst4*gconst8*r20*rxp2_2))+(((7.762392e-18)*gconst6*r20))+(((8.0)*gconst8*npx*rxp1_2*rxp2_2))+(((4.95e-6)*gconst0*gconst11*npy*rxp2_2))+(((-1.9602e-12)*gconst5*gconst7*r20*r21))+(((-1.98e-5)*gconst8*npy*(rxp0_2*rxp0_2)))+(((-4.95e-6)*gconst0*gconst10*gconst3*npy))+(((4.95e-6)*gconst3*gconst4*npy*rxp2_2))+(((-4.851495e-18)*gconst11*npy*(r21*r21)))+(((1.584e-5)*gconst2*npx*r21*rxp1_2))+(((-1.584e-5)*gconst2*rxp1_2*rxp2_2))+(((3.9204e-10)*rxp0_2*rxp1_2*(npy*npy)))+(((8.0)*gconst4*gconst6*npx*rxp1_2))+(((-4.9005e-12)*gconst4*gconst9*npy*r21))+(((3.13631999998079e-11)*r20*r21*(npy*npy)))+(((1.584e-5)*gconst2*npy*r21*rxp0_2))+(((-1.98e-6)*gconst10*gconst2*gconst3*r20))+(((1.98e-6)*gconst5*gconst7*r20*rxp2_2))+(((-1.9602e-12)*gconst10*gconst2*r20*r21))+(((-8.0)*gconst0*gconst4*npx*rxp1_2))+(((-1.584e-5)*gconst2*npx*r20*rxp0_2))+(((4.9005e-12)*gconst3*gconst4*npy*r21))+(((3.168e-5)*gconst0*npx*npy*r21))+(((8.0)*gconst0*gconst10*npy*rxp0_2))+(((-1.9602e-12)*gconst1*gconst11*r20*r21))+(((-3.9204e-12)*gconst5*gconst8*r20*r21))+(((-1.98e-5)*gconst10*npy*(rxp0_2*rxp0_2)))+(((-1.98e-6)*gconst1*gconst10*gconst3*r20))+(((-1.98e-5)*gconst6*npx*npy*rxp0_2))+(((-5.8806e-11)*npx*npy*r21*rxp0_2))+(((4.9005e-12)*gconst0*gconst5*npy*r21))+(((4.9005e-12)*gconst0*gconst1*npy*r21))+(((-4.95e-6)*gconst1*gconst3*gconst6*npy))+(((1.56816e-11)*gconst6*npy*r21))+(((3.96e-5)*gconst4*npy*(rxp0_2*rxp0_2)))+(((4.95e-6)*gconst2*gconst9*npy*rxp2_2))+(((-7.92e-6)*gconst8*rxp1_2*rxp2_2))+(((3.96e-5)*gconst2*npy*(rxp0_2*rxp0_2)))+(((-3.168e-5)*gconst4*npy*r20*rxp1_2))+(((4.95e-6)*gconst4*gconst9*npy*rxp2_2))+(((-4.95e-6)*gconst0*gconst3*gconst7*npy))+(((4.95e-6)*gconst5*gconst6*npy*rxp2_2))+(((-4.9005e-12)*gconst3*gconst8*npy*r21))+(((-4.95e-6)*gconst8*npy*(rxp2_2*rxp2_2)))+(((4.95e-6)*gconst0*gconst5*npy*rxp2_2))+(((-7.92e-6)*gconst10*npx*r20*rxp0_2))+(((-1.584e-5)*gconst6*npx*npy*r21))+(((4.95e-6)*gconst2*gconst3*npy*rxp2_2))+(((4.95e-6)*gconst3*gconst8*npy*rxp2_2))+(((-6.27264e-11)*npx*npy*(r20*r20)))+(((3.9204e-12)*gconst2*gconst5*r20*r21))+(((16.0)*gconst4*gconst8*rxp0_2*rxp1_2))+(((-1.584e-5)*gconst0*r20*(npx*npx)))+(((4.9005e-12)*gconst2*gconst3*npy*r21))+(((-3.9204e-12)*gconst11*gconst2*r20*r21))+(((-1.98e-6)*gconst1*gconst4*gconst9*r20))+(((-4.95e-6)*gconst0*gconst1*gconst9*npy))+(((-7.92e-5)*gconst2*npy*(rxp1_2*rxp1_2)))+(((4.95e-6)*gconst1*gconst6*npy*rxp2_2))+(((8.0)*gconst8*npy*rxp0_2*rxp2_2))+(((-3.881196e-17)*gconst4*npy*(r20*r20)))+(((-4.9005e-12)*gconst0*gconst7*npy*r21))+(((9.801e-12)*gconst8*npy*r21*rxp2_2))+(((-4.9005e-12)*gconst2*gconst9*npy*r21))+(((-4.9005e-12)*gconst1*gconst6*npy*r21))+(((1.56816e-11)*npx*r20*rxp2_2))+(((7.92e-6)*gconst6*r20*(npx*npx)))+(((1.9602e-12)*gconst2*gconst4*r20*r21))+(((-9.70299e-17)*gconst3*r20*(npy*npy)))+(((-1.98e-6)*gconst1*gconst4*gconst6*r20))+(((-7.92e-5)*gconst4*npy*(rxp1_2*rxp1_2)))+(((-7.92e-5)*rxp1_2*rxp2_2*(npy*npy)))+(((-7.92e-6)*gconst4*gconst6*rxp1_2))+(((1.98e-6)*gconst10*gconst2*r20*rxp2_2))+(((-3.16799999998059e-5)*r20*rxp2_2*(npy*npy)))+(((-7.92e-6)*gconst8*npy*r21*rxp0_2))+(((-4.9005e-12)*gconst10*gconst3*npy*r21))+(((1.5524784e-17)*gconst0*r20))+(((-4.9005e-12)*gconst5*gconst6*npy*r21))+(((8.0)*gconst0*gconst10*npx*rxp1_2))+(((-9.9e-6)*gconst2*npy*(rxp2_2*rxp2_2)))+(((-1.98e-6)*gconst3*gconst4*gconst7*r20))+(((16.0)*gconst10*gconst2*rxp0_2*rxp1_2))+(((-1.9602e-12)*gconst4*gconst8*r20*r21))+(((1.9602e-11)*npy*rxp0_2*rxp2_2))+(((9.801e-12)*gconst11*npy*r21*rxp2_2))+(((-9.9e-6)*gconst5*npy*(rxp2_2*rxp2_2)))+(((7.8408e-12)*gconst10*r20*rxp0_2))+(((1.98e-5)*npx*npy*rxp0_2*rxp2_2))+(((1.584e-5)*gconst4*npx*r20*rxp0_2))+(((9.70299e-18)*gconst2*npy*(r21*r21)))+(((8.0)*gconst4*gconst6*npy*rxp0_2))+(((4.95e-6)*gconst10*gconst3*npy*rxp2_2))+(((1.98e-6)*gconst2*gconst4*r20*rxp2_2))+(((1.98e-6)*gconst1*gconst11*r20*rxp2_2))+(((-4.851495e-18)*gconst8*npy*(r21*r21)))+(((-1.98e-6)*gconst3*gconst4*gconst8*r20))+(((-3.168e-5)*gconst0*npy*rxp2_2))+(((-1.98e-6)*gconst1*gconst5*gconst6*r20))+(((-8.0)*gconst0*gconst4*npy*rxp0_2))+(((-1.56816e-11)*gconst6*npx*r20))+(((1.9602e-11)*gconst6*npy*rxp0_2))+(((-1.98e-6)*gconst2*gconst4*gconst9*r20))+(((-7.92e-6)*gconst8*npx*r21*rxp1_2))+(((-7.92e-6)*gconst0*gconst10*rxp1_2))+(((-7.92e-5)*gconst0*rxp1_2*(npy*npy)))+(((7.92e-6)*r20*rxp2_2*(npx*npx)))+(((1.98e-6)*gconst1*gconst5*r20*rxp2_2))+(((16.0)*gconst6*npx*npy*rxp2_2))+(((1.9602e-12)*gconst1*gconst5*r20*r21))+(((-1.98e-6)*gconst0*gconst5*gconst7*r20))+(((-1.98e-6)*gconst0*gconst1*gconst11*r20))+(((3.168e-5)*gconst2*npy*r20*rxp1_2))+(((-2.3287176e-17)*r20*rxp2_2)));
op[6]=(((gconst3*gconst4*gconst8*rxp2_2))+(((3.96e-6)*gconst6*r21*(npx*npx)))+(((-2.910897e-17)*gconst2*npy*r20*r21))+(((-4.0)*gconst8*npx*rxp0_2*rxp2_2))+(((-9.9e-7)*gconst0*gconst1*gconst11*r21))+(((-1.17612e-11)*gconst0*rxp2_2))+(((-3.9204e-11)*npy*rxp1_2*rxp2_2))+(((-9.9e-7)*gconst2*gconst4*gconst9*r21))+(((-16.0)*gconst2*gconst4*(rxp1_2*rxp1_2)))+(((4.0)*gconst0*rxp2_2*(npx*npx)))+(((-4.0)*gconst4*gconst8*(rxp0_2*rxp0_2)))+((gconst10*gconst2*gconst3*rxp2_2))+(((1.56816e-11)*(npx*npx)*(r20*r20)))+(((4.0)*gconst2*npx*rxp0_2*rxp2_2))+(((-9.801e-11)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-1.0)*gconst5*gconst8*(rxp2_2*rxp2_2)))+(((-9.801e-12)*gconst2*gconst3*npy*r20))+(((3.96e-5)*rxp0_2*rxp2_2*(npy*npy)))+((gconst0*gconst1*gconst5*rxp2_2))+(((-9.9e-7)*gconst3*gconst4*gconst8*r21))+(((-1.0)*gconst0*gconst1*gconst4*gconst9))+(((-1.56816e-11)*gconst4*r20*rxp1_2))+(((-2.910897e-17)*gconst5*npy*r20*r21))+(((4.851495e-17)*r21*rxp2_2*(npy*npy)))+(((3.96e-6)*gconst2*rxp0_2*rxp2_2))+(((-1.0)*gconst1*gconst3*gconst4*gconst6))+(((-9.70299e-18)*gconst1*npy*r20*r21))+(((-9.801e-12)*gconst0*gconst5*npy*r20))+(((3.96e-6)*gconst8*rxp0_2*rxp2_2))+(((-1.9602e-11)*gconst0*gconst1*npy*r20))+(((-1.0)*gconst11*gconst2*(rxp2_2*rxp2_2)))+(((-1.0)*gconst0*gconst1*gconst10*gconst3))+(((-1.9602e-11)*gconst3*gconst4*npy*r20))+(((3.168e-5)*npx*npy*r20*rxp2_2))+(((-1.188e-5)*gconst2*npx*r21*rxp0_2))+(((3.13632e-11)*gconst0*npy*r20))+(((-4.0)*gconst0*gconst10*npx*rxp0_2))+(((1.584e-5)*gconst4*npx*r20*rxp1_2))+(((2.9403e-11)*gconst5*npy*r20*rxp2_2))+(((1.536953616e-23)*(r20*r20)))+(((2.9403e-11)*gconst2*npy*r20*rxp2_2))+(((-3.13632e-11)*npx*npy*r20*r21))+((gconst1*gconst5*gconst6*rxp2_2))+(((-3.9204e-11)*gconst0*npy*rxp1_2))+(((-3.9204e-12)*gconst2*gconst5*(r20*r20)))+(((3.96e-5)*gconst0*rxp0_2*(npy*npy)))+(((7.92e-6)*gconst6*npx*rxp2_2))+(((3.1049568e-17)*npy*r20*r21))+(((-3.9204e-12)*gconst8*r21*rxp0_2))+(((-4.0)*gconst6*rxp2_2*(npx*npx)))+(((2.45025e-11)*gconst3*rxp2_2*(npy*npy)))+(((7.92e-6)*gconst0*npx*rxp2_2))+(((3.96e-5)*npx*npy*rxp1_2*rxp2_2))+(((-7.8408e-12)*gconst6*npx*r21))+(((-1.584e-5)*gconst2*npx*r20*rxp1_2))+(((3.96e-6)*gconst8*npx*r21*rxp0_2))+(((-1.0)*gconst0*gconst3*gconst4*gconst7))+(((1.98e-6)*gconst5*gconst8*r21*rxp2_2))+(((-2.45025e-11)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-1.188e-5)*gconst0*r21*(npx*npx)))+(((-3.9204e-12)*gconst2*gconst4*(r20*r20)))+(((3.9204e-12)*gconst2*r21*rxp0_2))+(((-9.70299e-18)*gconst4*npy*r20*r21))+(((-3.9204e-12)*gconst6*rxp2_2))+(((-3.1049568e-17)*npx*(r20*r20)))+(((-16.0)*gconst0*gconst4*npy*rxp1_2))+(((9.9e-7)*gconst0*gconst1*gconst5*r21))+(((-9.9e-7)*gconst10*gconst2*gconst3*r21))+(((-3.9204e-11)*npx*npy*r21*rxp1_2))+(((-9.9e-7)*gconst0*gconst5*gconst7*r21))+(((-9.801e-13)*gconst11*gconst2*(r21*r21)))+(((-4.0)*gconst4*gconst6*npx*rxp0_2))+(((9.9e-7)*gconst2*gconst3*gconst4*r21))+(((-2.0)*gconst2*gconst5*(rxp2_2*rxp2_2)))+(((-9.801e-12)*gconst0*gconst4*npy*r20))+(((1.58399999999757e-5)*gconst0*r21*(npy*npy)))+(((7.92e-5)*gconst2*npy*rxp0_2*rxp1_2))+(((-15.9999999999755)*gconst0*rxp2_2*(npy*npy)))+(((-9.9e-7)*gconst1*gconst5*gconst6*r21))+(((-2.401490025e-23)*(npy*npy)*(r21*r21)))+(((3.881196e-18)*gconst0*r21))+(((8.0)*gconst0*gconst4*npx*rxp0_2))+(((3.96e-6)*gconst4*gconst6*rxp0_2))+(((-4.0)*gconst10*gconst2*(rxp0_2*rxp0_2)))+((gconst2*gconst4*gconst9*rxp2_2))+(((1.98e-6)*gconst11*gconst2*r21*rxp2_2))+(((8.0)*gconst2*gconst4*(rxp0_2*rxp0_2)))+(((1.56816e-11)*gconst2*r20*rxp1_2))+(((1.9602e-12)*gconst2*gconst5*(r21*r21)))+((gconst0*gconst1*gconst11*rxp2_2))+(((1.584e-5)*gconst4*npy*r20*rxp0_2))+(((-9.801e-12)*gconst1*gconst3*npy*r20))+(((3.881196e-17)*npy*r21*rxp1_2))+(((-16.0)*gconst2*npy*rxp1_2*rxp2_2))+(((-3.168e-5)*gconst0*npx*npy*r20))+(((-9.801e-13)*gconst5*gconst8*(r21*r21)))+(((3.96e-6)*gconst0*gconst10*rxp0_2))+(((9.801e-12)*gconst1*npy*r20*rxp2_2))+((gconst2*gconst3*gconst4*rxp2_2))+(((-3.9204e-12)*gconst1*gconst5*(r20*r20)))+(((-2.4257475e-17)*gconst3*r21*(npy*npy)))+(((3.96e-5)*gconst0*npx*npy*rxp1_2))+(((-3.9204e-11)*r21*rxp0_2*(npy*npy)))+(((7.8408e-12)*gconst0*npx*r21))+(((-3.9204e-12)*gconst1*gconst4*(r20*r20)))+(((-1.584e-5)*gconst2*npy*r20*rxp0_2))+(((1.584e-5)*gconst2*npy*r21*rxp1_2))+(((9.801e-12)*gconst4*npy*r20*rxp2_2))+(((-2.45025e-11)*gconst0*gconst3*(npy*npy)))+(((3.881196e-18)*gconst6*r21))+(((-3.13632e-11)*npy*r20*rxp2_2))+((gconst0*gconst5*gconst7*rxp2_2))+(((7.92e-5)*gconst4*npy*rxp0_2*rxp1_2)));
IkReal x132=npx*npx;
IkReal x133=rxp2_2*rxp2_2;
IkReal x134=r21*r21;
IkReal x135=rxp0_2*rxp0_2;
IkReal x136=(gconst2*r21);
IkReal x137=((7.92e-6)*rxp1_2);
IkReal x138=((1.98e-6)*gconst5);
IkReal x139=((4.95e-6)*gconst1);
IkReal x140=(npy*rxp0_2);
IkReal x141=((1.98e-6)*gconst4);
IkReal x142=(npy*r21);
IkReal x143=(gconst0*gconst1);
IkReal x144=(gconst0*r20);
IkReal x145=(gconst0*gconst4);
IkReal x146=((1.56816e-11)*npx);
IkReal x147=((9.801e-12)*rxp2_2);
IkReal x148=((4.95e-6)*npy);
IkReal x149=((7.8408e-12)*r20);
IkReal x150=(gconst1*r20);
IkReal x151=(r20*rxp2_2);
IkReal x152=(npx*rxp0_2);
IkReal x153=(gconst3*gconst4);
IkReal x154=((1.98e-5)*npy);
IkReal x155=(npx*rxp2_2);
IkReal x156=(gconst2*rxp0_2);
IkReal x157=(npx*r21);
IkReal x158=(gconst2*rxp2_2);
IkReal x159=(gconst5*r21);
IkReal x160=(gconst2*r20);
IkReal x161=(gconst3*npy);
IkReal x162=(gconst0*rxp2_2);
IkReal x163=((8.0)*rxp1_2);
IkReal x164=(gconst0*npx);
IkReal x165=(gconst4*r20);
IkReal x166=(gconst2*gconst5);
IkReal x167=(npy*x162);
IkReal x168=(r20*x143);
IkReal x169=(gconst5*x133);
IkReal x170=(r21*x132);
IkReal x171=((7.92e-6)*x132);
IkReal x172=(gconst4*x135);
IkReal x173=((4.851495e-18)*npy*x134);
op[7]=((((-1.0)*x154*x172))+(((-7.92e-6)*x136*x140))+(((8.0)*x140*x145))+(((7.8408e-12)*rxp1_2*x136))+(((1.56816e-11)*gconst0*x142))+((gconst2*x141*x151))+(((-1.0)*x137*x145))+((gconst4*rxp0_2*x149))+((x144*x171))+((x139*x167))+(((-1.98e-5)*x140*x155))+(((-7.92e-6)*x152*x165))+(((8.0)*x140*x158))+(((-1.0)*gconst2*x135*x154))+(((-1.0)*x137*x158))+((gconst2*x155*x163))+(((7.68476808e-24)*r20*r21))+(((-1.0)*gconst3*x145*x148))+((x149*x170))+(((7.92e-6)*x152*x160))+(((-3.9204e-12)*gconst5*r20*x136))+(((-4.9005e-12)*gconst0*gconst5*x142))+(((-4.9005e-12)*x142*x143))+(((-1.98e-5)*x140*x164))+(((-1.584e-5)*x167))+(((-1.0)*x151*x171))+(((-1.0)*x144*x146))+(((1.9602e-11)*gconst0*x140))+(((1.9602e-11)*x140*x157))+(((-4.9005e-12)*x142*x153))+((npx*x145*x163))+(((-1.584e-5)*x142*x164))+(((1.9602e-11)*rxp2_2*x140))+(((-1.9602e-12)*x150*x159))+((rxp2_2*x148*x153))+(((-1.0)*x141*x168))+((gconst5*x142*x147))+((npy*x136*x147))+(((16.0)*gconst4*rxp1_2*x156))+(((7.762392e-18)*x144))+((x146*x151))+(((-1.0)*gconst5*x173))+((gconst5*x148*x162))+(((-1.0)*gconst2*x173))+(((-1.0)*x148*x169))+(((-1.0)*gconst3*x141*x160))+(((16.0)*gconst0*npy*x155))+(((-7.762392e-18)*x151))+(((-1.5524784e-17)*r20*x157))+(((-1.0)*x149*x156))+((gconst3*x148*x158))+(((-1.0)*gconst2*x133*x148))+(((-1.0)*x138*x168))+(((-1.940598e-17)*r21*x140))+(((3.96e-6)*x151*x166))+(((-1.0)*gconst0*x139*x161))+((rxp2_2*x138*x150))+(((-1.0)*gconst3*x141*x150))+(((-1.0)*npx*x136*x137))+(((-1.9602e-12)*x136*x165))+(((-4.9005e-12)*x136*x161)));
op[8]=((((3.96e-6)*rxp2_2*x156))+((x153*x158))+(((-3.9204e-12)*rxp0_2*x136))+(((-9.801e-13)*x134*x166))+((rxp2_2*x136*x138))+(((-1.0)*x143*x153))+(((-4.0)*x145*x152))+(((7.92e-6)*gconst0*x155))+(((-4.0)*x152*x158))+(((-1.0)*x133*x166))+(((-4.0)*gconst2*x172))+((gconst5*rxp2_2*x143))+(((3.96e-6)*gconst0*x170))+(((3.96e-6)*rxp0_2*x145))+(((-9.9e-7)*x136*x153))+(((-7.8408e-12)*gconst0*x157))+(((3.881196e-18)*gconst0*r21))+(((3.96e-6)*x136*x152))+(((-3.9204e-12)*x162))+(((-4.0)*x132*x162))+(((-9.9e-7)*x143*x159)));
polyroots8(op,zeror,numroots);
IkReal j15array[8], cj15array[8], sj15array[8], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((2.0)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[8]={true,true,true,true,true,true,true,true};
_nj15 = 8;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal j14eval[2];
IkReal x174=cj15*cj15;
IkReal x175=((1.0)*sj15);
IkReal x176=((1.0)*cj15);
IkReal x177=(npz*rxp1_2);
IkReal x178=(npx*rxp2_2);
IkReal x179=((9.9e-7)*r21);
IkReal x180=((1010101.01010101)*r20);
IkReal x181=(cj15*sj15);
IkReal x182=((1020304050607.08)*cj15);
IkReal x183=(npz*rxp0_2);
IkReal x184=((1010101.01010101)*r21);
IkReal x185=((9.9e-7)*r20);
IkReal x186=(npx*x174);
IkReal x187=(npy*x174);
IkReal x188=(npy*rxp2_2*sj15);
j14eval[0]=((((-1.0)*x178*x182))+(((-1.0)*npy*x181*x184))+(((1020304050607.08)*x188))+((x180*x187))+(((1010101.01010101)*rxp2_2))+((npx*x180*x181))+(((-1.0)*npy*x180))+((x184*x186))+(((-1.0)*r20*x175))+(((-1.0)*r21*x176))+(((-1020304050607.08)*sj15*x177))+((x182*x183)));
j14eval[1]=IKsign(((((-9.801e-13)*r20*sj15))+(((-1.0)*x175*x177))+(((-9.801e-13)*cj15*r21))+(((9.9e-7)*rxp2_2))+((x179*x186))+((x185*x187))+(((-1.0)*npy*x185))+x188+((npx*x181*x185))+(((-1.0)*x176*x178))+(((-1.0)*npy*x179*x181))+((cj15*x183))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x189=cj15*cj15;
IkReal x190=(cj15*rxp0_2);
IkReal x191=((1.25)*pp);
IkReal x192=((2.45025e-12)*r21);
IkReal x193=(npy*r20);
IkReal x194=(rxp1_2*sj15);
IkReal x195=(cj15*npx);
IkReal x196=(cj15*r21);
IkReal x197=(npy*sj15);
IkReal x198=(r20*sj15);
IkReal x199=((1.2375e-6)*pp);
IkReal x200=(npx*x189);
IkReal x201=((2.475e-6)*x197);
IkReal x202=((2.475e-6)*npy*rxp1_2);
CheckValue<IkReal> x203 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*x192*x197))+(((-1.0)*x196*x199))+(((2.45025e-12)*x189*x193))+((x192*x200))+(((3.39669e-18)*x196))+(((3.39669e-18)*x198))+((rxp2_2*x201))+(((-3.431e-12)*rxp2_2))+(((-2.475e-6)*rxp2_2*x195))+(((2.45025e-12)*x195*x198))+(((-1.0)*x198*x199))+((rxp2_2*x191))+(((-2.45025e-12)*x193)))),IkReal(((((-3.431e-12)*x190))+(((-1.0)*x191*x194))+((x189*x202))+((x190*x201))+(((-2.475e-6)*rxp0_2*x200))+(((-1.0)*x202))+(((3.431e-12)*x194))+(((2.475e-6)*x194*x195))+((x190*x191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x203.valid){
continue;
}
CheckValue<IkReal> x204=IKPowWithIntegerCheck(IKsign(((((9.9e-7)*rxp2_2))+(((-9.9e-7)*x196*x197))+(((9.9e-7)*x195*x198))+(((-9.801e-13)*x196))+(((-9.801e-13)*x198))+(((9.9e-7)*x189*x193))+(((-1.0)*npz*x194))+((rxp2_2*x197))+(((-9.9e-7)*x193))+(((-1.0)*rxp2_2*x195))+(((9.9e-7)*r21*x200))+((npz*x190)))),-1);
if(!x204.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x203.value)+(((1.5707963267949)*(x204.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x205=IKcos(j14);
IkReal x206=IKsin(j14);
IkReal x207=(npy*sj15);
IkReal x208=(cj15*x206);
IkReal x209=((9.9e-7)*x205);
evalcond[0]=(((rxp2_2*x205))+(((-1.0)*rxp0_2*x208))+(((-1.0)*r20*sj15*x209))+(((-1.0)*cj15*r21*x209))+((rxp1_2*sj15*x206)));
evalcond[1]=((-3.431e-12)+(((-1.0)*x206*x207))+(((2.475e-6)*x207))+(((-1.0)*npz*x205))+(((-2.475e-6)*cj15*npx))+((npx*x208))+(((-9.9e-7)*x206))+(((1.25)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[1];
j10eval[0]=(((r11*sj15))+(((1010101.01010101)*py))+(((-1.0)*cj15*r10)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
j10eval[0]=(((cj14*r12))+((r11*sj14*sj15))+(((-1.0)*cj15*r10*sj14)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x210=((1010101.01010101)*sj14);
IkReal x211=((1.0)*cj14);
j10eval[0]=((((1010101.01010101)*cj14*rxp2_0))+((rxp1_0*sj15*x210))+(((-1.0)*cj15*r01*x211))+(((-1.0)*cj15*rxp0_0*x210))+(((-1.0)*r00*sj15*x211)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x212=((1.0)+(((-1.0)*(r12*r12))));
if((x212) < -0.00001)
continue;
IkReal x213=IKabs(IKsqrt(x212));
IkReal x220 = x212;
if(IKabs(x220)==0){
continue;
}
IkReal x214=pow(x220,-0.5);
IkReal x215=(r10*x214);
IkReal x216=(r11*x214);
CheckValue<IkReal> x221=IKPowWithIntegerCheck(x213,-1);
if(!x221.valid){
continue;
}
IkReal x217=x221.value;
IkReal x218=((1010101.01010101)*py*x217);
if((((1.0)+(((-1020304050607.08)*(py*py)*(x217*x217))))) < -0.00001)
continue;
IkReal x219=IKsqrt(((1.0)+(((-1020304050607.08)*(py*py)*(x217*x217)))));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x222=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x222.valid){
continue;
}
if( (((1010101.01010101)*py*(x222.value))) < -1-IKFAST_SINCOS_THRESH || (((1010101.01010101)*py*(x222.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x223 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x223.valid){
continue;
}
IkReal gconst28=((((-1.0)*(IKasin(((1010101.01010101)*py*(x222.value))))))+(((-1.0)*(x223.value))));
IkReal gconst29=(((x215*x219))+(((-1.0)*x216*x218)));
IkReal gconst30=(((x216*x219))+((x215*x218)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x224=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x224.valid){
continue;
}
if( (((1010101.01010101)*py*(x224.value))) < -1-IKFAST_SINCOS_THRESH || (((1010101.01010101)*py*(x224.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x225 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x225.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin(((1010101.01010101)*py*(x224.value))))+j15+(x225.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
IkReal x226=gconst30*gconst30;
IkReal x227=gconst29*gconst29;
IkReal x228=((7.92e-6)*px);
IkReal x229=(gconst29*r01);
IkReal x230=(gconst30*r10);
IkReal x231=(gconst29*r11);
IkReal x232=((7.92e-6)*py);
IkReal x233=(gconst30*r00);
IkReal x234=((3.9204e-12)*x227);
IkReal x235=((3.9204e-12)*x226);
CheckValue<IkReal> x242=IKPowWithIntegerCheck(((((9.9e-7)*x231))+py+(((-9.9e-7)*x230))),-1);
if(!x242.valid){
continue;
}
IkReal x236=x242.value;
IkReal x237=(px*x236);
IkReal x238=((9.9e-7)*x236);
IkReal x239=(x229*x238);
IkReal x240=(x233*x238);
if((((((-1.0)*x230*x232))+((x235*(r00*r00)))+(((4.0)*(py*py)))+((x228*x229))+(((-7.8408e-12)*x229*x233))+(((-7.8408e-12)*x230*x231))+((x234*(r01*r01)))+((x234*(r11*r11)))+(((4.0)*(px*px)))+((x235*(r10*r10)))+((x231*x232))+(((-1.0)*x228*x233)))) < -0.00001)
continue;
IkReal x241=((0.5)*x236*(IKsqrt(((((-1.0)*x230*x232))+((x235*(r00*r00)))+(((4.0)*(py*py)))+((x228*x229))+(((-7.8408e-12)*x229*x233))+(((-7.8408e-12)*x230*x231))+((x234*(r01*r01)))+((x234*(r11*r11)))+(((4.0)*(px*px)))+((x235*(r10*r10)))+((x231*x232))+(((-1.0)*x228*x233))))));
j10array[0]=((-2.0)*(atan((x239+(((-1.0)*x240))+(((-1.0)*x241))+(((1.0)*x237))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((-2.0)*(atan((x239+x237+x241+(((-1.0)*x240))))));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3830=((1.0)+(((-1.0)*(r12*r12))));
if((x3830) < -0.00001)
continue;
IkReal x3831=IKabs(IKsqrt(x3830));
IkReal x3839 = x3830;
if(IKabs(x3839)==0){
continue;
}
IkReal x3832=pow(x3839,-0.5);
IkReal x3833=(r10*x3832);
IkReal x3834=(r11*x3832);
CheckValue<IkReal> x3840=IKPowWithIntegerCheck(x3831,-1);
if(!x3840.valid){
continue;
}
IkReal x3835=x3840.value;
IkReal x3836=((1010101.01010101)*py*x3835);
if((((1.0)+(((-1020304050607.08)*(py*py)*(x3835*x3835))))) < -0.00001)
continue;
IkReal x3837=IKsqrt(((1.0)+(((-1020304050607.08)*(py*py)*(x3835*x3835)))));
IkReal x3838=((1.0)*x3837);
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x3841=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x3841.valid){
continue;
}
if( (((1010101.01010101)*py*(x3841.value))) < -1-IKFAST_SINCOS_THRESH || (((1010101.01010101)*py*(x3841.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x3842 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3842.valid){
continue;
}
IkReal gconst31=((3.14159265358979)+(IKasin(((1010101.01010101)*py*(x3841.value))))+(((-1.0)*(x3842.value))));
IkReal gconst32=((((-1.0)*x3833*x3838))+(((-1.0)*x3834*x3836)));
IkReal gconst33=(((x3833*x3836))+(((-1.0)*x3834*x3838)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x3843=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x3843.valid){
continue;
}
if( (((1010101.01010101)*py*(x3843.value))) < -1-IKFAST_SINCOS_THRESH || (((1010101.01010101)*py*(x3843.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x3844 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3844.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(((1010101.01010101)*py*(x3843.value))))))+j15+(x3844.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
IkReal x3845=gconst32*gconst32;
IkReal x3846=gconst33*gconst33;
IkReal x3847=((7.92e-6)*py);
IkReal x3848=(gconst33*r10);
IkReal x3849=(gconst33*r00);
IkReal x3850=(gconst32*r01);
IkReal x3851=(gconst32*r11);
IkReal x3852=((7.92e-6)*px);
IkReal x3853=((3.9204e-12)*x3846);
IkReal x3854=((3.9204e-12)*x3845);
CheckValue<IkReal> x3862=IKPowWithIntegerCheck(((((9.9e-7)*x3851))+py+(((-9.9e-7)*x3848))),-1);
if(!x3862.valid){
continue;
}
IkReal x3855=x3862.value;
IkReal x3856=(px*x3855);
IkReal x3857=((9.9e-7)*x3855);
IkReal x3858=(x3850*x3857);
IkReal x3859=(x3849*x3857);
IkReal x3860=(x3856+x3858);
if(((((x3850*x3852))+((x3847*x3851))+(((4.0)*(py*py)))+((x3853*(r10*r10)))+((x3854*(r11*r11)))+((x3853*(r00*r00)))+((x3854*(r01*r01)))+(((4.0)*(px*px)))+(((-7.8408e-12)*x3849*x3850))+(((-7.8408e-12)*x3848*x3851))+(((-1.0)*x3847*x3848))+(((-1.0)*x3849*x3852)))) < -0.00001)
continue;
IkReal x3861=((0.5)*x3855*(IKsqrt((((x3850*x3852))+((x3847*x3851))+(((4.0)*(py*py)))+((x3853*(r10*r10)))+((x3854*(r11*r11)))+((x3853*(r00*r00)))+((x3854*(r01*r01)))+(((4.0)*(px*px)))+(((-7.8408e-12)*x3849*x3850))+(((-7.8408e-12)*x3848*x3851))+(((-1.0)*x3847*x3848))+(((-1.0)*x3849*x3852))))));
j10array[0]=((2.0)*(atan(((((-1.0)*x3860))+x3861+x3859))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((-2.0)*(atan(((((-1.0)*x3859))+x3861+x3860))));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x3863=IKPowWithIntegerCheck(((((-9.9e-7)*cj14*cj15*r01))+(((-1.0)*cj15*rxp0_0*sj14))+((rxp1_0*sj14*sj15))+((cj14*rxp2_0))+(((-9.9e-7)*cj14*r00*sj15))),-1);
if(!x3863.valid){
continue;
}
CheckValue<IkReal> x3864=IKPowWithIntegerCheck(((((-9.9e-7)*cj14*cj15*r01))+(((-1.0)*cj15*rxp0_0*sj14))+((rxp1_0*sj14*sj15))+((cj14*rxp2_0))+(((-9.9e-7)*cj14*r00*sj15))),-1);
if(!x3864.valid){
continue;
}
if((((((4.0)*(cj14*cj14)*(cj15*cj15)*(rxp1_0*rxp1_0)))+(((-8.0)*cj14*cj15*rxp0_1*rxp2_1*sj14))+(((-4.0)*(cj14*cj14)*(cj15*cj15)*(rxp0_0*rxp0_0)))+(((7.92e-6)*cj14*r01*rxp0_0*sj14*(cj15*cj15)))+(((4.0)*(rxp1_0*rxp1_0)))+(((3.9204e-12)*(cj14*cj14)*(r00*r00)))+(((-7.92e-6)*cj15*r01*rxp2_0*(cj14*cj14)))+(((4.0)*(cj14*cj14)*(rxp2_1*rxp2_1)))+(((-7.92e-6)*cj14*cj15*r11*rxp1_1*sj14*sj15))+(((3.9204e-12)*(cj14*cj14)*(cj15*cj15)*(r01*r01)))+(((-7.92e-6)*r00*rxp2_0*sj15*(cj14*cj14)))+(((-8.0)*cj15*rxp0_1*rxp1_1*sj15))+(((-7.92e-6)*cj14*r10*rxp1_1*sj14))+(((7.92e-6)*cj14*r11*rxp0_1*sj14*(cj15*cj15)))+(((-3.9204e-12)*(cj14*cj14)*(cj15*cj15)*(r10*r10)))+(((-4.0)*(cj14*cj14)*(rxp1_1*rxp1_1)))+(((8.0)*cj14*rxp1_1*rxp2_1*sj14*sj15))+(((-8.0)*cj14*cj15*rxp0_0*rxp2_0*sj14))+(((-4.0)*(cj15*cj15)*(rxp1_1*rxp1_1)))+(((-4.0)*(cj15*cj15)*(rxp1_0*rxp1_0)))+(((3.9204e-12)*(cj14*cj14)*(cj15*cj15)*(r11*r11)))+(((8.0)*cj14*rxp1_0*rxp2_0*sj14*sj15))+(((4.0)*(cj14*cj14)*(cj15*cj15)*(rxp1_1*rxp1_1)))+(((-7.92e-6)*cj15*r11*rxp2_1*(cj14*cj14)))+(((7.8408e-12)*cj15*r10*r11*sj15*(cj14*cj14)))+(((7.92e-6)*cj14*cj15*r10*rxp0_1*sj14*sj15))+(((8.0)*cj15*rxp0_0*rxp1_0*sj15*(cj14*cj14)))+(((4.0)*(cj14*cj14)*(rxp2_0*rxp2_0)))+(((7.92e-6)*cj14*cj15*r00*rxp0_0*sj14*sj15))+(((-7.92e-6)*cj14*r00*rxp1_0*sj14))+(((-7.92e-6)*cj14*cj15*r01*rxp1_0*sj14*sj15))+(((-4.0)*(cj14*cj14)*(rxp1_0*rxp1_0)))+(((4.0)*(cj15*cj15)*(rxp0_0*rxp0_0)))+(((4.0)*(rxp1_1*rxp1_1)))+(((-7.92e-6)*r10*rxp2_1*sj15*(cj14*cj14)))+(((8.0)*cj15*rxp0_1*rxp1_1*sj15*(cj14*cj14)))+(((4.0)*(cj15*cj15)*(rxp0_1*rxp0_1)))+(((7.92e-6)*cj14*r00*rxp1_0*sj14*(cj15*cj15)))+(((-8.0)*cj15*rxp0_0*rxp1_0*sj15))+(((-4.0)*(cj14*cj14)*(cj15*cj15)*(rxp0_1*rxp0_1)))+(((3.9204e-12)*(cj14*cj14)*(r10*r10)))+(((7.92e-6)*cj14*r10*rxp1_1*sj14*(cj15*cj15)))+(((-3.9204e-12)*(cj14*cj14)*(cj15*cj15)*(r00*r00)))+(((7.8408e-12)*cj15*r00*r01*sj15*(cj14*cj14))))) < -0.00001)
continue;
CheckValue<IkReal> x3865=IKPowWithIntegerCheck(((((-9.9e-7)*cj14*cj15*r01))+(((-1.0)*cj15*rxp0_0*sj14))+((rxp1_0*sj14*sj15))+((cj14*rxp2_0))+(((-9.9e-7)*cj14*r00*sj15))),-1);
if(!x3865.valid){
continue;
}
CheckValue<IkReal> x3866=IKPowWithIntegerCheck(((((-9.9e-7)*cj14*cj15*r01))+(((-1.0)*cj15*rxp0_0*sj14))+((rxp1_0*sj14*sj15))+((cj14*rxp2_0))+(((-9.9e-7)*cj14*r00*sj15))),-1);
if(!x3866.valid){
continue;
}
CheckValue<IkReal> x3867=IKPowWithIntegerCheck(((((-9.9e-7)*cj14*cj15*r01))+(((-1.0)*cj15*rxp0_0*sj14))+((rxp1_0*sj14*sj15))+((cj14*rxp2_0))+(((-9.9e-7)*cj14*r00*sj15))),-1);
if(!x3867.valid){
continue;
}
CheckValue<IkReal> x3868=IKPowWithIntegerCheck(((((-9.9e-7)*cj14*cj15*r01))+(((-1.0)*cj15*rxp0_0*sj14))+((rxp1_0*sj14*sj15))+((cj14*rxp2_0))+(((-9.9e-7)*cj14*r00*sj15))),-1);
if(!x3868.valid){
continue;
}
j10array[0]=((-2.0)*(atan(((((9.9e-7)*cj14*r10*sj15*(x3863.value)))+(((-0.5)*(x3864.value)*(IKsqrt(((((4.0)*(cj14*cj14)*(cj15*cj15)*(rxp1_0*rxp1_0)))+(((-8.0)*cj14*cj15*rxp0_1*rxp2_1*sj14))+(((-4.0)*(cj14*cj14)*(cj15*cj15)*(rxp0_0*rxp0_0)))+(((7.92e-6)*cj14*r01*rxp0_0*sj14*(cj15*cj15)))+(((4.0)*(rxp1_0*rxp1_0)))+(((3.9204e-12)*(cj14*cj14)*(r00*r00)))+(((-7.92e-6)*cj15*r01*rxp2_0*(cj14*cj14)))+(((4.0)*(cj14*cj14)*(rxp2_1*rxp2_1)))+(((-7.92e-6)*cj14*cj15*r11*rxp1_1*sj14*sj15))+(((3.9204e-12)*(cj14*cj14)*(cj15*cj15)*(r01*r01)))+(((-7.92e-6)*r00*rxp2_0*sj15*(cj14*cj14)))+(((-8.0)*cj15*rxp0_1*rxp1_1*sj15))+(((-7.92e-6)*cj14*r10*rxp1_1*sj14))+(((7.92e-6)*cj14*r11*rxp0_1*sj14*(cj15*cj15)))+(((-3.9204e-12)*(cj14*cj14)*(cj15*cj15)*(r10*r10)))+(((-4.0)*(cj14*cj14)*(rxp1_1*rxp1_1)))+(((8.0)*cj14*rxp1_1*rxp2_1*sj14*sj15))+(((-8.0)*cj14*cj15*rxp0_0*rxp2_0*sj14))+(((-4.0)*(cj15*cj15)*(rxp1_1*rxp1_1)))+(((-4.0)*(cj15*cj15)*(rxp1_0*rxp1_0)))+(((3.9204e-12)*(cj14*cj14)*(cj15*cj15)*(r11*r11)))+(((8.0)*cj14*rxp1_0*rxp2_0*sj14*sj15))+(((4.0)*(cj14*cj14)*(cj15*cj15)*(rxp1_1*rxp1_1)))+(((-7.92e-6)*cj15*r11*rxp2_1*(cj14*cj14)))+(((7.8408e-12)*cj15*r10*r11*sj15*(cj14*cj14)))+(((7.92e-6)*cj14*cj15*r10*rxp0_1*sj14*sj15))+(((8.0)*cj15*rxp0_0*rxp1_0*sj15*(cj14*cj14)))+(((4.0)*(cj14*cj14)*(rxp2_0*rxp2_0)))+(((7.92e-6)*cj14*cj15*r00*rxp0_0*sj14*sj15))+(((-7.92e-6)*cj14*r00*rxp1_0*sj14))+(((-7.92e-6)*cj14*cj15*r01*rxp1_0*sj14*sj15))+(((-4.0)*(cj14*cj14)*(rxp1_0*rxp1_0)))+(((4.0)*(cj15*cj15)*(rxp0_0*rxp0_0)))+(((4.0)*(rxp1_1*rxp1_1)))+(((-7.92e-6)*r10*rxp2_1*sj15*(cj14*cj14)))+(((8.0)*cj15*rxp0_1*rxp1_1*sj15*(cj14*cj14)))+(((4.0)*(cj15*cj15)*(rxp0_1*rxp0_1)))+(((7.92e-6)*cj14*r00*rxp1_0*sj14*(cj15*cj15)))+(((-8.0)*cj15*rxp0_0*rxp1_0*sj15))+(((-4.0)*(cj14*cj14)*(cj15*cj15)*(rxp0_1*rxp0_1)))+(((3.9204e-12)*(cj14*cj14)*(r10*r10)))+(((7.92e-6)*cj14*r10*rxp1_1*sj14*(cj15*cj15)))+(((-3.9204e-12)*(cj14*cj14)*(cj15*cj15)*(r00*r00)))+(((7.8408e-12)*cj15*r00*r01*sj15*(cj14*cj14))))))))+(((9.9e-7)*cj14*cj15*r11*(x3865.value)))+(((-1.0)*cj14*rxp2_1*(x3866.value)))+((cj15*rxp0_1*sj14*(x3867.value)))+(((-1.0)*rxp1_1*sj14*sj15*(x3868.value)))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
CheckValue<IkReal> x3869=IKPowWithIntegerCheck(((((-9.9e-7)*cj14*cj15*r01))+(((-1.0)*cj15*rxp0_0*sj14))+((rxp1_0*sj14*sj15))+((cj14*rxp2_0))+(((-9.9e-7)*cj14*r00*sj15))),-1);
if(!x3869.valid){
continue;
}
if((((((4.0)*(cj14*cj14)*(cj15*cj15)*(rxp1_0*rxp1_0)))+(((-8.0)*cj14*cj15*rxp0_1*rxp2_1*sj14))+(((-4.0)*(cj14*cj14)*(cj15*cj15)*(rxp0_0*rxp0_0)))+(((7.92e-6)*cj14*r01*rxp0_0*sj14*(cj15*cj15)))+(((4.0)*(rxp1_0*rxp1_0)))+(((3.9204e-12)*(cj14*cj14)*(r00*r00)))+(((-7.92e-6)*cj15*r01*rxp2_0*(cj14*cj14)))+(((4.0)*(cj14*cj14)*(rxp2_1*rxp2_1)))+(((-7.92e-6)*cj14*cj15*r11*rxp1_1*sj14*sj15))+(((3.9204e-12)*(cj14*cj14)*(cj15*cj15)*(r01*r01)))+(((-7.92e-6)*r00*rxp2_0*sj15*(cj14*cj14)))+(((-8.0)*cj15*rxp0_1*rxp1_1*sj15))+(((-7.92e-6)*cj14*r10*rxp1_1*sj14))+(((7.92e-6)*cj14*r11*rxp0_1*sj14*(cj15*cj15)))+(((-3.9204e-12)*(cj14*cj14)*(cj15*cj15)*(r10*r10)))+(((-4.0)*(cj14*cj14)*(rxp1_1*rxp1_1)))+(((8.0)*cj14*rxp1_1*rxp2_1*sj14*sj15))+(((-8.0)*cj14*cj15*rxp0_0*rxp2_0*sj14))+(((-4.0)*(cj15*cj15)*(rxp1_1*rxp1_1)))+(((-4.0)*(cj15*cj15)*(rxp1_0*rxp1_0)))+(((3.9204e-12)*(cj14*cj14)*(cj15*cj15)*(r11*r11)))+(((8.0)*cj14*rxp1_0*rxp2_0*sj14*sj15))+(((4.0)*(cj14*cj14)*(cj15*cj15)*(rxp1_1*rxp1_1)))+(((-7.92e-6)*cj15*r11*rxp2_1*(cj14*cj14)))+(((7.8408e-12)*cj15*r10*r11*sj15*(cj14*cj14)))+(((7.92e-6)*cj14*cj15*r10*rxp0_1*sj14*sj15))+(((8.0)*cj15*rxp0_0*rxp1_0*sj15*(cj14*cj14)))+(((4.0)*(cj14*cj14)*(rxp2_0*rxp2_0)))+(((7.92e-6)*cj14*cj15*r00*rxp0_0*sj14*sj15))+(((-7.92e-6)*cj14*r00*rxp1_0*sj14))+(((-7.92e-6)*cj14*cj15*r01*rxp1_0*sj14*sj15))+(((-4.0)*(cj14*cj14)*(rxp1_0*rxp1_0)))+(((4.0)*(cj15*cj15)*(rxp0_0*rxp0_0)))+(((4.0)*(rxp1_1*rxp1_1)))+(((-7.92e-6)*r10*rxp2_1*sj15*(cj14*cj14)))+(((8.0)*cj15*rxp0_1*rxp1_1*sj15*(cj14*cj14)))+(((4.0)*(cj15*cj15)*(rxp0_1*rxp0_1)))+(((7.92e-6)*cj14*r00*rxp1_0*sj14*(cj15*cj15)))+(((-8.0)*cj15*rxp0_0*rxp1_0*sj15))+(((-4.0)*(cj14*cj14)*(cj15*cj15)*(rxp0_1*rxp0_1)))+(((3.9204e-12)*(cj14*cj14)*(r10*r10)))+(((7.92e-6)*cj14*r10*rxp1_1*sj14*(cj15*cj15)))+(((-3.9204e-12)*(cj14*cj14)*(cj15*cj15)*(r00*r00)))+(((7.8408e-12)*cj15*r00*r01*sj15*(cj14*cj14))))) < -0.00001)
continue;
CheckValue<IkReal> x3870=IKPowWithIntegerCheck(((((-9.9e-7)*cj14*cj15*r01))+(((-1.0)*cj15*rxp0_0*sj14))+((rxp1_0*sj14*sj15))+((cj14*rxp2_0))+(((-9.9e-7)*cj14*r00*sj15))),-1);
if(!x3870.valid){
continue;
}
CheckValue<IkReal> x3871=IKPowWithIntegerCheck(((((-9.9e-7)*cj14*cj15*r01))+(((-1.0)*cj15*rxp0_0*sj14))+((rxp1_0*sj14*sj15))+((cj14*rxp2_0))+(((-9.9e-7)*cj14*r00*sj15))),-1);
if(!x3871.valid){
continue;
}
CheckValue<IkReal> x3872=IKPowWithIntegerCheck(((((-9.9e-7)*cj14*cj15*r01))+(((-1.0)*cj15*rxp0_0*sj14))+((rxp1_0*sj14*sj15))+((cj14*rxp2_0))+(((-9.9e-7)*cj14*r00*sj15))),-1);
if(!x3872.valid){
continue;
}
CheckValue<IkReal> x3873=IKPowWithIntegerCheck(((((-9.9e-7)*cj14*cj15*r01))+(((-1.0)*cj15*rxp0_0*sj14))+((rxp1_0*sj14*sj15))+((cj14*rxp2_0))+(((-9.9e-7)*cj14*r00*sj15))),-1);
if(!x3873.valid){
continue;
}
CheckValue<IkReal> x3874=IKPowWithIntegerCheck(((((-9.9e-7)*cj14*cj15*r01))+(((-1.0)*cj15*rxp0_0*sj14))+((rxp1_0*sj14*sj15))+((cj14*rxp2_0))+(((-9.9e-7)*cj14*r00*sj15))),-1);
if(!x3874.valid){
continue;
}
j10array[1]=((-2.0)*(atan(((((0.5)*(x3869.value)*(IKsqrt(((((4.0)*(cj14*cj14)*(cj15*cj15)*(rxp1_0*rxp1_0)))+(((-8.0)*cj14*cj15*rxp0_1*rxp2_1*sj14))+(((-4.0)*(cj14*cj14)*(cj15*cj15)*(rxp0_0*rxp0_0)))+(((7.92e-6)*cj14*r01*rxp0_0*sj14*(cj15*cj15)))+(((4.0)*(rxp1_0*rxp1_0)))+(((3.9204e-12)*(cj14*cj14)*(r00*r00)))+(((-7.92e-6)*cj15*r01*rxp2_0*(cj14*cj14)))+(((4.0)*(cj14*cj14)*(rxp2_1*rxp2_1)))+(((-7.92e-6)*cj14*cj15*r11*rxp1_1*sj14*sj15))+(((3.9204e-12)*(cj14*cj14)*(cj15*cj15)*(r01*r01)))+(((-7.92e-6)*r00*rxp2_0*sj15*(cj14*cj14)))+(((-8.0)*cj15*rxp0_1*rxp1_1*sj15))+(((-7.92e-6)*cj14*r10*rxp1_1*sj14))+(((7.92e-6)*cj14*r11*rxp0_1*sj14*(cj15*cj15)))+(((-3.9204e-12)*(cj14*cj14)*(cj15*cj15)*(r10*r10)))+(((-4.0)*(cj14*cj14)*(rxp1_1*rxp1_1)))+(((8.0)*cj14*rxp1_1*rxp2_1*sj14*sj15))+(((-8.0)*cj14*cj15*rxp0_0*rxp2_0*sj14))+(((-4.0)*(cj15*cj15)*(rxp1_1*rxp1_1)))+(((-4.0)*(cj15*cj15)*(rxp1_0*rxp1_0)))+(((3.9204e-12)*(cj14*cj14)*(cj15*cj15)*(r11*r11)))+(((8.0)*cj14*rxp1_0*rxp2_0*sj14*sj15))+(((4.0)*(cj14*cj14)*(cj15*cj15)*(rxp1_1*rxp1_1)))+(((-7.92e-6)*cj15*r11*rxp2_1*(cj14*cj14)))+(((7.8408e-12)*cj15*r10*r11*sj15*(cj14*cj14)))+(((7.92e-6)*cj14*cj15*r10*rxp0_1*sj14*sj15))+(((8.0)*cj15*rxp0_0*rxp1_0*sj15*(cj14*cj14)))+(((4.0)*(cj14*cj14)*(rxp2_0*rxp2_0)))+(((7.92e-6)*cj14*cj15*r00*rxp0_0*sj14*sj15))+(((-7.92e-6)*cj14*r00*rxp1_0*sj14))+(((-7.92e-6)*cj14*cj15*r01*rxp1_0*sj14*sj15))+(((-4.0)*(cj14*cj14)*(rxp1_0*rxp1_0)))+(((4.0)*(cj15*cj15)*(rxp0_0*rxp0_0)))+(((4.0)*(rxp1_1*rxp1_1)))+(((-7.92e-6)*r10*rxp2_1*sj15*(cj14*cj14)))+(((8.0)*cj15*rxp0_1*rxp1_1*sj15*(cj14*cj14)))+(((4.0)*(cj15*cj15)*(rxp0_1*rxp0_1)))+(((7.92e-6)*cj14*r00*rxp1_0*sj14*(cj15*cj15)))+(((-8.0)*cj15*rxp0_0*rxp1_0*sj15))+(((-4.0)*(cj14*cj14)*(cj15*cj15)*(rxp0_1*rxp0_1)))+(((3.9204e-12)*(cj14*cj14)*(r10*r10)))+(((7.92e-6)*cj14*r10*rxp1_1*sj14*(cj15*cj15)))+(((-3.9204e-12)*(cj14*cj14)*(cj15*cj15)*(r00*r00)))+(((7.8408e-12)*cj15*r00*r01*sj15*(cj14*cj14))))))))+(((9.9e-7)*cj14*r10*sj15*(x3870.value)))+(((9.9e-7)*cj14*cj15*r11*(x3871.value)))+(((-1.0)*cj14*rxp2_1*(x3872.value)))+((cj15*rxp0_1*sj14*(x3873.value)))+(((-1.0)*rxp1_1*sj14*sj15*(x3874.value)))))));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
IkReal x3875=cj14*cj14;
IkReal x3876=cj15*cj15;
IkReal x3877=r11*r11;
IkReal x3878=r01*r01;
IkReal x3879=r10*r10;
IkReal x3880=r00*r00;
IkReal x3881=(cj14*sj14);
IkReal x3882=(cj15*r00);
IkReal x3883=(r11*sj15);
IkReal x3884=((1.0)*sj14);
IkReal x3885=((4.0)*x3876);
IkReal x3886=((8.0)*r01*sj15);
IkReal x3887=((8.0)*cj15*r10);
IkReal x3888=((4.0)*x3875);
IkReal x3889=(x3875*x3878);
IkReal x3890=(x3875*x3877);
CheckValue<IkReal> x3898=IKPowWithIntegerCheck((((cj14*r12))+(((-1.0)*cj15*r10*x3884))+((sj14*x3883))),-1);
if(!x3898.valid){
continue;
}
IkReal x3891=x3898.value;
IkReal x3892=(sj14*x3891);
IkReal x3893=(cj14*r02*x3891);
IkReal x3894=(r01*sj15*x3892);
CheckValue<IkReal> x3899=IKPowWithIntegerCheck((((cj14*r12))+(((-1.0)*cj15*r10*sj14))+((sj14*x3883))),-1);
if(!x3899.valid){
continue;
}
IkReal x3895=(x3882*x3884*(x3899.value));
IkReal x3896=(x3893+x3894);
if(((((x3888*(r02*r02)))+(((8.0)*r12*x3881*x3883))+(((-1.0)*x3875*x3879*x3885))+(((4.0)*x3877))+(((4.0)*x3878))+(((-1.0)*x3875*x3880*x3885))+(((-1.0)*r12*x3881*x3887))+((r02*x3881*x3886))+((x3880*x3885))+(((-1.0)*x3883*x3887))+((x3885*x3890))+((x3888*(r12*r12)))+((x3875*x3883*x3887))+(((-1.0)*x3878*x3888))+(((-1.0)*x3878*x3885))+(((-1.0)*x3877*x3888))+(((-1.0)*x3877*x3885))+((x3885*x3889))+((x3875*x3882*x3886))+((x3879*x3885))+(((-8.0)*r02*x3881*x3882))+(((-1.0)*x3882*x3886)))) < -0.00001)
continue;
IkReal x3897=((0.5)*x3891*(IKsqrt((((x3888*(r02*r02)))+(((8.0)*r12*x3881*x3883))+(((-1.0)*x3875*x3879*x3885))+(((4.0)*x3877))+(((4.0)*x3878))+(((-1.0)*x3875*x3880*x3885))+(((-1.0)*r12*x3881*x3887))+((r02*x3881*x3886))+((x3880*x3885))+(((-1.0)*x3883*x3887))+((x3885*x3890))+((x3888*(r12*r12)))+((x3875*x3883*x3887))+(((-1.0)*x3878*x3888))+(((-1.0)*x3878*x3885))+(((-1.0)*x3877*x3888))+(((-1.0)*x3877*x3885))+((x3885*x3889))+((x3875*x3882*x3886))+((x3879*x3885))+(((-8.0)*r02*x3881*x3882))+(((-1.0)*x3882*x3886))))));
j10array[0]=((2.0)*(atan((x3897+x3895+(((-1.0)*x3896))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((-2.0)*(atan((x3896+x3897+(((-1.0)*x3895))))));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
IkReal x3900=cj15*cj15;
IkReal x3901=r01*r01;
IkReal x3902=r11*r11;
IkReal x3903=((9.9e-7)*sj15);
IkReal x3904=(cj15*r10);
IkReal x3905=((7.92e-6)*py);
IkReal x3906=(r11*sj15);
IkReal x3907=((7.92e-6)*px);
IkReal x3908=(r01*sj15);
IkReal x3909=(cj15*r00);
IkReal x3910=((3.9204e-12)*x3902);
IkReal x3911=((3.9204e-12)*x3900);
CheckValue<IkReal> x3918=IKPowWithIntegerCheck((py+((r11*x3903))+(((-9.9e-7)*x3904))),-1);
if(!x3918.valid){
continue;
}
IkReal x3912=x3918.value;
IkReal x3913=(px*x3912);
CheckValue<IkReal> x3919=IKPowWithIntegerCheck(((((9.9e-7)*x3906))+py+(((-9.9e-7)*x3904))),-1);
if(!x3919.valid){
continue;
}
IkReal x3914=(r01*x3903*(x3919.value));
IkReal x3915=((9.9e-7)*x3909*x3912);
IkReal x3916=(x3914+x3913);
if((((((-7.8408e-12)*x3904*x3906))+(((-1.0)*x3904*x3905))+(((-7.8408e-12)*x3908*x3909))+(((4.0)*(py*py)))+(((-1.0)*x3900*x3910))+((x3911*(r10*r10)))+((x3905*x3906))+(((-1.0)*x3901*x3911))+(((-1.0)*x3907*x3909))+((x3907*x3908))+((x3911*(r00*r00)))+x3910+(((4.0)*(px*px)))+(((3.9204e-12)*x3901)))) < -0.00001)
continue;
IkReal x3917=((0.5)*x3912*(IKsqrt(((((-7.8408e-12)*x3904*x3906))+(((-1.0)*x3904*x3905))+(((-7.8408e-12)*x3908*x3909))+(((4.0)*(py*py)))+(((-1.0)*x3900*x3910))+((x3911*(r10*r10)))+((x3905*x3906))+(((-1.0)*x3901*x3911))+(((-1.0)*x3907*x3909))+((x3907*x3908))+((x3911*(r00*r00)))+x3910+(((4.0)*(px*px)))+(((3.9204e-12)*x3901))))));
j10array[0]=((2.0)*(atan(((((-1.0)*x3916))+x3917+x3915))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((-2.0)*(atan(((((-1.0)*x3915))+x3917+x3916))));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

innerfn(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j13eval[3];
IkReal x243=(cj10*cj15);
IkReal x244=((1.0)*cj10*sj15);
IkReal x245=(((cj15*r00*sj14))+(((-1.0)*cj14*r02))+(((-1.0)*r01*sj14*sj15)));
j13eval[0]=x245;
j13eval[1]=((IKabs(((((-1.0)*cj14*r21*x244))+((cj10*r22*sj14))+((cj14*r20*x243)))))+(IKabs(((((-1.0)*r21*x243))+(((-1.0)*r20*x244))))));
j13eval[2]=IKsign(x245);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
IkReal x246=(cj15*sj10);
IkReal x247=((1.0)*sj15);
IkReal x248=((((-1.0)*r11*sj14*x247))+((cj15*r10*sj14))+(((-1.0)*cj14*r12)));
j13eval[0]=x248;
j13eval[1]=IKsign(x248);
j13eval[2]=((IKabs(((((-1.0)*r21*x246))+(((-1.0)*r20*sj10*x247)))))+(IKabs(((((-1.0)*cj14*r21*sj10*x247))+((cj14*r20*x246))+((r22*sj10*sj14))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
IkReal x249=((((-1.0)*cj15*r20*sj14))+((cj14*r22))+((r21*sj14*sj15)));
j13eval[0]=x249;
j13eval[1]=IKsign(x249);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
sj10=0;
cj10=1.0;
j10=0;
IkReal x250=((1.0)*r01);
IkReal x251=((((-1.0)*cj15*r20*sj14))+((cj14*r22))+((r21*sj14*sj15)));
j13eval[0]=x251;
j13eval[1]=((IKabs((((r02*sj14))+(((-1.0)*cj14*sj15*x250))+((cj14*cj15*r00)))))+(IKabs(((((-1.0)*r00*sj15))+(((-1.0)*cj15*x250))))));
j13eval[2]=IKsign(x251);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj10=0;
cj10=1.0;
j10=0;
IkReal x252=((1.0)*cj14);
IkReal x253=((1.0)*sj15);
IkReal x254=(((cj15*r00*sj14))+(((-1.0)*r02*x252))+(((-1.0)*r01*sj14*x253)));
j13eval[0]=x254;
j13eval[1]=IKsign(x254);
j13eval[2]=((IKabs(((((-1.0)*r21*sj15*x252))+((cj14*cj15*r20))+((r22*sj14)))))+(IKabs(((((-1.0)*cj15*r21))+(((-1.0)*r20*x253))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj10=0;
cj10=1.0;
j10=0;
IkReal x255=cj15*cj15;
IkReal x256=cj14*cj14;
IkReal x257=r10*r10;
IkReal x258=r11*r11;
IkReal x259=r12*r12;
IkReal x260=(cj15*r11);
IkReal x261=(r12*sj14);
IkReal x262=((2.0)*r10);
IkReal x263=(cj14*cj15);
IkReal x264=((1.0)*r10);
IkReal x265=((1.0)*x257);
IkReal x266=(cj14*r11*sj15);
IkReal x267=((1.0)*x258);
IkReal x268=(x255*x256);
IkReal x269=((((-1.0)*x255*x267))+((x258*x268))+((sj15*x256*x260*x262))+((x256*x259))+(((-1.0)*x265*x268))+(((2.0)*x261*x266))+(((-1.0)*x265))+((x255*x257))+(((-1.0)*x256*x267))+(((-1.0)*sj15*x260*x262))+(((-1.0)*x261*x262*x263))+(((-1.0)*x259)));
j13eval[0]=x269;
j13eval[1]=IKsign(x269);
j13eval[2]=((IKabs(((((-1.0)*x260))+(((-1.0)*sj15*x264)))))+(IKabs(((((-1.0)*x263*x264))+(((-1.0)*x261))+x266))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11, j12, j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x270=cj15*cj15;
IkReal x271=cj14*cj14;
IkReal x272=r10*r10;
IkReal x273=r11*r11;
IkReal x274=r12*r12;
IkReal x275=(cj15*r11);
IkReal x276=(r12*sj14);
IkReal x277=((2.0)*r10);
IkReal x278=(cj14*cj15);
IkReal x279=((1.0)*r10);
IkReal x280=((1.0)*x272);
IkReal x281=(cj14*r11*sj15);
IkReal x282=((1.0)*x273);
IkReal x283=(x270*x271);
CheckValue<IkReal> x284=IKPowWithIntegerCheck(IKsign(((((-1.0)*x270*x282))+((sj15*x271*x275*x277))+((x271*x274))+(((-1.0)*x274))+(((-1.0)*sj15*x275*x277))+(((-1.0)*x280*x283))+(((-1.0)*x276*x277*x278))+((x270*x272))+((x273*x283))+(((-1.0)*x271*x282))+(((2.0)*x276*x281))+(((-1.0)*x280)))),-1);
if(!x284.valid){
continue;
}
CheckValue<IkReal> x285 = IKatan2WithCheck(IkReal(((((-1.0)*x276))+x281+(((-1.0)*x278*x279)))),IkReal(((((-1.0)*x275))+(((-1.0)*sj15*x279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x285.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x284.value)))+(x285.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x286=IKsin(j13);
IkReal x287=IKcos(j13);
IkReal x288=(cj14*sj15);
IkReal x289=(cj14*cj15);
IkReal x290=(r12*sj14);
IkReal x291=(r10*sj15);
IkReal x292=(r11*x287);
IkReal x293=((1.0)*x286);
IkReal x294=((1.0)*x287);
IkReal x295=(r11*x286);
evalcond[0]=((((-1.0)*r10*x289*x294))+(((-1.0)*x290*x294))+((x286*x291))+((cj15*x295))+((x288*x292)));
evalcond[1]=((((-1.0)*r22*sj14*x293))+(((-1.0)*cj15*r21*x294))+(((-1.0)*r20*sj15*x294))+(((-1.0)*r20*x289*x293))+((r21*x286*x288)));
evalcond[2]=((((-1.0)*cj15*r01*x294))+(((-1.0)*r02*sj14*x293))+(((-1.0)*r00*sj15*x294))+((r01*x286*x288))+(((-1.0)*r00*x289*x293)));
evalcond[3]=((1.0)+(((-1.0)*r10*x289*x293))+(((-1.0)*x291*x294))+(((-1.0)*x290*x293))+(((-1.0)*cj15*x292))+((x288*x295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x296=(cj15*r20);
IkReal x297=((0.999999999976719)*sj14);
IkReal x298=(cj15*r00);
IkReal x299=(r21*sj15);
IkReal x300=(cj14*r22);
IkReal x301=((4.82499999988767e-6)*sj14);
IkReal x302=(r01*sj15);
IkReal x303=(cj14*r02);
if( IKabs((((x301*x302))+(((-1.0)*x298*x301))+(((2.47499999994238e-6)*x296))+(((0.999999999976719)*x300))+(((-1.0)*x296*x297))+(((-1.20624999997192e-5)*px))+(((-1.1941874999722e-11)*x302))+(((-2.47499999994238e-6)*x299))+((x297*x299))+(((1.1941874999722e-11)*x298))+(((4.82499999988767e-6)*x303))+(((-2.4999999999418)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x296*x301))+(((2.4999999999418)*px))+(((2.47499999994238e-6)*x302))+(((-1.0)*x297*x302))+((x299*x301))+(((-1.20624999997192e-5)*pz))+(((-0.999999999976719)*x303))+(((-2.47499999994238e-6)*x298))+((x297*x298))+(((1.1941874999722e-11)*x296))+(((4.82499999988767e-6)*x300))+(((-1.1941874999722e-11)*x299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x301*x302))+(((-1.0)*x298*x301))+(((2.47499999994238e-6)*x296))+(((0.999999999976719)*x300))+(((-1.0)*x296*x297))+(((-1.20624999997192e-5)*px))+(((-1.1941874999722e-11)*x302))+(((-2.47499999994238e-6)*x299))+((x297*x299))+(((1.1941874999722e-11)*x298))+(((4.82499999988767e-6)*x303))+(((-2.4999999999418)*pz))))+IKsqr(((((-1.0)*x296*x301))+(((2.4999999999418)*px))+(((2.47499999994238e-6)*x302))+(((-1.0)*x297*x302))+((x299*x301))+(((-1.20624999997192e-5)*pz))+(((-0.999999999976719)*x303))+(((-2.47499999994238e-6)*x298))+((x297*x298))+(((1.1941874999722e-11)*x296))+(((4.82499999988767e-6)*x300))+(((-1.1941874999722e-11)*x299))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((((x301*x302))+(((-1.0)*x298*x301))+(((2.47499999994238e-6)*x296))+(((0.999999999976719)*x300))+(((-1.0)*x296*x297))+(((-1.20624999997192e-5)*px))+(((-1.1941874999722e-11)*x302))+(((-2.47499999994238e-6)*x299))+((x297*x299))+(((1.1941874999722e-11)*x298))+(((4.82499999988767e-6)*x303))+(((-2.4999999999418)*pz))), ((((-1.0)*x296*x301))+(((2.4999999999418)*px))+(((2.47499999994238e-6)*x302))+(((-1.0)*x297*x302))+((x299*x301))+(((-1.20624999997192e-5)*pz))+(((-0.999999999976719)*x303))+(((-2.47499999994238e-6)*x298))+((x297*x298))+(((1.1941874999722e-11)*x296))+(((4.82499999988767e-6)*x300))+(((-1.1941874999722e-11)*x299))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x304=IKsin(j11);
IkReal x305=IKcos(j11);
IkReal x306=((0.4)*sj14);
IkReal x307=(cj15*r20);
IkReal x308=(r01*sj15);
IkReal x309=((0.4)*sj13);
IkReal x310=(r21*sj15);
IkReal x311=((0.4)*cj14);
IkReal x312=(cj15*r00);
IkReal x313=((9.9e-7)*x308);
IkReal x314=((1.93e-6)*x304);
IkReal x315=((9.9e-7)*x312);
IkReal x316=((0.4)*x305);
IkReal x317=((0.4)*x304);
IkReal x318=((1.93e-6)*x305);
IkReal x319=((9.9e-7)*x310);
IkReal x320=((9.9e-7)*x307);
IkReal x321=(x315+x316);
IkReal x322=(x314+x313+px);
IkReal x323=(x319+x318+x317);
evalcond[0]=((((-1.0)*r02*x311))+(((-1.0)*x321))+x322+(((-1.0)*x306*x308))+((x306*x312)));
evalcond[1]=((((-1.0)*x323))+x320+(((-1.0)*pz))+(((-1.0)*x306*x307))+((x306*x310))+((r22*x311)));
evalcond[2]=((((-1.0)*cj13*x310*x311))+(((-1.0)*r20*sj15*x309))+(((-1.0)*x321))+x322+((cj13*x307*x311))+(((-1.0)*cj15*r21*x309))+((cj13*r22*x306)));
evalcond[3]=((((-1.0)*cj13*x311*x312))+((cj15*r01*x309))+(((-1.0)*cj13*r02*x306))+(((-1.0)*x320))+((cj13*x308*x311))+x323+pz+((r00*sj15*x309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x324=(cj15*r00);
IkReal x325=(cj14*r22);
IkReal x326=(r21*sj15);
IkReal x327=(cj11*sj14);
IkReal x328=(sj11*sj14);
IkReal x329=(cj15*r20);
IkReal x330=(r01*sj15);
IkReal x331=(cj14*r02);
IkReal x332=((1.0)*x328);
if( IKabs((((x328*x329))+(((-1.0)*sj11*x325))+(((-1.0)*x324*x327))+((x327*x330))+((cj11*x331))+(((-1.0)*x326*x332)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x326*x327))+(((-1.0)*x324*x332))+((sj11*x331))+(((-1.0)*x327*x329))+((x328*x330))+((cj11*x325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x328*x329))+(((-1.0)*sj11*x325))+(((-1.0)*x324*x327))+((x327*x330))+((cj11*x331))+(((-1.0)*x326*x332))))+IKsqr((((x326*x327))+(((-1.0)*x324*x332))+((sj11*x331))+(((-1.0)*x327*x329))+((x328*x330))+((cj11*x325))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((x328*x329))+(((-1.0)*sj11*x325))+(((-1.0)*x324*x327))+((x327*x330))+((cj11*x331))+(((-1.0)*x326*x332))), (((x326*x327))+(((-1.0)*x324*x332))+((sj11*x331))+(((-1.0)*x327*x329))+((x328*x330))+((cj11*x325))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x333=IKcos(j12);
IkReal x334=IKsin(j12);
IkReal x335=(cj13*cj14);
IkReal x336=(r01*sj15);
IkReal x337=((0.4)*cj11);
IkReal x338=(cj15*r20);
IkReal x339=((1.0)*r22);
IkReal x340=(sj13*sj15);
IkReal x341=(cj15*r00);
IkReal x342=(cj13*sj14);
IkReal x343=((1.0)*r02);
IkReal x344=((1.0)*sj14);
IkReal x345=(cj15*sj13);
IkReal x346=(r21*sj15);
IkReal x347=(cj11*x333);
IkReal x348=(sj11*x333);
IkReal x349=(sj11*x334);
IkReal x350=(cj11*x334);
IkReal x351=((1.0)*x349);
evalcond[0]=((((-1.0)*x336*x344))+x350+x348+((sj14*x341))+(((-1.0)*cj14*x343)));
evalcond[1]=((((-1.0)*x351))+x347+(((-1.0)*x344*x346))+((sj14*x338))+(((-1.0)*cj14*x339)));
evalcond[2]=((((9.9e-7)*x338))+(((-1.0)*pz))+(((-0.4)*sj11))+(((-0.4)*x349))+((x333*x337))+(((-1.93e-6)*cj11))+(((-9.9e-7)*x346)));
evalcond[3]=(((x334*x337))+(((-1.93e-6)*sj11))+(((0.4)*x348))+x337+(((-1.0)*px))+(((-9.9e-7)*x336))+(((9.9e-7)*x341)));
evalcond[4]=(((r01*x345))+((x335*x336))+((r00*x340))+(((-1.0)*x351))+(((-1.0)*x335*x341))+x347+(((-1.0)*x342*x343)));
evalcond[5]=(((x335*x346))+((r21*x345))+(((-1.0)*x350))+((r20*x340))+(((-1.0)*x339*x342))+(((-1.0)*x335*x338))+(((-1.0)*x348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x352=((1.0)*cj14);
IkReal x353=((1.0)*sj15);
CheckValue<IkReal> x354=IKPowWithIntegerCheck(IKsign((((cj15*r00*sj14))+(((-1.0)*r01*sj14*x353))+(((-1.0)*r02*x352)))),-1);
if(!x354.valid){
continue;
}
CheckValue<IkReal> x355 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r21))+(((-1.0)*r20*x353)))),IkReal(((((-1.0)*r21*sj15*x352))+((cj14*cj15*r20))+((r22*sj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x355.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x354.value)))+(x355.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x356=IKsin(j13);
IkReal x357=IKcos(j13);
IkReal x358=(cj14*sj15);
IkReal x359=(cj14*cj15);
IkReal x360=(r12*sj14);
IkReal x361=(r10*sj15);
IkReal x362=(r11*x357);
IkReal x363=((1.0)*x356);
IkReal x364=((1.0)*x357);
IkReal x365=(r11*x356);
evalcond[0]=(((x358*x362))+((cj15*x365))+(((-1.0)*x360*x364))+(((-1.0)*r10*x359*x364))+((x356*x361)));
evalcond[1]=((((-1.0)*r20*sj15*x364))+((r21*x356*x358))+(((-1.0)*r20*x359*x363))+(((-1.0)*r22*sj14*x363))+(((-1.0)*cj15*r21*x364)));
evalcond[2]=(((r01*x356*x358))+(((-1.0)*cj15*r01*x364))+(((-1.0)*r00*sj15*x364))+(((-1.0)*r00*x359*x363))+(((-1.0)*r02*sj14*x363)));
evalcond[3]=((1.0)+((x358*x365))+(((-1.0)*x361*x364))+(((-1.0)*x360*x363))+(((-1.0)*r10*x359*x363))+(((-1.0)*cj15*x362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x366=(cj15*r20);
IkReal x367=((0.999999999976719)*sj14);
IkReal x368=(cj15*r00);
IkReal x369=(r21*sj15);
IkReal x370=(cj14*r22);
IkReal x371=((4.82499999988767e-6)*sj14);
IkReal x372=(r01*sj15);
IkReal x373=(cj14*r02);
if( IKabs(((((0.999999999976719)*x370))+(((-1.0)*x368*x371))+(((1.1941874999722e-11)*x368))+(((4.82499999988767e-6)*x373))+(((-2.47499999994238e-6)*x369))+(((-1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x366))+(((-1.0)*x366*x367))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x372))+((x367*x369))+((x371*x372)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.1941874999722e-11)*x369))+(((-0.999999999976719)*x373))+(((1.1941874999722e-11)*x366))+(((2.4999999999418)*px))+((x369*x371))+(((4.82499999988767e-6)*x370))+(((-2.47499999994238e-6)*x368))+(((2.47499999994238e-6)*x372))+(((-1.0)*x366*x371))+(((-1.0)*x367*x372))+(((-1.20624999997192e-5)*pz))+((x367*x368)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.999999999976719)*x370))+(((-1.0)*x368*x371))+(((1.1941874999722e-11)*x368))+(((4.82499999988767e-6)*x373))+(((-2.47499999994238e-6)*x369))+(((-1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x366))+(((-1.0)*x366*x367))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x372))+((x367*x369))+((x371*x372))))+IKsqr(((((-1.1941874999722e-11)*x369))+(((-0.999999999976719)*x373))+(((1.1941874999722e-11)*x366))+(((2.4999999999418)*px))+((x369*x371))+(((4.82499999988767e-6)*x370))+(((-2.47499999994238e-6)*x368))+(((2.47499999994238e-6)*x372))+(((-1.0)*x366*x371))+(((-1.0)*x367*x372))+(((-1.20624999997192e-5)*pz))+((x367*x368))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((0.999999999976719)*x370))+(((-1.0)*x368*x371))+(((1.1941874999722e-11)*x368))+(((4.82499999988767e-6)*x373))+(((-2.47499999994238e-6)*x369))+(((-1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x366))+(((-1.0)*x366*x367))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x372))+((x367*x369))+((x371*x372))), ((((-1.1941874999722e-11)*x369))+(((-0.999999999976719)*x373))+(((1.1941874999722e-11)*x366))+(((2.4999999999418)*px))+((x369*x371))+(((4.82499999988767e-6)*x370))+(((-2.47499999994238e-6)*x368))+(((2.47499999994238e-6)*x372))+(((-1.0)*x366*x371))+(((-1.0)*x367*x372))+(((-1.20624999997192e-5)*pz))+((x367*x368))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x374=IKsin(j11);
IkReal x375=IKcos(j11);
IkReal x376=((0.4)*sj14);
IkReal x377=(cj15*r20);
IkReal x378=(r01*sj15);
IkReal x379=((0.4)*sj13);
IkReal x380=(r21*sj15);
IkReal x381=((0.4)*cj14);
IkReal x382=(cj15*r00);
IkReal x383=((9.9e-7)*x378);
IkReal x384=((1.93e-6)*x374);
IkReal x385=((9.9e-7)*x382);
IkReal x386=((0.4)*x375);
IkReal x387=((0.4)*x374);
IkReal x388=((1.93e-6)*x375);
IkReal x389=((9.9e-7)*x380);
IkReal x390=((9.9e-7)*x377);
IkReal x391=(x386+x385);
IkReal x392=(x384+x383+px);
IkReal x393=(x387+x388+x389);
evalcond[0]=(((x376*x382))+(((-1.0)*x391))+x392+(((-1.0)*x376*x378))+(((-1.0)*r02*x381)));
evalcond[1]=(((r22*x381))+((x376*x380))+(((-1.0)*x393))+x390+(((-1.0)*pz))+(((-1.0)*x376*x377)));
evalcond[2]=((((-1.0)*cj15*r21*x379))+(((-1.0)*r20*sj15*x379))+(((-1.0)*x391))+x392+((cj13*r22*x376))+(((-1.0)*cj13*x380*x381))+((cj13*x377*x381)));
evalcond[3]=((((-1.0)*x390))+((cj13*x378*x381))+((r00*sj15*x379))+(((-1.0)*cj13*x381*x382))+x393+pz+((cj15*r01*x379))+(((-1.0)*cj13*r02*x376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x394=(cj15*r00);
IkReal x395=(cj14*r22);
IkReal x396=(r21*sj15);
IkReal x397=(cj11*sj14);
IkReal x398=(sj11*sj14);
IkReal x399=(cj15*r20);
IkReal x400=(r01*sj15);
IkReal x401=(cj14*r02);
IkReal x402=((1.0)*x398);
if( IKabs((((x397*x400))+((x398*x399))+(((-1.0)*sj11*x395))+((cj11*x401))+(((-1.0)*x394*x397))+(((-1.0)*x396*x402)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*x395))+(((-1.0)*x394*x402))+((x396*x397))+((x398*x400))+(((-1.0)*x397*x399))+((sj11*x401)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x397*x400))+((x398*x399))+(((-1.0)*sj11*x395))+((cj11*x401))+(((-1.0)*x394*x397))+(((-1.0)*x396*x402))))+IKsqr((((cj11*x395))+(((-1.0)*x394*x402))+((x396*x397))+((x398*x400))+(((-1.0)*x397*x399))+((sj11*x401))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((x397*x400))+((x398*x399))+(((-1.0)*sj11*x395))+((cj11*x401))+(((-1.0)*x394*x397))+(((-1.0)*x396*x402))), (((cj11*x395))+(((-1.0)*x394*x402))+((x396*x397))+((x398*x400))+(((-1.0)*x397*x399))+((sj11*x401))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x403=IKcos(j12);
IkReal x404=IKsin(j12);
IkReal x405=(cj13*cj14);
IkReal x406=(r01*sj15);
IkReal x407=((0.4)*cj11);
IkReal x408=(cj15*r20);
IkReal x409=((1.0)*r22);
IkReal x410=(sj13*sj15);
IkReal x411=(cj15*r00);
IkReal x412=(cj13*sj14);
IkReal x413=((1.0)*r02);
IkReal x414=((1.0)*sj14);
IkReal x415=(cj15*sj13);
IkReal x416=(r21*sj15);
IkReal x417=(cj11*x403);
IkReal x418=(sj11*x403);
IkReal x419=(sj11*x404);
IkReal x420=(cj11*x404);
IkReal x421=((1.0)*x419);
evalcond[0]=((((-1.0)*cj14*x413))+((sj14*x411))+(((-1.0)*x406*x414))+x418+x420);
evalcond[1]=((((-1.0)*x421))+x417+(((-1.0)*x414*x416))+(((-1.0)*cj14*x409))+((sj14*x408)));
evalcond[2]=((((9.9e-7)*x408))+(((-1.0)*pz))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+(((-0.4)*x419))+(((-9.9e-7)*x416))+((x403*x407)));
evalcond[3]=(((x404*x407))+(((-1.93e-6)*sj11))+(((-1.0)*px))+(((9.9e-7)*x411))+x407+(((0.4)*x418))+(((-9.9e-7)*x406)));
evalcond[4]=(((x405*x406))+(((-1.0)*x412*x413))+(((-1.0)*x421))+((r01*x415))+((r00*x410))+x417+(((-1.0)*x405*x411)));
evalcond[5]=((((-1.0)*x420))+((x405*x416))+((r21*x415))+((r20*x410))+(((-1.0)*x405*x408))+(((-1.0)*x409*x412))+(((-1.0)*x418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x422=((1.0)*r01);
CheckValue<IkReal> x423=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r20*sj14))+((cj14*r22))+((r21*sj14*sj15)))),-1);
if(!x423.valid){
continue;
}
CheckValue<IkReal> x424 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj15))+(((-1.0)*cj15*x422)))),IkReal((((r02*sj14))+(((-1.0)*cj14*sj15*x422))+((cj14*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x424.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x423.value)))+(x424.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x425=IKsin(j13);
IkReal x426=IKcos(j13);
IkReal x427=(cj14*sj15);
IkReal x428=(cj14*cj15);
IkReal x429=(r12*sj14);
IkReal x430=(r10*sj15);
IkReal x431=(r11*x426);
IkReal x432=((1.0)*x425);
IkReal x433=((1.0)*x426);
IkReal x434=(r11*x425);
evalcond[0]=(((x425*x430))+(((-1.0)*x429*x433))+((cj15*x434))+(((-1.0)*r10*x428*x433))+((x427*x431)));
evalcond[1]=(((r21*x425*x427))+(((-1.0)*cj15*r21*x433))+(((-1.0)*r22*sj14*x432))+(((-1.0)*r20*x428*x432))+(((-1.0)*r20*sj15*x433)));
evalcond[2]=((((-1.0)*cj15*r01*x433))+((r01*x425*x427))+(((-1.0)*r00*x428*x432))+(((-1.0)*r00*sj15*x433))+(((-1.0)*r02*sj14*x432)));
evalcond[3]=((1.0)+(((-1.0)*x430*x433))+(((-1.0)*cj15*x431))+(((-1.0)*x429*x432))+(((-1.0)*r10*x428*x432))+((x427*x434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x435=(cj15*r20);
IkReal x436=((0.999999999976719)*sj14);
IkReal x437=(cj15*r00);
IkReal x438=(r21*sj15);
IkReal x439=(cj14*r22);
IkReal x440=((4.82499999988767e-6)*sj14);
IkReal x441=(r01*sj15);
IkReal x442=(cj14*r02);
if( IKabs((((x436*x438))+(((-1.0)*x437*x440))+(((-1.0)*x435*x436))+(((-2.47499999994238e-6)*x438))+((x440*x441))+(((-1.20624999997192e-5)*px))+(((4.82499999988767e-6)*x442))+(((1.1941874999722e-11)*x437))+(((2.47499999994238e-6)*x435))+(((-1.1941874999722e-11)*x441))+(((-2.4999999999418)*pz))+(((0.999999999976719)*x439)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.999999999976719)*x442))+((x436*x437))+(((2.4999999999418)*px))+(((-1.0)*x435*x440))+(((-2.47499999994238e-6)*x437))+(((4.82499999988767e-6)*x439))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x436*x441))+(((-1.1941874999722e-11)*x438))+(((1.1941874999722e-11)*x435))+((x438*x440))+(((2.47499999994238e-6)*x441)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x436*x438))+(((-1.0)*x437*x440))+(((-1.0)*x435*x436))+(((-2.47499999994238e-6)*x438))+((x440*x441))+(((-1.20624999997192e-5)*px))+(((4.82499999988767e-6)*x442))+(((1.1941874999722e-11)*x437))+(((2.47499999994238e-6)*x435))+(((-1.1941874999722e-11)*x441))+(((-2.4999999999418)*pz))+(((0.999999999976719)*x439))))+IKsqr(((((-0.999999999976719)*x442))+((x436*x437))+(((2.4999999999418)*px))+(((-1.0)*x435*x440))+(((-2.47499999994238e-6)*x437))+(((4.82499999988767e-6)*x439))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x436*x441))+(((-1.1941874999722e-11)*x438))+(((1.1941874999722e-11)*x435))+((x438*x440))+(((2.47499999994238e-6)*x441))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((((x436*x438))+(((-1.0)*x437*x440))+(((-1.0)*x435*x436))+(((-2.47499999994238e-6)*x438))+((x440*x441))+(((-1.20624999997192e-5)*px))+(((4.82499999988767e-6)*x442))+(((1.1941874999722e-11)*x437))+(((2.47499999994238e-6)*x435))+(((-1.1941874999722e-11)*x441))+(((-2.4999999999418)*pz))+(((0.999999999976719)*x439))), ((((-0.999999999976719)*x442))+((x436*x437))+(((2.4999999999418)*px))+(((-1.0)*x435*x440))+(((-2.47499999994238e-6)*x437))+(((4.82499999988767e-6)*x439))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x436*x441))+(((-1.1941874999722e-11)*x438))+(((1.1941874999722e-11)*x435))+((x438*x440))+(((2.47499999994238e-6)*x441))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x443=IKsin(j11);
IkReal x444=IKcos(j11);
IkReal x445=((0.4)*sj14);
IkReal x446=(cj15*r20);
IkReal x447=(r01*sj15);
IkReal x448=((0.4)*sj13);
IkReal x449=(r21*sj15);
IkReal x450=((0.4)*cj14);
IkReal x451=(cj15*r00);
IkReal x452=((9.9e-7)*x447);
IkReal x453=((1.93e-6)*x443);
IkReal x454=((9.9e-7)*x451);
IkReal x455=((0.4)*x444);
IkReal x456=((0.4)*x443);
IkReal x457=((1.93e-6)*x444);
IkReal x458=((9.9e-7)*x449);
IkReal x459=((9.9e-7)*x446);
IkReal x460=(x454+x455);
IkReal x461=(x452+x453+px);
IkReal x462=(x458+x456+x457);
evalcond[0]=((((-1.0)*x445*x447))+(((-1.0)*x460))+x461+((x445*x451))+(((-1.0)*r02*x450)));
evalcond[1]=((((-1.0)*x445*x446))+(((-1.0)*x462))+(((-1.0)*pz))+x459+((x445*x449))+((r22*x450)));
evalcond[2]=((((-1.0)*cj13*x449*x450))+((cj13*r22*x445))+((cj13*x446*x450))+(((-1.0)*cj15*r21*x448))+(((-1.0)*x460))+x461+(((-1.0)*r20*sj15*x448)));
evalcond[3]=((((-1.0)*cj13*r02*x445))+(((-1.0)*cj13*x450*x451))+((cj13*x447*x450))+(((-1.0)*x459))+((cj15*r01*x448))+x462+pz+((r00*sj15*x448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x463=(cj15*r00);
IkReal x464=(cj14*r22);
IkReal x465=(r21*sj15);
IkReal x466=(cj11*sj14);
IkReal x467=(sj11*sj14);
IkReal x468=(cj15*r20);
IkReal x469=(r01*sj15);
IkReal x470=(cj14*r02);
IkReal x471=((1.0)*x467);
if( IKabs((((cj11*x470))+((x466*x469))+(((-1.0)*sj11*x464))+((x467*x468))+(((-1.0)*x463*x466))+(((-1.0)*x465*x471)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*x464))+((x465*x466))+((sj11*x470))+((x467*x469))+(((-1.0)*x466*x468))+(((-1.0)*x463*x471)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj11*x470))+((x466*x469))+(((-1.0)*sj11*x464))+((x467*x468))+(((-1.0)*x463*x466))+(((-1.0)*x465*x471))))+IKsqr((((cj11*x464))+((x465*x466))+((sj11*x470))+((x467*x469))+(((-1.0)*x466*x468))+(((-1.0)*x463*x471))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((cj11*x470))+((x466*x469))+(((-1.0)*sj11*x464))+((x467*x468))+(((-1.0)*x463*x466))+(((-1.0)*x465*x471))), (((cj11*x464))+((x465*x466))+((sj11*x470))+((x467*x469))+(((-1.0)*x466*x468))+(((-1.0)*x463*x471))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x472=IKcos(j12);
IkReal x473=IKsin(j12);
IkReal x474=(cj13*cj14);
IkReal x475=(r01*sj15);
IkReal x476=((0.4)*cj11);
IkReal x477=(cj15*r20);
IkReal x478=((1.0)*r22);
IkReal x479=(sj13*sj15);
IkReal x480=(cj15*r00);
IkReal x481=(cj13*sj14);
IkReal x482=((1.0)*r02);
IkReal x483=((1.0)*sj14);
IkReal x484=(cj15*sj13);
IkReal x485=(r21*sj15);
IkReal x486=(cj11*x472);
IkReal x487=(sj11*x472);
IkReal x488=(sj11*x473);
IkReal x489=(cj11*x473);
IkReal x490=((1.0)*x488);
evalcond[0]=((((-1.0)*x475*x483))+(((-1.0)*cj14*x482))+x489+x487+((sj14*x480)));
evalcond[1]=((((-1.0)*x490))+(((-1.0)*x483*x485))+((sj14*x477))+(((-1.0)*cj14*x478))+x486);
evalcond[2]=((((-9.9e-7)*x485))+((x472*x476))+(((-1.0)*pz))+(((-0.4)*x488))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+(((9.9e-7)*x477)));
evalcond[3]=(((x473*x476))+(((9.9e-7)*x480))+(((-1.93e-6)*sj11))+(((0.4)*x487))+(((-9.9e-7)*x475))+(((-1.0)*px))+x476);
evalcond[4]=((((-1.0)*x490))+(((-1.0)*x474*x480))+(((-1.0)*x481*x482))+x486+((r01*x484))+((x474*x475))+((r00*x479)));
evalcond[5]=(((r20*x479))+(((-1.0)*x474*x477))+(((-1.0)*x487))+(((-1.0)*x489))+((x474*x485))+((r21*x484))+(((-1.0)*x478*x481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x491=((1.0)*sj15);
IkReal x492=((1.0)*cj15);
IkReal x493=(((r01*sj14*sj15))+(((-1.0)*r00*sj14*x492))+((cj14*r02)));
j13eval[0]=x493;
j13eval[1]=IKsign(x493);
j13eval[2]=((IKabs(((((-1.0)*r21*x492))+(((-1.0)*r20*x491)))))+(IKabs((((cj14*cj15*r20))+(((-1.0)*cj14*r21*x491))+((r22*sj14))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x494=((1.0)*r01);
IkReal x495=((1.0)*sj15);
IkReal x496=((((-1.0)*r21*sj14*x495))+(((-1.0)*cj14*r22))+((cj15*r20*sj14)));
j13eval[0]=x496;
j13eval[1]=((IKabs((((r02*sj14))+((cj14*cj15*r00))+(((-1.0)*cj14*sj15*x494)))))+(IKabs(((((-1.0)*r00*x495))+(((-1.0)*cj15*x494))))));
j13eval[2]=IKsign(x496);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x497=cj15*cj15;
IkReal x498=r10*r10;
IkReal x499=cj14*cj14;
IkReal x500=r11*r11;
IkReal x501=r12*r12;
IkReal x502=(cj15*r11);
IkReal x503=(r12*sj14);
IkReal x504=((2.0)*r10);
IkReal x505=(cj14*cj15);
IkReal x506=((1.0)*r10);
IkReal x507=((1.0)*x499);
IkReal x508=(cj14*r11*sj15);
IkReal x509=(x497*x500);
IkReal x510=(x497*x498);
IkReal x511=((((-1.0)*sj15*x499*x502*x504))+((x499*x510))+(((-1.0)*x510))+(((-1.0)*x507*x509))+(((-1.0)*x501*x507))+((x503*x504*x505))+x498+(((-2.0)*x503*x508))+((sj15*x502*x504))+x509+x501+((x499*x500)));
j13eval[0]=x511;
j13eval[1]=((IKabs(((((-1.0)*sj15*x506))+(((-1.0)*x502)))))+(IKabs(((((-1.0)*x505*x506))+x508+(((-1.0)*x503))))));
j13eval[2]=IKsign(x511);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11, j12, j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x512=cj15*cj15;
IkReal x513=r10*r10;
IkReal x514=cj14*cj14;
IkReal x515=r11*r11;
IkReal x516=r12*r12;
IkReal x517=(cj15*r11);
IkReal x518=(r12*sj14);
IkReal x519=((2.0)*r10);
IkReal x520=(cj14*cj15);
IkReal x521=((1.0)*r10);
IkReal x522=((1.0)*x514);
IkReal x523=(cj14*r11*sj15);
IkReal x524=(x512*x515);
IkReal x525=(x512*x513);
CheckValue<IkReal> x526=IKPowWithIntegerCheck(IKsign(((((-1.0)*x525))+((x514*x515))+(((-2.0)*x518*x523))+x524+x516+x513+((sj15*x517*x519))+(((-1.0)*x516*x522))+((x514*x525))+(((-1.0)*x522*x524))+(((-1.0)*sj15*x514*x517*x519))+((x518*x519*x520)))),-1);
if(!x526.valid){
continue;
}
CheckValue<IkReal> x527 = IKatan2WithCheck(IkReal(((((-1.0)*x520*x521))+(((-1.0)*x518))+x523)),IkReal(((((-1.0)*sj15*x521))+(((-1.0)*x517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x527.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x526.value)))+(x527.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x528=IKsin(j13);
IkReal x529=IKcos(j13);
IkReal x530=(cj14*sj15);
IkReal x531=(cj14*cj15);
IkReal x532=(r12*sj14);
IkReal x533=(r10*sj15);
IkReal x534=(r11*x529);
IkReal x535=((1.0)*x528);
IkReal x536=((1.0)*x529);
IkReal x537=(r11*x528);
evalcond[0]=((((-1.0)*x532*x536))+((cj15*x537))+((x528*x533))+((x530*x534))+(((-1.0)*r10*x531*x536)));
evalcond[1]=(((r21*x528*x530))+(((-1.0)*cj15*r21*x536))+(((-1.0)*r22*sj14*x535))+(((-1.0)*r20*x531*x535))+(((-1.0)*r20*sj15*x536)));
evalcond[2]=((((-1.0)*r02*sj14*x535))+(((-1.0)*cj15*r01*x536))+(((-1.0)*r00*x531*x535))+(((-1.0)*r00*sj15*x536))+((r01*x528*x530)));
evalcond[3]=((-1.0)+(((-1.0)*x532*x535))+(((-1.0)*x533*x536))+(((-1.0)*cj15*x534))+((x530*x537))+(((-1.0)*r10*x531*x535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x538=(cj15*r20);
IkReal x539=((0.999999999976719)*sj14);
IkReal x540=(cj15*r00);
IkReal x541=(r21*sj15);
IkReal x542=(cj14*r22);
IkReal x543=((4.82499999988767e-6)*sj14);
IkReal x544=(r01*sj15);
IkReal x545=(cj14*r02);
if( IKabs((((x539*x541))+(((-1.0)*x538*x539))+((x540*x543))+(((-2.47499999994238e-6)*x541))+(((0.999999999976719)*x542))+(((1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x538))+(((-1.1941874999722e-11)*x540))+(((-4.82499999988767e-6)*x545))+(((-2.4999999999418)*pz))+(((-1.0)*x543*x544))+(((1.1941874999722e-11)*x544)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x539*x544))+(((4.82499999988767e-6)*x542))+((x541*x543))+(((-1.0)*x539*x540))+(((-1.0)*x538*x543))+(((-2.47499999994238e-6)*x544))+(((0.999999999976719)*x545))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x540))+(((-1.1941874999722e-11)*x541))+(((1.1941874999722e-11)*x538))+(((-2.4999999999418)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x539*x541))+(((-1.0)*x538*x539))+((x540*x543))+(((-2.47499999994238e-6)*x541))+(((0.999999999976719)*x542))+(((1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x538))+(((-1.1941874999722e-11)*x540))+(((-4.82499999988767e-6)*x545))+(((-2.4999999999418)*pz))+(((-1.0)*x543*x544))+(((1.1941874999722e-11)*x544))))+IKsqr((((x539*x544))+(((4.82499999988767e-6)*x542))+((x541*x543))+(((-1.0)*x539*x540))+(((-1.0)*x538*x543))+(((-2.47499999994238e-6)*x544))+(((0.999999999976719)*x545))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x540))+(((-1.1941874999722e-11)*x541))+(((1.1941874999722e-11)*x538))+(((-2.4999999999418)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((((x539*x541))+(((-1.0)*x538*x539))+((x540*x543))+(((-2.47499999994238e-6)*x541))+(((0.999999999976719)*x542))+(((1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x538))+(((-1.1941874999722e-11)*x540))+(((-4.82499999988767e-6)*x545))+(((-2.4999999999418)*pz))+(((-1.0)*x543*x544))+(((1.1941874999722e-11)*x544))), (((x539*x544))+(((4.82499999988767e-6)*x542))+((x541*x543))+(((-1.0)*x539*x540))+(((-1.0)*x538*x543))+(((-2.47499999994238e-6)*x544))+(((0.999999999976719)*x545))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x540))+(((-1.1941874999722e-11)*x541))+(((1.1941874999722e-11)*x538))+(((-2.4999999999418)*px))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x546=IKsin(j11);
IkReal x547=IKcos(j11);
IkReal x548=((1.0)*pz);
IkReal x549=((0.4)*sj14);
IkReal x550=(cj15*r20);
IkReal x551=(r01*sj15);
IkReal x552=((0.4)*cj14);
IkReal x553=(r21*sj15);
IkReal x554=(cj15*r00);
IkReal x555=((9.9e-7)*x551);
IkReal x556=((0.4)*x547);
IkReal x557=((9.9e-7)*x554);
IkReal x558=((1.93e-6)*x546);
IkReal x559=((9.9e-7)*x550);
IkReal x560=((0.4)*x546);
IkReal x561=((1.93e-6)*x547);
IkReal x562=((9.9e-7)*x553);
IkReal x563=((0.4)*cj15*sj13);
IkReal x564=((0.4)*sj13*sj15);
IkReal x565=(x558+x557);
IkReal x566=(x556+x555);
IkReal x567=(x548+x562+x560+x561);
evalcond[0]=(((r02*x552))+(((-1.0)*px))+x565+(((-1.0)*x549*x554))+((x549*x551))+(((-1.0)*x566)));
evalcond[1]=(x559+(((-1.0)*x549*x550))+((r22*x552))+((x549*x553))+(((-1.0)*x567)));
evalcond[2]=((((-1.0)*cj13*x550*x552))+(((-1.0)*cj13*r22*x549))+((r21*x563))+px+x566+((r20*x564))+((cj13*x552*x553))+(((-1.0)*x565)));
evalcond[3]=((((-1.0)*cj13*x552*x554))+((r01*x563))+((r00*x564))+x559+((cj13*x551*x552))+(((-1.0)*cj13*r02*x549))+(((-1.0)*x567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x568=(sj11*sj14);
IkReal x569=(r21*sj15);
IkReal x570=(cj15*r20);
IkReal x571=(cj11*sj14);
IkReal x572=(cj15*r00);
IkReal x573=((1.0)*cj14);
IkReal x574=((1.0)*r01*sj14*sj15);
if( IKabs((((x571*x572))+(((-1.0)*r01*sj15*x571))+(((-1.0)*x568*x569))+(((-1.0)*r22*sj11*x573))+(((-1.0)*cj11*r02*x573))+((x568*x570)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*cj14*r22))+(((-1.0)*r02*sj11*x573))+((x569*x571))+((x568*x572))+(((-1.0)*x570*x571))+(((-1.0)*r01*sj15*x568)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x571*x572))+(((-1.0)*r01*sj15*x571))+(((-1.0)*x568*x569))+(((-1.0)*r22*sj11*x573))+(((-1.0)*cj11*r02*x573))+((x568*x570))))+IKsqr((((cj11*cj14*r22))+(((-1.0)*r02*sj11*x573))+((x569*x571))+((x568*x572))+(((-1.0)*x570*x571))+(((-1.0)*r01*sj15*x568))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((x571*x572))+(((-1.0)*r01*sj15*x571))+(((-1.0)*x568*x569))+(((-1.0)*r22*sj11*x573))+(((-1.0)*cj11*r02*x573))+((x568*x570))), (((cj11*cj14*r22))+(((-1.0)*r02*sj11*x573))+((x569*x571))+((x568*x572))+(((-1.0)*x570*x571))+(((-1.0)*r01*sj15*x568))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x575=IKsin(j12);
IkReal x576=IKcos(j12);
IkReal x577=(cj13*cj14);
IkReal x578=(r01*sj15);
IkReal x579=((0.4)*cj11);
IkReal x580=(cj15*r20);
IkReal x581=((1.0)*r22);
IkReal x582=((0.4)*sj11);
IkReal x583=(sj13*sj15);
IkReal x584=(cj15*r00);
IkReal x585=(cj13*sj14);
IkReal x586=((1.0)*sj14);
IkReal x587=(r21*sj15);
IkReal x588=((1.0)*r02);
IkReal x589=(cj15*sj13);
IkReal x590=(sj11*x575);
IkReal x591=(cj11*x576);
IkReal x592=((1.0)*cj11*x575);
IkReal x593=((1.0)*sj11*x576);
IkReal x594=(x593+x592);
evalcond[0]=((((-1.0)*cj14*x581))+(((-1.0)*x590))+(((-1.0)*x586*x587))+((sj14*x580))+x591);
evalcond[1]=((((-1.0)*x578*x586))+(((-1.0)*cj14*x588))+(((-1.0)*x594))+((sj14*x584)));
evalcond[2]=(((x576*x579))+(((-1.0)*pz))+(((-9.9e-7)*x587))+(((-1.93e-6)*cj11))+(((-1.0)*x575*x582))+(((-1.0)*x582))+(((9.9e-7)*x580)));
evalcond[3]=((((-9.9e-7)*x578))+(((1.93e-6)*sj11))+(((-1.0)*px))+(((-1.0)*x575*x579))+(((-1.0)*x579))+(((-1.0)*x576*x582))+(((9.9e-7)*x584)));
evalcond[4]=((((-1.0)*x577*x584))+(((-1.0)*x591))+(((-1.0)*x585*x588))+((x577*x578))+x590+((r01*x589))+((r00*x583)));
evalcond[5]=(((r20*x583))+((x577*x587))+(((-1.0)*x577*x580))+(((-1.0)*x594))+((r21*x589))+(((-1.0)*x581*x585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x595=((1.0)*r01);
IkReal x596=((1.0)*sj15);
CheckValue<IkReal> x597 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x596))+(((-1.0)*cj15*x595)))),IkReal((((r02*sj14))+(((-1.0)*cj14*sj15*x595))+((cj14*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x597.valid){
continue;
}
CheckValue<IkReal> x598=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj14*r22))+(((-1.0)*r21*sj14*x596))+((cj15*r20*sj14)))),-1);
if(!x598.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x597.value)+(((1.5707963267949)*(x598.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x599=IKsin(j13);
IkReal x600=IKcos(j13);
IkReal x601=(cj14*sj15);
IkReal x602=(cj14*cj15);
IkReal x603=(r12*sj14);
IkReal x604=(r10*sj15);
IkReal x605=(r11*x600);
IkReal x606=((1.0)*x599);
IkReal x607=((1.0)*x600);
IkReal x608=(r11*x599);
evalcond[0]=(((cj15*x608))+(((-1.0)*x603*x607))+((x601*x605))+((x599*x604))+(((-1.0)*r10*x602*x607)));
evalcond[1]=((((-1.0)*cj15*r21*x607))+(((-1.0)*r20*x602*x606))+(((-1.0)*r20*sj15*x607))+((r21*x599*x601))+(((-1.0)*r22*sj14*x606)));
evalcond[2]=((((-1.0)*r00*sj15*x607))+(((-1.0)*r00*x602*x606))+((r01*x599*x601))+(((-1.0)*r02*sj14*x606))+(((-1.0)*cj15*r01*x607)));
evalcond[3]=((-1.0)+(((-1.0)*x603*x606))+((x601*x608))+(((-1.0)*x604*x607))+(((-1.0)*r10*x602*x606))+(((-1.0)*cj15*x605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x609=(cj15*r20);
IkReal x610=((0.999999999976719)*sj14);
IkReal x611=(cj15*r00);
IkReal x612=(r21*sj15);
IkReal x613=(cj14*r22);
IkReal x614=((4.82499999988767e-6)*sj14);
IkReal x615=(r01*sj15);
IkReal x616=(cj14*r02);
if( IKabs(((((0.999999999976719)*x613))+(((-1.0)*x614*x615))+(((1.1941874999722e-11)*x615))+(((-1.0)*x609*x610))+(((-4.82499999988767e-6)*x616))+(((-1.1941874999722e-11)*x611))+((x611*x614))+(((1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x609))+((x610*x612))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x612)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.999999999976719)*x616))+(((-1.0)*x610*x611))+(((4.82499999988767e-6)*x613))+(((-1.0)*x609*x614))+(((1.1941874999722e-11)*x609))+(((-1.1941874999722e-11)*x612))+((x612*x614))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x611))+((x610*x615))+(((-2.4999999999418)*px))+(((-2.47499999994238e-6)*x615)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.999999999976719)*x613))+(((-1.0)*x614*x615))+(((1.1941874999722e-11)*x615))+(((-1.0)*x609*x610))+(((-4.82499999988767e-6)*x616))+(((-1.1941874999722e-11)*x611))+((x611*x614))+(((1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x609))+((x610*x612))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x612))))+IKsqr(((((0.999999999976719)*x616))+(((-1.0)*x610*x611))+(((4.82499999988767e-6)*x613))+(((-1.0)*x609*x614))+(((1.1941874999722e-11)*x609))+(((-1.1941874999722e-11)*x612))+((x612*x614))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x611))+((x610*x615))+(((-2.4999999999418)*px))+(((-2.47499999994238e-6)*x615))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((0.999999999976719)*x613))+(((-1.0)*x614*x615))+(((1.1941874999722e-11)*x615))+(((-1.0)*x609*x610))+(((-4.82499999988767e-6)*x616))+(((-1.1941874999722e-11)*x611))+((x611*x614))+(((1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x609))+((x610*x612))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x612))), ((((0.999999999976719)*x616))+(((-1.0)*x610*x611))+(((4.82499999988767e-6)*x613))+(((-1.0)*x609*x614))+(((1.1941874999722e-11)*x609))+(((-1.1941874999722e-11)*x612))+((x612*x614))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x611))+((x610*x615))+(((-2.4999999999418)*px))+(((-2.47499999994238e-6)*x615))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x617=IKsin(j11);
IkReal x618=IKcos(j11);
IkReal x619=((1.0)*pz);
IkReal x620=((0.4)*sj14);
IkReal x621=(cj15*r20);
IkReal x622=(r01*sj15);
IkReal x623=((0.4)*cj14);
IkReal x624=(r21*sj15);
IkReal x625=(cj15*r00);
IkReal x626=((9.9e-7)*x622);
IkReal x627=((0.4)*x618);
IkReal x628=((9.9e-7)*x625);
IkReal x629=((1.93e-6)*x617);
IkReal x630=((9.9e-7)*x621);
IkReal x631=((0.4)*x617);
IkReal x632=((1.93e-6)*x618);
IkReal x633=((9.9e-7)*x624);
IkReal x634=((0.4)*cj15*sj13);
IkReal x635=((0.4)*sj13*sj15);
IkReal x636=(x629+x628);
IkReal x637=(x627+x626);
IkReal x638=(x619+x632+x633+x631);
evalcond[0]=(((r02*x623))+(((-1.0)*x620*x625))+(((-1.0)*x637))+(((-1.0)*px))+x636+((x620*x622)));
evalcond[1]=(((r22*x623))+(((-1.0)*x620*x621))+(((-1.0)*x638))+x630+((x620*x624)));
evalcond[2]=(((r21*x634))+(((-1.0)*x636))+(((-1.0)*cj13*r22*x620))+px+x637+(((-1.0)*cj13*x621*x623))+((r20*x635))+((cj13*x623*x624)));
evalcond[3]=((((-1.0)*cj13*x623*x625))+(((-1.0)*x638))+((r01*x634))+(((-1.0)*cj13*r02*x620))+((r00*x635))+x630+((cj13*x622*x623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x639=(sj11*sj14);
IkReal x640=(r21*sj15);
IkReal x641=(cj15*r20);
IkReal x642=(cj11*sj14);
IkReal x643=(cj15*r00);
IkReal x644=((1.0)*cj14);
IkReal x645=((1.0)*r01*sj14*sj15);
if( IKabs((((x639*x641))+(((-1.0)*x639*x640))+(((-1.0)*r22*sj11*x644))+(((-1.0)*cj11*r02*x644))+((x642*x643))+(((-1.0)*r01*sj15*x642)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj15*x639))+(((-1.0)*r02*sj11*x644))+(((-1.0)*x641*x642))+((cj11*cj14*r22))+((x639*x643))+((x640*x642)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x639*x641))+(((-1.0)*x639*x640))+(((-1.0)*r22*sj11*x644))+(((-1.0)*cj11*r02*x644))+((x642*x643))+(((-1.0)*r01*sj15*x642))))+IKsqr(((((-1.0)*r01*sj15*x639))+(((-1.0)*r02*sj11*x644))+(((-1.0)*x641*x642))+((cj11*cj14*r22))+((x639*x643))+((x640*x642))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((x639*x641))+(((-1.0)*x639*x640))+(((-1.0)*r22*sj11*x644))+(((-1.0)*cj11*r02*x644))+((x642*x643))+(((-1.0)*r01*sj15*x642))), ((((-1.0)*r01*sj15*x639))+(((-1.0)*r02*sj11*x644))+(((-1.0)*x641*x642))+((cj11*cj14*r22))+((x639*x643))+((x640*x642))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x646=IKsin(j12);
IkReal x647=IKcos(j12);
IkReal x648=(cj13*cj14);
IkReal x649=(r01*sj15);
IkReal x650=((0.4)*cj11);
IkReal x651=(cj15*r20);
IkReal x652=((1.0)*r22);
IkReal x653=((0.4)*sj11);
IkReal x654=(sj13*sj15);
IkReal x655=(cj15*r00);
IkReal x656=(cj13*sj14);
IkReal x657=((1.0)*sj14);
IkReal x658=(r21*sj15);
IkReal x659=((1.0)*r02);
IkReal x660=(cj15*sj13);
IkReal x661=(sj11*x646);
IkReal x662=(cj11*x647);
IkReal x663=((1.0)*cj11*x646);
IkReal x664=((1.0)*sj11*x647);
IkReal x665=(x663+x664);
evalcond[0]=((((-1.0)*x657*x658))+(((-1.0)*x661))+x662+(((-1.0)*cj14*x652))+((sj14*x651)));
evalcond[1]=((((-1.0)*x665))+(((-1.0)*x649*x657))+(((-1.0)*cj14*x659))+((sj14*x655)));
evalcond[2]=(((x647*x650))+(((-9.9e-7)*x658))+(((9.9e-7)*x651))+(((-1.0)*x646*x653))+(((-1.0)*x653))+(((-1.0)*pz))+(((-1.93e-6)*cj11)));
evalcond[3]=((((-9.9e-7)*x649))+(((1.93e-6)*sj11))+(((9.9e-7)*x655))+(((-1.0)*x646*x650))+(((-1.0)*x647*x653))+(((-1.0)*x650))+(((-1.0)*px)));
evalcond[4]=(((r01*x660))+((x648*x649))+(((-1.0)*x656*x659))+(((-1.0)*x662))+x661+(((-1.0)*x648*x655))+((r00*x654)));
evalcond[5]=(((x648*x658))+((r21*x660))+(((-1.0)*x665))+(((-1.0)*x648*x651))+(((-1.0)*x652*x656))+((r20*x654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x666=((1.0)*r21);
CheckValue<IkReal> x667 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*x666))+(((-1.0)*r20*sj15)))),IkReal(((((-1.0)*cj14*sj15*x666))+((cj14*cj15*r20))+((r22*sj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x667.valid){
continue;
}
CheckValue<IkReal> x668=IKPowWithIntegerCheck(IKsign((((r01*sj14*sj15))+(((-1.0)*cj15*r00*sj14))+((cj14*r02)))),-1);
if(!x668.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x667.value)+(((1.5707963267949)*(x668.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x669=IKsin(j13);
IkReal x670=IKcos(j13);
IkReal x671=(cj14*sj15);
IkReal x672=(cj14*cj15);
IkReal x673=(r12*sj14);
IkReal x674=(r10*sj15);
IkReal x675=(r11*x670);
IkReal x676=((1.0)*x669);
IkReal x677=((1.0)*x670);
IkReal x678=(r11*x669);
evalcond[0]=(((x671*x675))+((cj15*x678))+((x669*x674))+(((-1.0)*r10*x672*x677))+(((-1.0)*x673*x677)));
evalcond[1]=((((-1.0)*r20*sj15*x677))+((r21*x669*x671))+(((-1.0)*r20*x672*x676))+(((-1.0)*r22*sj14*x676))+(((-1.0)*cj15*r21*x677)));
evalcond[2]=((((-1.0)*r02*sj14*x676))+((r01*x669*x671))+(((-1.0)*cj15*r01*x677))+(((-1.0)*r00*sj15*x677))+(((-1.0)*r00*x672*x676)));
evalcond[3]=((-1.0)+((x671*x678))+(((-1.0)*cj15*x675))+(((-1.0)*r10*x672*x676))+(((-1.0)*x674*x677))+(((-1.0)*x673*x676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x679=(cj15*r20);
IkReal x680=((0.999999999976719)*sj14);
IkReal x681=(cj15*r00);
IkReal x682=(r21*sj15);
IkReal x683=(cj14*r22);
IkReal x684=((4.82499999988767e-6)*sj14);
IkReal x685=(r01*sj15);
IkReal x686=(cj14*r02);
if( IKabs(((((-1.1941874999722e-11)*x681))+(((2.47499999994238e-6)*x679))+(((0.999999999976719)*x683))+(((-2.47499999994238e-6)*x682))+(((-1.0)*x679*x680))+(((1.20624999997192e-5)*px))+(((-4.82499999988767e-6)*x686))+(((-1.0)*x684*x685))+((x681*x684))+((x680*x682))+(((1.1941874999722e-11)*x685))+(((-2.4999999999418)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.1941874999722e-11)*x679))+(((-1.1941874999722e-11)*x682))+(((-1.0)*x680*x681))+(((2.47499999994238e-6)*x681))+((x682*x684))+(((0.999999999976719)*x686))+(((-2.47499999994238e-6)*x685))+(((-1.0)*x679*x684))+(((-1.20624999997192e-5)*pz))+(((4.82499999988767e-6)*x683))+((x680*x685))+(((-2.4999999999418)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.1941874999722e-11)*x681))+(((2.47499999994238e-6)*x679))+(((0.999999999976719)*x683))+(((-2.47499999994238e-6)*x682))+(((-1.0)*x679*x680))+(((1.20624999997192e-5)*px))+(((-4.82499999988767e-6)*x686))+(((-1.0)*x684*x685))+((x681*x684))+((x680*x682))+(((1.1941874999722e-11)*x685))+(((-2.4999999999418)*pz))))+IKsqr(((((1.1941874999722e-11)*x679))+(((-1.1941874999722e-11)*x682))+(((-1.0)*x680*x681))+(((2.47499999994238e-6)*x681))+((x682*x684))+(((0.999999999976719)*x686))+(((-2.47499999994238e-6)*x685))+(((-1.0)*x679*x684))+(((-1.20624999997192e-5)*pz))+(((4.82499999988767e-6)*x683))+((x680*x685))+(((-2.4999999999418)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.1941874999722e-11)*x681))+(((2.47499999994238e-6)*x679))+(((0.999999999976719)*x683))+(((-2.47499999994238e-6)*x682))+(((-1.0)*x679*x680))+(((1.20624999997192e-5)*px))+(((-4.82499999988767e-6)*x686))+(((-1.0)*x684*x685))+((x681*x684))+((x680*x682))+(((1.1941874999722e-11)*x685))+(((-2.4999999999418)*pz))), ((((1.1941874999722e-11)*x679))+(((-1.1941874999722e-11)*x682))+(((-1.0)*x680*x681))+(((2.47499999994238e-6)*x681))+((x682*x684))+(((0.999999999976719)*x686))+(((-2.47499999994238e-6)*x685))+(((-1.0)*x679*x684))+(((-1.20624999997192e-5)*pz))+(((4.82499999988767e-6)*x683))+((x680*x685))+(((-2.4999999999418)*px))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x687=IKsin(j11);
IkReal x688=IKcos(j11);
IkReal x689=((1.0)*pz);
IkReal x690=((0.4)*sj14);
IkReal x691=(cj15*r20);
IkReal x692=(r01*sj15);
IkReal x693=((0.4)*cj14);
IkReal x694=(r21*sj15);
IkReal x695=(cj15*r00);
IkReal x696=((9.9e-7)*x692);
IkReal x697=((0.4)*x688);
IkReal x698=((9.9e-7)*x695);
IkReal x699=((1.93e-6)*x687);
IkReal x700=((9.9e-7)*x691);
IkReal x701=((0.4)*x687);
IkReal x702=((1.93e-6)*x688);
IkReal x703=((9.9e-7)*x694);
IkReal x704=((0.4)*cj15*sj13);
IkReal x705=((0.4)*sj13*sj15);
IkReal x706=(x698+x699);
IkReal x707=(x696+x697);
IkReal x708=(x689+x702+x703+x701);
evalcond[0]=(((x690*x692))+((r02*x693))+(((-1.0)*px))+(((-1.0)*x707))+(((-1.0)*x690*x695))+x706);
evalcond[1]=(((x690*x694))+((r22*x693))+(((-1.0)*x708))+(((-1.0)*x690*x691))+x700);
evalcond[2]=(((cj13*x693*x694))+(((-1.0)*cj13*x691*x693))+((r20*x705))+px+(((-1.0)*x706))+((r21*x704))+x707+(((-1.0)*cj13*r22*x690)));
evalcond[3]=((((-1.0)*cj13*x693*x695))+(((-1.0)*cj13*r02*x690))+((r01*x704))+((r00*x705))+(((-1.0)*x708))+x700+((cj13*x692*x693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x709=(sj11*sj14);
IkReal x710=(r21*sj15);
IkReal x711=(cj15*r20);
IkReal x712=(cj11*sj14);
IkReal x713=(cj15*r00);
IkReal x714=((1.0)*cj14);
IkReal x715=((1.0)*r01*sj14*sj15);
if( IKabs(((((-1.0)*r22*sj11*x714))+(((-1.0)*cj11*r02*x714))+((x709*x711))+(((-1.0)*x709*x710))+(((-1.0)*r01*sj15*x712))+((x712*x713)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*cj14*r22))+(((-1.0)*x711*x712))+((x709*x713))+((x710*x712))+(((-1.0)*r01*sj15*x709))+(((-1.0)*r02*sj11*x714)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*sj11*x714))+(((-1.0)*cj11*r02*x714))+((x709*x711))+(((-1.0)*x709*x710))+(((-1.0)*r01*sj15*x712))+((x712*x713))))+IKsqr((((cj11*cj14*r22))+(((-1.0)*x711*x712))+((x709*x713))+((x710*x712))+(((-1.0)*r01*sj15*x709))+(((-1.0)*r02*sj11*x714))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r22*sj11*x714))+(((-1.0)*cj11*r02*x714))+((x709*x711))+(((-1.0)*x709*x710))+(((-1.0)*r01*sj15*x712))+((x712*x713))), (((cj11*cj14*r22))+(((-1.0)*x711*x712))+((x709*x713))+((x710*x712))+(((-1.0)*r01*sj15*x709))+(((-1.0)*r02*sj11*x714))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x716=IKsin(j12);
IkReal x717=IKcos(j12);
IkReal x718=(cj13*cj14);
IkReal x719=(r01*sj15);
IkReal x720=((0.4)*cj11);
IkReal x721=(cj15*r20);
IkReal x722=((1.0)*r22);
IkReal x723=((0.4)*sj11);
IkReal x724=(sj13*sj15);
IkReal x725=(cj15*r00);
IkReal x726=(cj13*sj14);
IkReal x727=((1.0)*sj14);
IkReal x728=(r21*sj15);
IkReal x729=((1.0)*r02);
IkReal x730=(cj15*sj13);
IkReal x731=(sj11*x716);
IkReal x732=(cj11*x717);
IkReal x733=((1.0)*cj11*x716);
IkReal x734=((1.0)*sj11*x717);
IkReal x735=(x734+x733);
evalcond[0]=((((-1.0)*x727*x728))+((sj14*x721))+(((-1.0)*cj14*x722))+(((-1.0)*x731))+x732);
evalcond[1]=(((sj14*x725))+(((-1.0)*cj14*x729))+(((-1.0)*x735))+(((-1.0)*x719*x727)));
evalcond[2]=(((x717*x720))+(((-1.0)*x723))+(((-1.0)*pz))+(((9.9e-7)*x721))+(((-1.93e-6)*cj11))+(((-1.0)*x716*x723))+(((-9.9e-7)*x728)));
evalcond[3]=((((-9.9e-7)*x719))+(((1.93e-6)*sj11))+(((-1.0)*x717*x723))+(((-1.0)*x720))+(((-1.0)*px))+(((9.9e-7)*x725))+(((-1.0)*x716*x720)));
evalcond[4]=(((r01*x730))+(((-1.0)*x732))+((r00*x724))+(((-1.0)*x726*x729))+x731+((x718*x719))+(((-1.0)*x718*x725)));
evalcond[5]=(((r20*x724))+(((-1.0)*x722*x726))+(((-1.0)*x735))+((x718*x728))+((r21*x730))+(((-1.0)*x718*x721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x736=((1.0)*cj15);
IkReal x737=((1.0)*sj15);
IkReal x738=(((cj14*r22))+((r21*sj14*sj15))+(((-1.0)*r20*sj14*x736)));
j13eval[0]=x738;
j13eval[1]=((IKabs(((((-1.0)*r10*x737))+(((-1.0)*r11*x736)))))+(IKabs((((r12*sj14))+((cj14*cj15*r10))+(((-1.0)*cj14*r11*x737))))));
j13eval[2]=IKsign(x738);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x739=((1.0)*sj15);
IkReal x740=(((cj15*r10*sj14))+(((-1.0)*cj14*r12))+(((-1.0)*r11*sj14*x739)));
j13eval[0]=x740;
j13eval[1]=IKsign(x740);
j13eval[2]=((IKabs(((((-1.0)*cj15*r21))+(((-1.0)*r20*x739)))))+(IKabs((((cj14*cj15*r20))+((r22*sj14))+(((-1.0)*cj14*r21*x739))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x741=cj14*cj14;
IkReal x742=r00*r00;
IkReal x743=cj15*cj15;
IkReal x744=r01*r01;
IkReal x745=r02*r02;
IkReal x746=(r02*sj14);
IkReal x747=(r01*sj15);
IkReal x748=((1.0)*cj15);
IkReal x749=(cj14*x747);
IkReal x750=((1.0)*x741);
IkReal x751=((2.0)*cj15*r00);
IkReal x752=(x743*x744);
IkReal x753=(x742*x743);
IkReal x754=(((cj14*x746*x751))+(((-1.0)*x745*x750))+((x747*x751))+(((-1.0)*x750*x752))+((x741*x744))+((x741*x753))+(((-1.0)*x741*x747*x751))+(((-1.0)*x753))+(((-2.0)*x746*x749))+x752+x745+x742);
j13eval[0]=x754;
j13eval[1]=((IKabs(((((-1.0)*r00*sj15))+(((-1.0)*r01*x748)))))+(IKabs(((((-1.0)*cj14*r00*x748))+(((-1.0)*x746))+x749))));
j13eval[2]=IKsign(x754);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11, j12, j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x755=cj14*cj14;
IkReal x756=r00*r00;
IkReal x757=cj15*cj15;
IkReal x758=r01*r01;
IkReal x759=r02*r02;
IkReal x760=(cj15*r01);
IkReal x761=(r02*sj14);
IkReal x762=((2.0)*r00);
IkReal x763=(cj14*cj15);
IkReal x764=((1.0)*r00);
IkReal x765=(cj14*r01*sj15);
IkReal x766=((1.0)*x755);
IkReal x767=(x757*x758);
IkReal x768=(x756*x757);
CheckValue<IkReal> x769 = IKatan2WithCheck(IkReal(((((-1.0)*x763*x764))+(((-1.0)*x761))+x765)),IkReal(((((-1.0)*x760))+(((-1.0)*sj15*x764)))),IKFAST_ATAN2_MAGTHRESH);
if(!x769.valid){
continue;
}
CheckValue<IkReal> x770=IKPowWithIntegerCheck(IKsign((((x761*x762*x763))+(((-1.0)*x766*x767))+((sj15*x760*x762))+(((-1.0)*sj15*x755*x760*x762))+(((-1.0)*x768))+((x755*x758))+x756+x759+x767+(((-2.0)*x761*x765))+((x755*x768))+(((-1.0)*x759*x766)))),-1);
if(!x770.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x769.value)+(((1.5707963267949)*(x770.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x771=IKsin(j13);
IkReal x772=IKcos(j13);
IkReal x773=((1.0)*sj14);
IkReal x774=(cj15*r01);
IkReal x775=(cj14*cj15);
IkReal x776=(r00*x771);
IkReal x777=((1.0)*x772);
IkReal x778=((1.0)*x771);
IkReal x779=(cj14*sj15*x771);
evalcond[0]=(((x771*x774))+(((-1.0)*r00*x775*x777))+((cj14*r01*sj15*x772))+(((-1.0)*r02*x772*x773))+((sj15*x776)));
evalcond[1]=((((-1.0)*cj15*r21*x777))+(((-1.0)*r22*x771*x773))+(((-1.0)*r20*sj15*x777))+((r21*x779))+(((-1.0)*r20*x775*x778)));
evalcond[2]=((((-1.0)*r10*sj15*x777))+(((-1.0)*r12*x771*x773))+((r11*x779))+(((-1.0)*r10*x775*x778))+(((-1.0)*cj15*r11*x777)));
evalcond[3]=((-1.0)+(((-1.0)*x774*x777))+(((-1.0)*r02*x771*x773))+(((-1.0)*r00*sj15*x777))+(((-1.0)*x775*x776))+((r01*x779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x780=(cj14*r12);
IkReal x781=(cj15*r20);
IkReal x782=((0.999999999976719)*sj14);
IkReal x783=(r21*sj15);
IkReal x784=(cj15*r10);
IkReal x785=((4.82499999988767e-6)*sj14);
IkReal x786=(cj14*r22);
IkReal x787=(r11*sj15);
if( IKabs(((((1.1941874999722e-11)*x784))+(((0.999999999976719)*x786))+((x785*x787))+((x782*x783))+(((-1.0)*x781*x782))+(((-1.1941874999722e-11)*x787))+(((4.82499999988767e-6)*x780))+(((-1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x781))+(((-1.0)*x784*x785))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x783)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.1941874999722e-11)*x781))+(((2.4999999999418)*py))+((x782*x784))+(((-1.0)*x781*x785))+(((-1.1941874999722e-11)*x783))+((x783*x785))+(((4.82499999988767e-6)*x786))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x782*x787))+(((2.47499999994238e-6)*x787))+(((-2.47499999994238e-6)*x784))+(((-0.999999999976719)*x780)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.1941874999722e-11)*x784))+(((0.999999999976719)*x786))+((x785*x787))+((x782*x783))+(((-1.0)*x781*x782))+(((-1.1941874999722e-11)*x787))+(((4.82499999988767e-6)*x780))+(((-1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x781))+(((-1.0)*x784*x785))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x783))))+IKsqr(((((1.1941874999722e-11)*x781))+(((2.4999999999418)*py))+((x782*x784))+(((-1.0)*x781*x785))+(((-1.1941874999722e-11)*x783))+((x783*x785))+(((4.82499999988767e-6)*x786))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x782*x787))+(((2.47499999994238e-6)*x787))+(((-2.47499999994238e-6)*x784))+(((-0.999999999976719)*x780))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((1.1941874999722e-11)*x784))+(((0.999999999976719)*x786))+((x785*x787))+((x782*x783))+(((-1.0)*x781*x782))+(((-1.1941874999722e-11)*x787))+(((4.82499999988767e-6)*x780))+(((-1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x781))+(((-1.0)*x784*x785))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x783))), ((((1.1941874999722e-11)*x781))+(((2.4999999999418)*py))+((x782*x784))+(((-1.0)*x781*x785))+(((-1.1941874999722e-11)*x783))+((x783*x785))+(((4.82499999988767e-6)*x786))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x782*x787))+(((2.47499999994238e-6)*x787))+(((-2.47499999994238e-6)*x784))+(((-0.999999999976719)*x780))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x788=IKsin(j11);
IkReal x789=IKcos(j11);
IkReal x790=((0.4)*sj13);
IkReal x791=((0.4)*sj14);
IkReal x792=(cj15*r20);
IkReal x793=((0.4)*cj14);
IkReal x794=(r21*sj15);
IkReal x795=(cj15*r10);
IkReal x796=(r11*sj15);
IkReal x797=((9.9e-7)*x796);
IkReal x798=((1.93e-6)*x788);
IkReal x799=((9.9e-7)*x795);
IkReal x800=((0.4)*x789);
IkReal x801=((0.4)*x788);
IkReal x802=((1.93e-6)*x789);
IkReal x803=((9.9e-7)*x794);
IkReal x804=((9.9e-7)*x792);
IkReal x805=(x799+x800);
IkReal x806=(py+x797+x798);
IkReal x807=(x801+x803+x802);
evalcond[0]=((((-1.0)*x791*x796))+(((-1.0)*r12*x793))+x806+(((-1.0)*x805))+((x791*x795)));
evalcond[1]=((((-1.0)*x791*x792))+(((-1.0)*pz))+((r22*x793))+x804+(((-1.0)*x807))+((x791*x794)));
evalcond[2]=((((-1.0)*cj15*r21*x790))+(((-1.0)*r20*sj15*x790))+((cj13*r22*x791))+((cj13*x792*x793))+(((-1.0)*cj13*x793*x794))+x806+(((-1.0)*x805)));
evalcond[3]=((((-1.0)*cj13*r12*x791))+((r10*sj15*x790))+((cj15*r11*x790))+pz+(((-1.0)*cj13*x793*x795))+x807+((cj13*x793*x796))+(((-1.0)*x804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x808=(sj11*sj14);
IkReal x809=(r11*sj15);
IkReal x810=((1.0)*cj15);
IkReal x811=(cj14*r12);
IkReal x812=(cj11*sj14);
IkReal x813=(r21*sj15);
IkReal x814=(cj14*r22);
if( IKabs((((x809*x812))+(((-1.0)*x808*x813))+((cj11*x811))+((cj15*r20*x808))+(((-1.0)*sj11*x814))+(((-1.0)*r10*x810*x812)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj11*x811))+((x812*x813))+((cj11*x814))+(((-1.0)*r10*x808*x810))+(((-1.0)*r20*x810*x812))+((x808*x809)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x809*x812))+(((-1.0)*x808*x813))+((cj11*x811))+((cj15*r20*x808))+(((-1.0)*sj11*x814))+(((-1.0)*r10*x810*x812))))+IKsqr((((sj11*x811))+((x812*x813))+((cj11*x814))+(((-1.0)*r10*x808*x810))+(((-1.0)*r20*x810*x812))+((x808*x809))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((x809*x812))+(((-1.0)*x808*x813))+((cj11*x811))+((cj15*r20*x808))+(((-1.0)*sj11*x814))+(((-1.0)*r10*x810*x812))), (((sj11*x811))+((x812*x813))+((cj11*x814))+(((-1.0)*r10*x808*x810))+(((-1.0)*r20*x810*x812))+((x808*x809))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x815=IKcos(j12);
IkReal x816=IKsin(j12);
IkReal x817=(cj15*r10);
IkReal x818=((0.4)*cj11);
IkReal x819=((1.0)*sj14);
IkReal x820=(r11*sj15);
IkReal x821=((1.0)*cj14);
IkReal x822=(cj15*r20);
IkReal x823=(cj13*cj14);
IkReal x824=(sj13*sj15);
IkReal x825=(cj15*sj13);
IkReal x826=(r21*sj15);
IkReal x827=(cj11*x815);
IkReal x828=(sj11*x815);
IkReal x829=(sj11*x816);
IkReal x830=(cj11*x816);
IkReal x831=((1.0)*x829);
evalcond[0]=(((sj14*x817))+(((-1.0)*r12*x821))+(((-1.0)*x819*x820))+x828+x830);
evalcond[1]=(((sj14*x822))+(((-1.0)*x819*x826))+(((-1.0)*x831))+(((-1.0)*r22*x821))+x827);
evalcond[2]=(((x815*x818))+(((-0.4)*x829))+(((9.9e-7)*x822))+(((-9.9e-7)*x826))+(((-1.0)*pz))+(((-0.4)*sj11))+(((-1.93e-6)*cj11)));
evalcond[3]=(((x816*x818))+(((-1.93e-6)*sj11))+(((-9.9e-7)*x820))+(((0.4)*x828))+(((-1.0)*py))+(((9.9e-7)*x817))+x818);
evalcond[4]=(((x820*x823))+(((-1.0)*cj13*x817*x821))+(((-1.0)*cj13*r12*x819))+((r10*x824))+(((-1.0)*x831))+x827+((r11*x825)));
evalcond[5]=((((-1.0)*cj13*r22*x819))+((r21*x825))+((r20*x824))+(((-1.0)*cj13*x821*x822))+(((-1.0)*x828))+(((-1.0)*x830))+((x823*x826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x832=((1.0)*sj15);
CheckValue<IkReal> x833=IKPowWithIntegerCheck(IKsign((((cj15*r10*sj14))+(((-1.0)*cj14*r12))+(((-1.0)*r11*sj14*x832)))),-1);
if(!x833.valid){
continue;
}
CheckValue<IkReal> x834 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x832))+(((-1.0)*cj15*r21)))),IkReal((((cj14*cj15*r20))+(((-1.0)*cj14*r21*x832))+((r22*sj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x834.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x833.value)))+(x834.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x835=IKsin(j13);
IkReal x836=IKcos(j13);
IkReal x837=((1.0)*sj14);
IkReal x838=(cj15*r01);
IkReal x839=(cj14*cj15);
IkReal x840=(r00*x835);
IkReal x841=((1.0)*x836);
IkReal x842=((1.0)*x835);
IkReal x843=(cj14*sj15*x835);
evalcond[0]=((((-1.0)*r02*x836*x837))+((sj15*x840))+((x835*x838))+((cj14*r01*sj15*x836))+(((-1.0)*r00*x839*x841)));
evalcond[1]=((((-1.0)*cj15*r21*x841))+(((-1.0)*r20*x839*x842))+(((-1.0)*r20*sj15*x841))+(((-1.0)*r22*x835*x837))+((r21*x843)));
evalcond[2]=((((-1.0)*r10*x839*x842))+(((-1.0)*cj15*r11*x841))+(((-1.0)*r12*x835*x837))+(((-1.0)*r10*sj15*x841))+((r11*x843)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x835*x837))+((r01*x843))+(((-1.0)*r00*sj15*x841))+(((-1.0)*x838*x841))+(((-1.0)*x839*x840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x844=(cj14*r12);
IkReal x845=(cj15*r20);
IkReal x846=((0.999999999976719)*sj14);
IkReal x847=(r21*sj15);
IkReal x848=(cj15*r10);
IkReal x849=((4.82499999988767e-6)*sj14);
IkReal x850=(cj14*r22);
IkReal x851=(r11*sj15);
if( IKabs(((((-2.47499999994238e-6)*x847))+(((1.1941874999722e-11)*x848))+(((0.999999999976719)*x850))+((x846*x847))+(((2.47499999994238e-6)*x845))+(((4.82499999988767e-6)*x844))+(((-1.20624999997192e-5)*py))+(((-1.0)*x845*x846))+(((-1.1941874999722e-11)*x851))+((x849*x851))+(((-2.4999999999418)*pz))+(((-1.0)*x848*x849)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((4.82499999988767e-6)*x850))+(((-2.47499999994238e-6)*x848))+(((1.1941874999722e-11)*x845))+(((-1.0)*x846*x851))+(((-1.1941874999722e-11)*x847))+(((2.4999999999418)*py))+((x846*x848))+(((-1.20624999997192e-5)*pz))+(((-0.999999999976719)*x844))+(((-1.0)*x845*x849))+(((2.47499999994238e-6)*x851))+((x847*x849)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.47499999994238e-6)*x847))+(((1.1941874999722e-11)*x848))+(((0.999999999976719)*x850))+((x846*x847))+(((2.47499999994238e-6)*x845))+(((4.82499999988767e-6)*x844))+(((-1.20624999997192e-5)*py))+(((-1.0)*x845*x846))+(((-1.1941874999722e-11)*x851))+((x849*x851))+(((-2.4999999999418)*pz))+(((-1.0)*x848*x849))))+IKsqr(((((4.82499999988767e-6)*x850))+(((-2.47499999994238e-6)*x848))+(((1.1941874999722e-11)*x845))+(((-1.0)*x846*x851))+(((-1.1941874999722e-11)*x847))+(((2.4999999999418)*py))+((x846*x848))+(((-1.20624999997192e-5)*pz))+(((-0.999999999976719)*x844))+(((-1.0)*x845*x849))+(((2.47499999994238e-6)*x851))+((x847*x849))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-2.47499999994238e-6)*x847))+(((1.1941874999722e-11)*x848))+(((0.999999999976719)*x850))+((x846*x847))+(((2.47499999994238e-6)*x845))+(((4.82499999988767e-6)*x844))+(((-1.20624999997192e-5)*py))+(((-1.0)*x845*x846))+(((-1.1941874999722e-11)*x851))+((x849*x851))+(((-2.4999999999418)*pz))+(((-1.0)*x848*x849))), ((((4.82499999988767e-6)*x850))+(((-2.47499999994238e-6)*x848))+(((1.1941874999722e-11)*x845))+(((-1.0)*x846*x851))+(((-1.1941874999722e-11)*x847))+(((2.4999999999418)*py))+((x846*x848))+(((-1.20624999997192e-5)*pz))+(((-0.999999999976719)*x844))+(((-1.0)*x845*x849))+(((2.47499999994238e-6)*x851))+((x847*x849))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x852=IKsin(j11);
IkReal x853=IKcos(j11);
IkReal x854=((0.4)*sj13);
IkReal x855=((0.4)*sj14);
IkReal x856=(cj15*r20);
IkReal x857=((0.4)*cj14);
IkReal x858=(r21*sj15);
IkReal x859=(cj15*r10);
IkReal x860=(r11*sj15);
IkReal x861=((9.9e-7)*x860);
IkReal x862=((1.93e-6)*x852);
IkReal x863=((9.9e-7)*x859);
IkReal x864=((0.4)*x853);
IkReal x865=((0.4)*x852);
IkReal x866=((1.93e-6)*x853);
IkReal x867=((9.9e-7)*x858);
IkReal x868=((9.9e-7)*x856);
IkReal x869=(x864+x863);
IkReal x870=(py+x862+x861);
IkReal x871=(x867+x866+x865);
evalcond[0]=((((-1.0)*x869))+(((-1.0)*r12*x857))+((x855*x859))+x870+(((-1.0)*x855*x860)));
evalcond[1]=(((x855*x858))+(((-1.0)*pz))+((r22*x857))+(((-1.0)*x855*x856))+x868+(((-1.0)*x871)));
evalcond[2]=((((-1.0)*x869))+((cj13*r22*x855))+(((-1.0)*cj15*r21*x854))+(((-1.0)*cj13*x857*x858))+x870+(((-1.0)*r20*sj15*x854))+((cj13*x856*x857)));
evalcond[3]=((((-1.0)*cj13*r12*x855))+(((-1.0)*x868))+((cj15*r11*x854))+pz+((r10*sj15*x854))+((cj13*x857*x860))+(((-1.0)*cj13*x857*x859))+x871);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x872=(sj11*sj14);
IkReal x873=(r11*sj15);
IkReal x874=((1.0)*cj15);
IkReal x875=(cj14*r12);
IkReal x876=(cj11*sj14);
IkReal x877=(r21*sj15);
IkReal x878=(cj14*r22);
if( IKabs(((((-1.0)*r10*x874*x876))+((cj15*r20*x872))+(((-1.0)*x872*x877))+((x873*x876))+((cj11*x875))+(((-1.0)*sj11*x878)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x876*x877))+((x872*x873))+((sj11*x875))+((cj11*x878))+(((-1.0)*r20*x874*x876))+(((-1.0)*r10*x872*x874)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x874*x876))+((cj15*r20*x872))+(((-1.0)*x872*x877))+((x873*x876))+((cj11*x875))+(((-1.0)*sj11*x878))))+IKsqr((((x876*x877))+((x872*x873))+((sj11*x875))+((cj11*x878))+(((-1.0)*r20*x874*x876))+(((-1.0)*r10*x872*x874))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r10*x874*x876))+((cj15*r20*x872))+(((-1.0)*x872*x877))+((x873*x876))+((cj11*x875))+(((-1.0)*sj11*x878))), (((x876*x877))+((x872*x873))+((sj11*x875))+((cj11*x878))+(((-1.0)*r20*x874*x876))+(((-1.0)*r10*x872*x874))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x879=IKcos(j12);
IkReal x880=IKsin(j12);
IkReal x881=(cj15*r10);
IkReal x882=((0.4)*cj11);
IkReal x883=((1.0)*sj14);
IkReal x884=(r11*sj15);
IkReal x885=((1.0)*cj14);
IkReal x886=(cj15*r20);
IkReal x887=(cj13*cj14);
IkReal x888=(sj13*sj15);
IkReal x889=(cj15*sj13);
IkReal x890=(r21*sj15);
IkReal x891=(cj11*x879);
IkReal x892=(sj11*x879);
IkReal x893=(sj11*x880);
IkReal x894=(cj11*x880);
IkReal x895=((1.0)*x893);
evalcond[0]=((((-1.0)*x883*x884))+(((-1.0)*r12*x885))+x894+x892+((sj14*x881)));
evalcond[1]=((((-1.0)*x883*x890))+(((-1.0)*x895))+x891+(((-1.0)*r22*x885))+((sj14*x886)));
evalcond[2]=(((x879*x882))+(((-0.4)*x893))+(((-9.9e-7)*x890))+(((-1.0)*pz))+(((9.9e-7)*x886))+(((-0.4)*sj11))+(((-1.93e-6)*cj11)));
evalcond[3]=(((x880*x882))+(((-1.93e-6)*sj11))+(((0.4)*x892))+(((-1.0)*py))+(((9.9e-7)*x881))+(((-9.9e-7)*x884))+x882);
evalcond[4]=(((r11*x889))+((r10*x888))+(((-1.0)*x895))+(((-1.0)*cj13*r12*x883))+(((-1.0)*cj13*x881*x885))+x891+((x884*x887)));
evalcond[5]=((((-1.0)*cj13*r22*x883))+((r20*x888))+(((-1.0)*x892))+(((-1.0)*x894))+(((-1.0)*cj13*x885*x886))+((r21*x889))+((x887*x890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x896=((1.0)*cj15);
IkReal x897=((1.0)*sj15);
CheckValue<IkReal> x898=IKPowWithIntegerCheck(IKsign((((cj14*r22))+(((-1.0)*r20*sj14*x896))+((r21*sj14*sj15)))),-1);
if(!x898.valid){
continue;
}
CheckValue<IkReal> x899 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x896))+(((-1.0)*r10*x897)))),IkReal((((r12*sj14))+(((-1.0)*cj14*r11*x897))+((cj14*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x899.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x898.value)))+(x899.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x900=IKsin(j13);
IkReal x901=IKcos(j13);
IkReal x902=((1.0)*sj14);
IkReal x903=(cj15*r01);
IkReal x904=(cj14*cj15);
IkReal x905=(r00*x900);
IkReal x906=((1.0)*x901);
IkReal x907=((1.0)*x900);
IkReal x908=(cj14*sj15*x900);
evalcond[0]=(((sj15*x905))+((x900*x903))+(((-1.0)*r02*x901*x902))+(((-1.0)*r00*x904*x906))+((cj14*r01*sj15*x901)));
evalcond[1]=(((r21*x908))+(((-1.0)*r20*x904*x907))+(((-1.0)*cj15*r21*x906))+(((-1.0)*r22*x900*x902))+(((-1.0)*r20*sj15*x906)));
evalcond[2]=((((-1.0)*r10*x904*x907))+((r11*x908))+(((-1.0)*r10*sj15*x906))+(((-1.0)*cj15*r11*x906))+(((-1.0)*r12*x900*x902)));
evalcond[3]=((-1.0)+(((-1.0)*x903*x906))+(((-1.0)*r00*sj15*x906))+((r01*x908))+(((-1.0)*x904*x905))+(((-1.0)*r02*x900*x902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x909=(cj14*r12);
IkReal x910=(cj15*r20);
IkReal x911=((0.999999999976719)*sj14);
IkReal x912=(r21*sj15);
IkReal x913=(cj15*r10);
IkReal x914=((4.82499999988767e-6)*sj14);
IkReal x915=(cj14*r22);
IkReal x916=(r11*sj15);
if( IKabs(((((-1.0)*x913*x914))+(((1.1941874999722e-11)*x913))+((x914*x916))+((x911*x912))+(((-1.20624999997192e-5)*py))+(((-1.0)*x910*x911))+(((2.47499999994238e-6)*x910))+(((4.82499999988767e-6)*x909))+(((0.999999999976719)*x915))+(((-2.47499999994238e-6)*x912))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x916)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.999999999976719)*x909))+(((2.4999999999418)*py))+(((1.1941874999722e-11)*x910))+((x911*x913))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x910*x914))+(((2.47499999994238e-6)*x916))+((x912*x914))+(((-2.47499999994238e-6)*x913))+(((4.82499999988767e-6)*x915))+(((-1.0)*x911*x916))+(((-1.1941874999722e-11)*x912)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x913*x914))+(((1.1941874999722e-11)*x913))+((x914*x916))+((x911*x912))+(((-1.20624999997192e-5)*py))+(((-1.0)*x910*x911))+(((2.47499999994238e-6)*x910))+(((4.82499999988767e-6)*x909))+(((0.999999999976719)*x915))+(((-2.47499999994238e-6)*x912))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x916))))+IKsqr(((((-0.999999999976719)*x909))+(((2.4999999999418)*py))+(((1.1941874999722e-11)*x910))+((x911*x913))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x910*x914))+(((2.47499999994238e-6)*x916))+((x912*x914))+(((-2.47499999994238e-6)*x913))+(((4.82499999988767e-6)*x915))+(((-1.0)*x911*x916))+(((-1.1941874999722e-11)*x912))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*x913*x914))+(((1.1941874999722e-11)*x913))+((x914*x916))+((x911*x912))+(((-1.20624999997192e-5)*py))+(((-1.0)*x910*x911))+(((2.47499999994238e-6)*x910))+(((4.82499999988767e-6)*x909))+(((0.999999999976719)*x915))+(((-2.47499999994238e-6)*x912))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x916))), ((((-0.999999999976719)*x909))+(((2.4999999999418)*py))+(((1.1941874999722e-11)*x910))+((x911*x913))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x910*x914))+(((2.47499999994238e-6)*x916))+((x912*x914))+(((-2.47499999994238e-6)*x913))+(((4.82499999988767e-6)*x915))+(((-1.0)*x911*x916))+(((-1.1941874999722e-11)*x912))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x917=IKsin(j11);
IkReal x918=IKcos(j11);
IkReal x919=((0.4)*sj13);
IkReal x920=((0.4)*sj14);
IkReal x921=(cj15*r20);
IkReal x922=((0.4)*cj14);
IkReal x923=(r21*sj15);
IkReal x924=(cj15*r10);
IkReal x925=(r11*sj15);
IkReal x926=((9.9e-7)*x925);
IkReal x927=((1.93e-6)*x917);
IkReal x928=((9.9e-7)*x924);
IkReal x929=((0.4)*x918);
IkReal x930=((0.4)*x917);
IkReal x931=((1.93e-6)*x918);
IkReal x932=((9.9e-7)*x923);
IkReal x933=((9.9e-7)*x921);
IkReal x934=(x928+x929);
IkReal x935=(py+x926+x927);
IkReal x936=(x931+x930+x932);
evalcond[0]=(((x920*x924))+(((-1.0)*r12*x922))+(((-1.0)*x920*x925))+x935+(((-1.0)*x934)));
evalcond[1]=(((x920*x923))+((r22*x922))+(((-1.0)*x920*x921))+(((-1.0)*pz))+x933+(((-1.0)*x936)));
evalcond[2]=((((-1.0)*cj15*r21*x919))+((cj13*x921*x922))+((cj13*r22*x920))+(((-1.0)*r20*sj15*x919))+x935+(((-1.0)*cj13*x922*x923))+(((-1.0)*x934)));
evalcond[3]=((((-1.0)*cj13*r12*x920))+((cj13*x922*x925))+((cj15*r11*x919))+((r10*sj15*x919))+pz+x936+(((-1.0)*cj13*x922*x924))+(((-1.0)*x933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x937=(sj11*sj14);
IkReal x938=(r11*sj15);
IkReal x939=((1.0)*cj15);
IkReal x940=(cj14*r12);
IkReal x941=(cj11*sj14);
IkReal x942=(r21*sj15);
IkReal x943=(cj14*r22);
if( IKabs(((((-1.0)*sj11*x943))+((cj11*x940))+((x938*x941))+(((-1.0)*x937*x942))+((cj15*r20*x937))+(((-1.0)*r10*x939*x941)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x937*x938))+((cj11*x943))+(((-1.0)*r10*x937*x939))+((x941*x942))+(((-1.0)*r20*x939*x941))+((sj11*x940)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj11*x943))+((cj11*x940))+((x938*x941))+(((-1.0)*x937*x942))+((cj15*r20*x937))+(((-1.0)*r10*x939*x941))))+IKsqr((((x937*x938))+((cj11*x943))+(((-1.0)*r10*x937*x939))+((x941*x942))+(((-1.0)*r20*x939*x941))+((sj11*x940))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*sj11*x943))+((cj11*x940))+((x938*x941))+(((-1.0)*x937*x942))+((cj15*r20*x937))+(((-1.0)*r10*x939*x941))), (((x937*x938))+((cj11*x943))+(((-1.0)*r10*x937*x939))+((x941*x942))+(((-1.0)*r20*x939*x941))+((sj11*x940))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x944=IKcos(j12);
IkReal x945=IKsin(j12);
IkReal x946=(cj15*r10);
IkReal x947=((0.4)*cj11);
IkReal x948=((1.0)*sj14);
IkReal x949=(r11*sj15);
IkReal x950=((1.0)*cj14);
IkReal x951=(cj15*r20);
IkReal x952=(cj13*cj14);
IkReal x953=(sj13*sj15);
IkReal x954=(cj15*sj13);
IkReal x955=(r21*sj15);
IkReal x956=(cj11*x944);
IkReal x957=(sj11*x944);
IkReal x958=(sj11*x945);
IkReal x959=(cj11*x945);
IkReal x960=((1.0)*x958);
evalcond[0]=((((-1.0)*x948*x949))+((sj14*x946))+(((-1.0)*r12*x950))+x959+x957);
evalcond[1]=(((sj14*x951))+(((-1.0)*r22*x950))+x956+(((-1.0)*x948*x955))+(((-1.0)*x960)));
evalcond[2]=((((-9.9e-7)*x955))+(((-0.4)*x958))+(((-1.0)*pz))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+((x944*x947))+(((9.9e-7)*x951)));
evalcond[3]=(((x945*x947))+(((-1.93e-6)*sj11))+(((-9.9e-7)*x949))+(((-1.0)*py))+(((9.9e-7)*x946))+(((0.4)*x957))+x947);
evalcond[4]=((((-1.0)*cj13*x946*x950))+(((-1.0)*cj13*r12*x948))+((x949*x952))+((r11*x954))+x956+(((-1.0)*x960))+((r10*x953)));
evalcond[5]=(((x952*x955))+(((-1.0)*cj13*r22*x948))+(((-1.0)*x959))+(((-1.0)*x957))+((r21*x954))+((r20*x953))+(((-1.0)*cj13*x950*x951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x961=((1.0)*sj15);
IkReal x962=((1.0)*cj15);
IkReal x963=(((cj14*r12))+(((-1.0)*r10*sj14*x962))+((r11*sj14*sj15)));
j13eval[0]=x963;
j13eval[1]=IKsign(x963);
j13eval[2]=((IKabs(((((-1.0)*r20*x961))+(((-1.0)*r21*x962)))))+(IKabs((((cj14*cj15*r20))+(((-1.0)*cj14*r21*x961))+((r22*sj14))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x964=((1.0)*r11);
IkReal x965=((1.0)*sj15);
IkReal x966=((((-1.0)*cj14*r22))+(((-1.0)*r21*sj14*x965))+((cj15*r20*sj14)));
j13eval[0]=x966;
j13eval[1]=((IKabs((((r12*sj14))+((cj14*cj15*r10))+(((-1.0)*cj14*sj15*x964)))))+(IKabs(((((-1.0)*cj15*x964))+(((-1.0)*r10*x965))))));
j13eval[2]=IKsign(x966);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x967=cj14*cj14;
IkReal x968=cj15*cj15;
IkReal x969=r00*r00;
IkReal x970=r01*r01;
IkReal x971=r02*r02;
IkReal x972=(r02*sj14);
IkReal x973=(cj15*r01);
IkReal x974=((1.0)*r00);
IkReal x975=(cj14*cj15);
IkReal x976=(cj14*r01*sj15);
IkReal x977=((2.0)*r00*sj15);
IkReal x978=((1.0)*x968);
IkReal x979=(x967*x970);
IkReal x980=((((-1.0)*x979))+(((-1.0)*x971))+(((2.0)*x972*x976))+(((-1.0)*x967*x969*x978))+(((-2.0)*r00*x972*x975))+(((-1.0)*x969))+((x968*x979))+((x968*x969))+(((-1.0)*x970*x978))+((x967*x973*x977))+((x967*x971))+(((-1.0)*x973*x977)));
j13eval[0]=x980;
j13eval[1]=((IKabs(((((-1.0)*x973))+(((-1.0)*sj15*x974)))))+(IKabs(((((-1.0)*x972))+(((-1.0)*x974*x975))+x976))));
j13eval[2]=IKsign(x980);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11, j12, j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x981=cj14*cj14;
IkReal x982=cj15*cj15;
IkReal x983=r00*r00;
IkReal x984=r01*r01;
IkReal x985=r02*r02;
IkReal x986=(r02*sj14);
IkReal x987=(cj15*r01);
IkReal x988=((1.0)*r00);
IkReal x989=(cj14*cj15);
IkReal x990=((1.0)*x982);
IkReal x991=(cj14*r01*sj15);
IkReal x992=((2.0)*r00*sj15);
IkReal x993=(x981*x984);
CheckValue<IkReal> x994=IKPowWithIntegerCheck(IKsign((((x981*x985))+(((-1.0)*x993))+(((-1.0)*x983))+(((-1.0)*x985))+(((-2.0)*r00*x986*x989))+(((2.0)*x986*x991))+((x982*x983))+(((-1.0)*x984*x990))+(((-1.0)*x981*x983*x990))+((x981*x987*x992))+(((-1.0)*x987*x992))+((x982*x993)))),-1);
if(!x994.valid){
continue;
}
CheckValue<IkReal> x995 = IKatan2WithCheck(IkReal(((((-1.0)*x986))+(((-1.0)*x988*x989))+x991)),IkReal(((((-1.0)*x987))+(((-1.0)*sj15*x988)))),IKFAST_ATAN2_MAGTHRESH);
if(!x995.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x994.value)))+(x995.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x996=IKsin(j13);
IkReal x997=IKcos(j13);
IkReal x998=((1.0)*sj14);
IkReal x999=(cj15*r01);
IkReal x1000=(cj14*cj15);
IkReal x1001=(r00*x996);
IkReal x1002=((1.0)*x997);
IkReal x1003=((1.0)*x996);
IkReal x1004=(cj14*sj15*x996);
evalcond[0]=(((sj15*x1001))+((cj14*r01*sj15*x997))+((x996*x999))+(((-1.0)*r00*x1000*x1002))+(((-1.0)*r02*x997*x998)));
evalcond[1]=((((-1.0)*r20*sj15*x1002))+((r21*x1004))+(((-1.0)*cj15*r21*x1002))+(((-1.0)*r22*x996*x998))+(((-1.0)*r20*x1000*x1003)));
evalcond[2]=((((-1.0)*r10*x1000*x1003))+(((-1.0)*cj15*r11*x1002))+((r11*x1004))+(((-1.0)*r12*x996*x998))+(((-1.0)*r10*sj15*x1002)));
evalcond[3]=((1.0)+((r01*x1004))+(((-1.0)*x1002*x999))+(((-1.0)*r02*x996*x998))+(((-1.0)*r00*sj15*x1002))+(((-1.0)*x1000*x1001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1005=(cj14*r12);
IkReal x1006=(cj15*r20);
IkReal x1007=((0.999999999976719)*sj14);
IkReal x1008=(r21*sj15);
IkReal x1009=(cj15*r10);
IkReal x1010=((4.82499999988767e-6)*sj14);
IkReal x1011=(cj14*r22);
IkReal x1012=(r11*sj15);
if( IKabs(((((-1.0)*x1010*x1012))+((x1009*x1010))+(((-4.82499999988767e-6)*x1005))+(((-1.0)*x1006*x1007))+(((1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x1012))+(((-2.47499999994238e-6)*x1008))+((x1007*x1008))+(((-1.1941874999722e-11)*x1009))+(((2.47499999994238e-6)*x1006))+(((-2.4999999999418)*pz))+(((0.999999999976719)*x1011)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((4.82499999988767e-6)*x1011))+(((0.999999999976719)*x1005))+(((-1.0)*x1006*x1010))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x1007*x1009))+(((1.1941874999722e-11)*x1006))+(((-1.1941874999722e-11)*x1008))+((x1007*x1012))+((x1008*x1010))+(((2.47499999994238e-6)*x1009))+(((-2.4999999999418)*py))+(((-2.47499999994238e-6)*x1012)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1010*x1012))+((x1009*x1010))+(((-4.82499999988767e-6)*x1005))+(((-1.0)*x1006*x1007))+(((1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x1012))+(((-2.47499999994238e-6)*x1008))+((x1007*x1008))+(((-1.1941874999722e-11)*x1009))+(((2.47499999994238e-6)*x1006))+(((-2.4999999999418)*pz))+(((0.999999999976719)*x1011))))+IKsqr(((((4.82499999988767e-6)*x1011))+(((0.999999999976719)*x1005))+(((-1.0)*x1006*x1010))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x1007*x1009))+(((1.1941874999722e-11)*x1006))+(((-1.1941874999722e-11)*x1008))+((x1007*x1012))+((x1008*x1010))+(((2.47499999994238e-6)*x1009))+(((-2.4999999999418)*py))+(((-2.47499999994238e-6)*x1012))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*x1010*x1012))+((x1009*x1010))+(((-4.82499999988767e-6)*x1005))+(((-1.0)*x1006*x1007))+(((1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x1012))+(((-2.47499999994238e-6)*x1008))+((x1007*x1008))+(((-1.1941874999722e-11)*x1009))+(((2.47499999994238e-6)*x1006))+(((-2.4999999999418)*pz))+(((0.999999999976719)*x1011))), ((((4.82499999988767e-6)*x1011))+(((0.999999999976719)*x1005))+(((-1.0)*x1006*x1010))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x1007*x1009))+(((1.1941874999722e-11)*x1006))+(((-1.1941874999722e-11)*x1008))+((x1007*x1012))+((x1008*x1010))+(((2.47499999994238e-6)*x1009))+(((-2.4999999999418)*py))+(((-2.47499999994238e-6)*x1012))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1013=IKsin(j11);
IkReal x1014=IKcos(j11);
IkReal x1015=((1.0)*pz);
IkReal x1016=((0.4)*sj14);
IkReal x1017=(cj15*r20);
IkReal x1018=((0.4)*cj14);
IkReal x1019=(r21*sj15);
IkReal x1020=(cj15*r10);
IkReal x1021=(r11*sj15);
IkReal x1022=((9.9e-7)*x1021);
IkReal x1023=((0.4)*x1014);
IkReal x1024=((9.9e-7)*x1020);
IkReal x1025=((1.93e-6)*x1013);
IkReal x1026=((9.9e-7)*x1017);
IkReal x1027=((0.4)*x1013);
IkReal x1028=((1.93e-6)*x1014);
IkReal x1029=((9.9e-7)*x1019);
IkReal x1030=((0.4)*sj13*sj15);
IkReal x1031=((0.4)*cj15*sj13);
IkReal x1032=(x1025+x1024);
IkReal x1033=(x1023+x1022);
IkReal x1034=(x1015+x1027+x1029+x1028);
evalcond[0]=((((-1.0)*x1033))+x1032+(((-1.0)*py))+((r12*x1018))+(((-1.0)*x1016*x1020))+((x1016*x1021)));
evalcond[1]=(((x1016*x1019))+(((-1.0)*x1034))+x1026+((r22*x1018))+(((-1.0)*x1016*x1017)));
evalcond[2]=(((cj13*x1018*x1019))+(((-1.0)*x1032))+x1033+(((-1.0)*cj13*r22*x1016))+((r21*x1031))+(((-1.0)*cj13*x1017*x1018))+py+((r20*x1030)));
evalcond[3]=(((r10*x1030))+(((-1.0)*cj13*x1018*x1020))+(((-1.0)*x1034))+x1026+(((-1.0)*cj13*r12*x1016))+((r11*x1031))+((cj13*x1018*x1021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1035=((1.0)*cj11);
IkReal x1036=(sj14*sj15);
IkReal x1037=(cj14*r12);
IkReal x1038=((1.0)*sj11);
IkReal x1039=(cj14*r22);
IkReal x1040=(cj15*r20*sj14);
IkReal x1041=(cj15*r10*sj14);
if( IKabs(((((-1.0)*r11*x1035*x1036))+((cj11*x1041))+(((-1.0)*x1035*x1037))+(((-1.0)*x1038*x1039))+(((-1.0)*r21*x1036*x1038))+((sj11*x1040)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*r21*x1036))+(((-1.0)*x1037*x1038))+(((-1.0)*r11*x1036*x1038))+((cj11*x1039))+(((-1.0)*x1035*x1040))+((sj11*x1041)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1035*x1036))+((cj11*x1041))+(((-1.0)*x1035*x1037))+(((-1.0)*x1038*x1039))+(((-1.0)*r21*x1036*x1038))+((sj11*x1040))))+IKsqr((((cj11*r21*x1036))+(((-1.0)*x1037*x1038))+(((-1.0)*r11*x1036*x1038))+((cj11*x1039))+(((-1.0)*x1035*x1040))+((sj11*x1041))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r11*x1035*x1036))+((cj11*x1041))+(((-1.0)*x1035*x1037))+(((-1.0)*x1038*x1039))+(((-1.0)*r21*x1036*x1038))+((sj11*x1040))), (((cj11*r21*x1036))+(((-1.0)*x1037*x1038))+(((-1.0)*r11*x1036*x1038))+((cj11*x1039))+(((-1.0)*x1035*x1040))+((sj11*x1041))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1042=IKsin(j12);
IkReal x1043=IKcos(j12);
IkReal x1044=(cj15*r10);
IkReal x1045=((0.4)*cj11);
IkReal x1046=((1.0)*sj14);
IkReal x1047=(r11*sj15);
IkReal x1048=((1.0)*cj14);
IkReal x1049=((0.4)*sj11);
IkReal x1050=(cj15*r20);
IkReal x1051=(cj13*cj14);
IkReal x1052=(r21*sj15);
IkReal x1053=(sj13*sj15);
IkReal x1054=(cj15*sj13);
IkReal x1055=(sj11*x1042);
IkReal x1056=(cj11*x1043);
IkReal x1057=((1.0)*cj11*x1042);
IkReal x1058=((1.0)*sj11*x1043);
IkReal x1059=(x1057+x1058);
evalcond[0]=((((-1.0)*x1046*x1052))+x1056+(((-1.0)*r22*x1048))+(((-1.0)*x1055))+((sj14*x1050)));
evalcond[1]=((((-1.0)*x1059))+(((-1.0)*x1046*x1047))+(((-1.0)*r12*x1048))+((sj14*x1044)));
evalcond[2]=(((x1043*x1045))+(((9.9e-7)*x1050))+(((-1.0)*pz))+(((-1.0)*x1042*x1049))+(((-1.93e-6)*cj11))+(((-1.0)*x1049))+(((-9.9e-7)*x1052)));
evalcond[3]=((((1.93e-6)*sj11))+(((-1.0)*x1043*x1049))+(((9.9e-7)*x1044))+(((-1.0)*py))+(((-1.0)*x1042*x1045))+(((-9.9e-7)*x1047))+(((-1.0)*x1045)));
evalcond[4]=(((r11*x1054))+x1055+(((-1.0)*cj13*r12*x1046))+((r10*x1053))+(((-1.0)*x1056))+(((-1.0)*cj13*x1044*x1048))+((x1047*x1051)));
evalcond[5]=((((-1.0)*x1059))+(((-1.0)*cj13*x1048*x1050))+((x1051*x1052))+((r20*x1053))+((r21*x1054))+(((-1.0)*cj13*r22*x1046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1060=((1.0)*r11);
IkReal x1061=((1.0)*sj15);
CheckValue<IkReal> x1062 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1061))+(((-1.0)*cj15*x1060)))),IkReal((((r12*sj14))+((cj14*cj15*r10))+(((-1.0)*cj14*sj15*x1060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1062.valid){
continue;
}
CheckValue<IkReal> x1063=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj14*r22))+(((-1.0)*r21*sj14*x1061))+((cj15*r20*sj14)))),-1);
if(!x1063.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x1062.value)+(((1.5707963267949)*(x1063.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x1064=IKsin(j13);
IkReal x1065=IKcos(j13);
IkReal x1066=((1.0)*sj14);
IkReal x1067=(cj15*r01);
IkReal x1068=(cj14*cj15);
IkReal x1069=(r00*x1064);
IkReal x1070=((1.0)*x1065);
IkReal x1071=((1.0)*x1064);
IkReal x1072=(cj14*sj15*x1064);
evalcond[0]=((((-1.0)*r02*x1065*x1066))+((cj14*r01*sj15*x1065))+(((-1.0)*r00*x1068*x1070))+((x1064*x1067))+((sj15*x1069)));
evalcond[1]=((((-1.0)*r20*x1068*x1071))+(((-1.0)*r22*x1064*x1066))+(((-1.0)*r20*sj15*x1070))+((r21*x1072))+(((-1.0)*cj15*r21*x1070)));
evalcond[2]=((((-1.0)*r12*x1064*x1066))+(((-1.0)*cj15*r11*x1070))+(((-1.0)*r10*x1068*x1071))+(((-1.0)*r10*sj15*x1070))+((r11*x1072)));
evalcond[3]=((1.0)+(((-1.0)*r02*x1064*x1066))+(((-1.0)*r00*sj15*x1070))+(((-1.0)*x1067*x1070))+(((-1.0)*x1068*x1069))+((r01*x1072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1073=(cj14*r12);
IkReal x1074=(cj15*r20);
IkReal x1075=((0.999999999976719)*sj14);
IkReal x1076=(r21*sj15);
IkReal x1077=(cj15*r10);
IkReal x1078=((4.82499999988767e-6)*sj14);
IkReal x1079=(cj14*r22);
IkReal x1080=(r11*sj15);
if( IKabs((((x1077*x1078))+(((2.47499999994238e-6)*x1074))+(((-1.0)*x1074*x1075))+(((1.1941874999722e-11)*x1080))+(((-1.0)*x1078*x1080))+(((0.999999999976719)*x1079))+((x1075*x1076))+(((-1.1941874999722e-11)*x1077))+(((-2.47499999994238e-6)*x1076))+(((1.20624999997192e-5)*py))+(((-4.82499999988767e-6)*x1073))+(((-2.4999999999418)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1075*x1077))+(((2.47499999994238e-6)*x1077))+(((-1.0)*x1074*x1078))+(((-2.47499999994238e-6)*x1080))+(((0.999999999976719)*x1073))+((x1075*x1080))+(((-1.1941874999722e-11)*x1076))+(((-1.20624999997192e-5)*pz))+(((4.82499999988767e-6)*x1079))+((x1076*x1078))+(((-2.4999999999418)*py))+(((1.1941874999722e-11)*x1074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1077*x1078))+(((2.47499999994238e-6)*x1074))+(((-1.0)*x1074*x1075))+(((1.1941874999722e-11)*x1080))+(((-1.0)*x1078*x1080))+(((0.999999999976719)*x1079))+((x1075*x1076))+(((-1.1941874999722e-11)*x1077))+(((-2.47499999994238e-6)*x1076))+(((1.20624999997192e-5)*py))+(((-4.82499999988767e-6)*x1073))+(((-2.4999999999418)*pz))))+IKsqr(((((-1.0)*x1075*x1077))+(((2.47499999994238e-6)*x1077))+(((-1.0)*x1074*x1078))+(((-2.47499999994238e-6)*x1080))+(((0.999999999976719)*x1073))+((x1075*x1080))+(((-1.1941874999722e-11)*x1076))+(((-1.20624999997192e-5)*pz))+(((4.82499999988767e-6)*x1079))+((x1076*x1078))+(((-2.4999999999418)*py))+(((1.1941874999722e-11)*x1074))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((((x1077*x1078))+(((2.47499999994238e-6)*x1074))+(((-1.0)*x1074*x1075))+(((1.1941874999722e-11)*x1080))+(((-1.0)*x1078*x1080))+(((0.999999999976719)*x1079))+((x1075*x1076))+(((-1.1941874999722e-11)*x1077))+(((-2.47499999994238e-6)*x1076))+(((1.20624999997192e-5)*py))+(((-4.82499999988767e-6)*x1073))+(((-2.4999999999418)*pz))), ((((-1.0)*x1075*x1077))+(((2.47499999994238e-6)*x1077))+(((-1.0)*x1074*x1078))+(((-2.47499999994238e-6)*x1080))+(((0.999999999976719)*x1073))+((x1075*x1080))+(((-1.1941874999722e-11)*x1076))+(((-1.20624999997192e-5)*pz))+(((4.82499999988767e-6)*x1079))+((x1076*x1078))+(((-2.4999999999418)*py))+(((1.1941874999722e-11)*x1074))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1081=IKsin(j11);
IkReal x1082=IKcos(j11);
IkReal x1083=((1.0)*pz);
IkReal x1084=((0.4)*sj14);
IkReal x1085=(cj15*r20);
IkReal x1086=((0.4)*cj14);
IkReal x1087=(r21*sj15);
IkReal x1088=(cj15*r10);
IkReal x1089=(r11*sj15);
IkReal x1090=((9.9e-7)*x1089);
IkReal x1091=((0.4)*x1082);
IkReal x1092=((9.9e-7)*x1088);
IkReal x1093=((1.93e-6)*x1081);
IkReal x1094=((9.9e-7)*x1085);
IkReal x1095=((0.4)*x1081);
IkReal x1096=((1.93e-6)*x1082);
IkReal x1097=((9.9e-7)*x1087);
IkReal x1098=((0.4)*sj13*sj15);
IkReal x1099=((0.4)*cj15*sj13);
IkReal x1100=(x1092+x1093);
IkReal x1101=(x1090+x1091);
IkReal x1102=(x1095+x1096+x1097+x1083);
evalcond[0]=(x1100+((r12*x1086))+(((-1.0)*py))+(((-1.0)*x1084*x1088))+(((-1.0)*x1101))+((x1084*x1089)));
evalcond[1]=(x1094+((r22*x1086))+(((-1.0)*x1084*x1085))+(((-1.0)*x1102))+((x1084*x1087)));
evalcond[2]=(x1101+(((-1.0)*cj13*r22*x1084))+((r21*x1099))+(((-1.0)*cj13*x1085*x1086))+py+((cj13*x1086*x1087))+(((-1.0)*x1100))+((r20*x1098)));
evalcond[3]=(x1094+((r10*x1098))+((r11*x1099))+(((-1.0)*cj13*r12*x1084))+((cj13*x1086*x1089))+(((-1.0)*x1102))+(((-1.0)*cj13*x1086*x1088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1103=((1.0)*cj11);
IkReal x1104=(sj14*sj15);
IkReal x1105=(cj14*r12);
IkReal x1106=((1.0)*sj11);
IkReal x1107=(cj14*r22);
IkReal x1108=(cj15*r20*sj14);
IkReal x1109=(cj15*r10*sj14);
if( IKabs(((((-1.0)*x1103*x1105))+(((-1.0)*r11*x1103*x1104))+(((-1.0)*r21*x1104*x1106))+(((-1.0)*x1106*x1107))+((cj11*x1109))+((sj11*x1108)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1103*x1108))+(((-1.0)*r11*x1104*x1106))+((cj11*r21*x1104))+((cj11*x1107))+((sj11*x1109))+(((-1.0)*x1105*x1106)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1103*x1105))+(((-1.0)*r11*x1103*x1104))+(((-1.0)*r21*x1104*x1106))+(((-1.0)*x1106*x1107))+((cj11*x1109))+((sj11*x1108))))+IKsqr(((((-1.0)*x1103*x1108))+(((-1.0)*r11*x1104*x1106))+((cj11*r21*x1104))+((cj11*x1107))+((sj11*x1109))+(((-1.0)*x1105*x1106))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*x1103*x1105))+(((-1.0)*r11*x1103*x1104))+(((-1.0)*r21*x1104*x1106))+(((-1.0)*x1106*x1107))+((cj11*x1109))+((sj11*x1108))), ((((-1.0)*x1103*x1108))+(((-1.0)*r11*x1104*x1106))+((cj11*r21*x1104))+((cj11*x1107))+((sj11*x1109))+(((-1.0)*x1105*x1106))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1110=IKsin(j12);
IkReal x1111=IKcos(j12);
IkReal x1112=(cj15*r10);
IkReal x1113=((0.4)*cj11);
IkReal x1114=((1.0)*sj14);
IkReal x1115=(r11*sj15);
IkReal x1116=((1.0)*cj14);
IkReal x1117=((0.4)*sj11);
IkReal x1118=(cj15*r20);
IkReal x1119=(cj13*cj14);
IkReal x1120=(r21*sj15);
IkReal x1121=(sj13*sj15);
IkReal x1122=(cj15*sj13);
IkReal x1123=(sj11*x1110);
IkReal x1124=(cj11*x1111);
IkReal x1125=((1.0)*cj11*x1110);
IkReal x1126=((1.0)*sj11*x1111);
IkReal x1127=(x1125+x1126);
evalcond[0]=(x1124+(((-1.0)*x1114*x1120))+(((-1.0)*r22*x1116))+(((-1.0)*x1123))+((sj14*x1118)));
evalcond[1]=((((-1.0)*x1114*x1115))+(((-1.0)*r12*x1116))+(((-1.0)*x1127))+((sj14*x1112)));
evalcond[2]=((((9.9e-7)*x1118))+((x1111*x1113))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((-9.9e-7)*x1120))+(((-1.0)*x1110*x1117))+(((-1.0)*x1117)));
evalcond[3]=((((9.9e-7)*x1112))+(((1.93e-6)*sj11))+(((-1.0)*py))+(((-9.9e-7)*x1115))+(((-1.0)*x1110*x1113))+(((-1.0)*x1113))+(((-1.0)*x1111*x1117)));
evalcond[4]=(x1123+((r10*x1121))+(((-1.0)*cj13*r12*x1114))+(((-1.0)*cj13*x1112*x1116))+(((-1.0)*x1124))+((r11*x1122))+((x1115*x1119)));
evalcond[5]=(((x1119*x1120))+(((-1.0)*cj13*r22*x1114))+(((-1.0)*cj13*x1116*x1118))+((r21*x1122))+(((-1.0)*x1127))+((r20*x1121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1128=((1.0)*sj15);
IkReal x1129=((1.0)*cj15);
CheckValue<IkReal> x1130 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x1128))+(((-1.0)*r21*x1129)))),IkReal(((((-1.0)*cj14*r21*x1128))+((cj14*cj15*r20))+((r22*sj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1130.valid){
continue;
}
CheckValue<IkReal> x1131=IKPowWithIntegerCheck(IKsign((((cj14*r12))+((r11*sj14*sj15))+(((-1.0)*r10*sj14*x1129)))),-1);
if(!x1131.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x1130.value)+(((1.5707963267949)*(x1131.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x1132=IKsin(j13);
IkReal x1133=IKcos(j13);
IkReal x1134=((1.0)*sj14);
IkReal x1135=(cj15*r01);
IkReal x1136=(cj14*cj15);
IkReal x1137=(r00*x1132);
IkReal x1138=((1.0)*x1133);
IkReal x1139=((1.0)*x1132);
IkReal x1140=(cj14*sj15*x1132);
evalcond[0]=(((cj14*r01*sj15*x1133))+((sj15*x1137))+(((-1.0)*r02*x1133*x1134))+(((-1.0)*r00*x1136*x1138))+((x1132*x1135)));
evalcond[1]=((((-1.0)*r22*x1132*x1134))+(((-1.0)*cj15*r21*x1138))+(((-1.0)*r20*x1136*x1139))+((r21*x1140))+(((-1.0)*r20*sj15*x1138)));
evalcond[2]=(((r11*x1140))+(((-1.0)*r10*sj15*x1138))+(((-1.0)*r12*x1132*x1134))+(((-1.0)*r10*x1136*x1139))+(((-1.0)*cj15*r11*x1138)));
evalcond[3]=((1.0)+(((-1.0)*r00*sj15*x1138))+(((-1.0)*r02*x1132*x1134))+(((-1.0)*x1135*x1138))+((r01*x1140))+(((-1.0)*x1136*x1137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1141=(cj14*r12);
IkReal x1142=(cj15*r20);
IkReal x1143=((0.999999999976719)*sj14);
IkReal x1144=(r21*sj15);
IkReal x1145=(cj15*r10);
IkReal x1146=((4.82499999988767e-6)*sj14);
IkReal x1147=(cj14*r22);
IkReal x1148=(r11*sj15);
if( IKabs((((x1145*x1146))+((x1143*x1144))+(((1.1941874999722e-11)*x1148))+(((2.47499999994238e-6)*x1142))+(((-1.0)*x1146*x1148))+(((1.20624999997192e-5)*py))+(((-4.82499999988767e-6)*x1141))+(((-2.47499999994238e-6)*x1144))+(((-1.1941874999722e-11)*x1145))+(((-2.4999999999418)*pz))+(((-1.0)*x1142*x1143))+(((0.999999999976719)*x1147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1143*x1148))+(((-1.0)*x1143*x1145))+(((1.1941874999722e-11)*x1142))+(((2.47499999994238e-6)*x1145))+(((4.82499999988767e-6)*x1147))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x1148))+(((-1.1941874999722e-11)*x1144))+((x1144*x1146))+(((-2.4999999999418)*py))+(((-1.0)*x1142*x1146))+(((0.999999999976719)*x1141)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1145*x1146))+((x1143*x1144))+(((1.1941874999722e-11)*x1148))+(((2.47499999994238e-6)*x1142))+(((-1.0)*x1146*x1148))+(((1.20624999997192e-5)*py))+(((-4.82499999988767e-6)*x1141))+(((-2.47499999994238e-6)*x1144))+(((-1.1941874999722e-11)*x1145))+(((-2.4999999999418)*pz))+(((-1.0)*x1142*x1143))+(((0.999999999976719)*x1147))))+IKsqr((((x1143*x1148))+(((-1.0)*x1143*x1145))+(((1.1941874999722e-11)*x1142))+(((2.47499999994238e-6)*x1145))+(((4.82499999988767e-6)*x1147))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x1148))+(((-1.1941874999722e-11)*x1144))+((x1144*x1146))+(((-2.4999999999418)*py))+(((-1.0)*x1142*x1146))+(((0.999999999976719)*x1141))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((((x1145*x1146))+((x1143*x1144))+(((1.1941874999722e-11)*x1148))+(((2.47499999994238e-6)*x1142))+(((-1.0)*x1146*x1148))+(((1.20624999997192e-5)*py))+(((-4.82499999988767e-6)*x1141))+(((-2.47499999994238e-6)*x1144))+(((-1.1941874999722e-11)*x1145))+(((-2.4999999999418)*pz))+(((-1.0)*x1142*x1143))+(((0.999999999976719)*x1147))), (((x1143*x1148))+(((-1.0)*x1143*x1145))+(((1.1941874999722e-11)*x1142))+(((2.47499999994238e-6)*x1145))+(((4.82499999988767e-6)*x1147))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x1148))+(((-1.1941874999722e-11)*x1144))+((x1144*x1146))+(((-2.4999999999418)*py))+(((-1.0)*x1142*x1146))+(((0.999999999976719)*x1141))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1149=IKsin(j11);
IkReal x1150=IKcos(j11);
IkReal x1151=((1.0)*pz);
IkReal x1152=((0.4)*sj14);
IkReal x1153=(cj15*r20);
IkReal x1154=((0.4)*cj14);
IkReal x1155=(r21*sj15);
IkReal x1156=(cj15*r10);
IkReal x1157=(r11*sj15);
IkReal x1158=((9.9e-7)*x1157);
IkReal x1159=((0.4)*x1150);
IkReal x1160=((9.9e-7)*x1156);
IkReal x1161=((1.93e-6)*x1149);
IkReal x1162=((9.9e-7)*x1153);
IkReal x1163=((0.4)*x1149);
IkReal x1164=((1.93e-6)*x1150);
IkReal x1165=((9.9e-7)*x1155);
IkReal x1166=((0.4)*sj13*sj15);
IkReal x1167=((0.4)*cj15*sj13);
IkReal x1168=(x1160+x1161);
IkReal x1169=(x1159+x1158);
IkReal x1170=(x1151+x1164+x1165+x1163);
evalcond[0]=(x1168+((r12*x1154))+((x1152*x1157))+(((-1.0)*py))+(((-1.0)*x1152*x1156))+(((-1.0)*x1169)));
evalcond[1]=(x1162+((r22*x1154))+((x1152*x1155))+(((-1.0)*x1152*x1153))+(((-1.0)*x1170)));
evalcond[2]=((((-1.0)*cj13*r22*x1152))+x1169+((cj13*x1154*x1155))+(((-1.0)*cj13*x1153*x1154))+((r20*x1166))+((r21*x1167))+py+(((-1.0)*x1168)));
evalcond[3]=(x1162+((cj13*x1154*x1157))+((r10*x1166))+((r11*x1167))+(((-1.0)*x1170))+(((-1.0)*cj13*x1154*x1156))+(((-1.0)*cj13*r12*x1152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1171=((1.0)*cj11);
IkReal x1172=(sj14*sj15);
IkReal x1173=(cj14*r12);
IkReal x1174=((1.0)*sj11);
IkReal x1175=(cj14*r22);
IkReal x1176=(cj15*r20*sj14);
IkReal x1177=(cj15*r10*sj14);
if( IKabs(((((-1.0)*r21*x1172*x1174))+((sj11*x1176))+((cj11*x1177))+(((-1.0)*x1171*x1173))+(((-1.0)*r11*x1171*x1172))+(((-1.0)*x1174*x1175)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1172*x1174))+(((-1.0)*x1173*x1174))+((sj11*x1177))+((cj11*x1175))+(((-1.0)*x1171*x1176))+((cj11*r21*x1172)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x1172*x1174))+((sj11*x1176))+((cj11*x1177))+(((-1.0)*x1171*x1173))+(((-1.0)*r11*x1171*x1172))+(((-1.0)*x1174*x1175))))+IKsqr(((((-1.0)*r11*x1172*x1174))+(((-1.0)*x1173*x1174))+((sj11*x1177))+((cj11*x1175))+(((-1.0)*x1171*x1176))+((cj11*r21*x1172))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r21*x1172*x1174))+((sj11*x1176))+((cj11*x1177))+(((-1.0)*x1171*x1173))+(((-1.0)*r11*x1171*x1172))+(((-1.0)*x1174*x1175))), ((((-1.0)*r11*x1172*x1174))+(((-1.0)*x1173*x1174))+((sj11*x1177))+((cj11*x1175))+(((-1.0)*x1171*x1176))+((cj11*r21*x1172))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1178=IKsin(j12);
IkReal x1179=IKcos(j12);
IkReal x1180=(cj15*r10);
IkReal x1181=((0.4)*cj11);
IkReal x1182=((1.0)*sj14);
IkReal x1183=(r11*sj15);
IkReal x1184=((1.0)*cj14);
IkReal x1185=((0.4)*sj11);
IkReal x1186=(cj15*r20);
IkReal x1187=(cj13*cj14);
IkReal x1188=(r21*sj15);
IkReal x1189=(sj13*sj15);
IkReal x1190=(cj15*sj13);
IkReal x1191=(sj11*x1178);
IkReal x1192=(cj11*x1179);
IkReal x1193=((1.0)*cj11*x1178);
IkReal x1194=((1.0)*sj11*x1179);
IkReal x1195=(x1193+x1194);
evalcond[0]=(x1192+(((-1.0)*r22*x1184))+((sj14*x1186))+(((-1.0)*x1182*x1188))+(((-1.0)*x1191)));
evalcond[1]=((((-1.0)*x1195))+((sj14*x1180))+(((-1.0)*x1182*x1183))+(((-1.0)*r12*x1184)));
evalcond[2]=(((x1179*x1181))+(((-1.0)*x1178*x1185))+(((-1.0)*pz))+(((-1.0)*x1185))+(((9.9e-7)*x1186))+(((-9.9e-7)*x1188))+(((-1.93e-6)*cj11)));
evalcond[3]=((((1.93e-6)*sj11))+(((-1.0)*x1179*x1185))+(((-1.0)*x1178*x1181))+(((-1.0)*py))+(((-1.0)*x1181))+(((9.9e-7)*x1180))+(((-9.9e-7)*x1183)));
evalcond[4]=(x1191+((x1183*x1187))+((r10*x1189))+(((-1.0)*cj13*r12*x1182))+(((-1.0)*cj13*x1180*x1184))+((r11*x1190))+(((-1.0)*x1192)));
evalcond[5]=(((x1187*x1188))+(((-1.0)*cj13*x1184*x1186))+(((-1.0)*cj13*r22*x1182))+(((-1.0)*x1195))+((r21*x1190))+((r20*x1189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11, j12, j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1196=(cj14*sj10);
IkReal x1197=((1.0)*sj15);
IkReal x1198=(cj10*r01);
IkReal x1199=((1.0)*cj15);
IkReal x1200=(cj10*r00);
CheckValue<IkReal> x1201=IKPowWithIntegerCheck(IKsign((((cj14*r22))+(((-1.0)*r20*sj14*x1199))+((r21*sj14*sj15)))),-1);
if(!x1201.valid){
continue;
}
CheckValue<IkReal> x1202 = IKatan2WithCheck(IkReal(((((-1.0)*x1198*x1199))+(((-1.0)*r11*sj10*x1199))+(((-1.0)*r10*sj10*x1197))+(((-1.0)*x1197*x1200)))),IkReal((((r12*sj10*sj14))+((cj10*r02*sj14))+((cj14*cj15*x1200))+(((-1.0)*cj14*x1197*x1198))+((cj15*r10*x1196))+(((-1.0)*r11*x1196*x1197)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1202.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1201.value)))+(x1202.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[3];
IkReal x1203=IKsin(j13);
IkReal x1204=IKcos(j13);
IkReal x1205=((1.0)*r20);
IkReal x1206=((1.0)*cj15);
IkReal x1207=(cj14*x1203);
IkReal x1208=(sj15*x1204);
IkReal x1209=((1.0)*sj14*x1203);
evalcond[0]=(((r21*sj15*x1207))+(((-1.0)*r21*x1204*x1206))+(((-1.0)*r22*x1209))+(((-1.0)*x1205*x1208))+(((-1.0)*cj15*x1205*x1207)));
evalcond[1]=((((-1.0)*r10*x1206*x1207))+(((-1.0)*r10*x1208))+(((-1.0)*r11*x1204*x1206))+cj10+(((-1.0)*r12*x1209))+((r11*sj15*x1207)));
evalcond[2]=((((-1.0)*r00*x1206*x1207))+(((-1.0)*r00*x1208))+(((-1.0)*r01*x1204*x1206))+(((-1.0)*r02*x1209))+(((-1.0)*sj10))+((r01*sj15*x1207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[2];
IkReal x1210=sj10*sj10;
j11eval[0]=x1210;
j11eval[1]=IKsign(x1210);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x1211=cj10*cj10;
j11eval[0]=x1211;
j11eval[1]=IKsign(x1211);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
j11eval[0]=sj10;
j11eval[1]=IKsign(sj10);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1212=(cj15*r20);
IkReal x1213=((0.999999999976719)*sj14);
IkReal x1214=(cj15*r00);
IkReal x1215=(r21*sj15);
IkReal x1216=(cj14*r22);
IkReal x1217=((4.82499999988767e-6)*sj14);
IkReal x1218=(r01*sj15);
IkReal x1219=(cj14*r02);
if( IKabs((((x1213*x1215))+(((-1.1941874999722e-11)*x1218))+(((-1.0)*x1214*x1217))+(((4.82499999988767e-6)*x1219))+(((-1.0)*x1212*x1213))+(((-1.20624999997192e-5)*px))+(((-2.47499999994238e-6)*x1215))+(((0.999999999976719)*x1216))+((x1217*x1218))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x1212))+(((1.1941874999722e-11)*x1214)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1213*x1214))+(((2.4999999999418)*px))+(((-1.1941874999722e-11)*x1215))+(((4.82499999988767e-6)*x1216))+(((-1.0)*x1212*x1217))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x1214))+(((-1.0)*x1213*x1218))+(((-0.999999999976719)*x1219))+(((2.47499999994238e-6)*x1218))+(((1.1941874999722e-11)*x1212))+((x1215*x1217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1213*x1215))+(((-1.1941874999722e-11)*x1218))+(((-1.0)*x1214*x1217))+(((4.82499999988767e-6)*x1219))+(((-1.0)*x1212*x1213))+(((-1.20624999997192e-5)*px))+(((-2.47499999994238e-6)*x1215))+(((0.999999999976719)*x1216))+((x1217*x1218))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x1212))+(((1.1941874999722e-11)*x1214))))+IKsqr((((x1213*x1214))+(((2.4999999999418)*px))+(((-1.1941874999722e-11)*x1215))+(((4.82499999988767e-6)*x1216))+(((-1.0)*x1212*x1217))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x1214))+(((-1.0)*x1213*x1218))+(((-0.999999999976719)*x1219))+(((2.47499999994238e-6)*x1218))+(((1.1941874999722e-11)*x1212))+((x1215*x1217))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((((x1213*x1215))+(((-1.1941874999722e-11)*x1218))+(((-1.0)*x1214*x1217))+(((4.82499999988767e-6)*x1219))+(((-1.0)*x1212*x1213))+(((-1.20624999997192e-5)*px))+(((-2.47499999994238e-6)*x1215))+(((0.999999999976719)*x1216))+((x1217*x1218))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x1212))+(((1.1941874999722e-11)*x1214))), (((x1213*x1214))+(((2.4999999999418)*px))+(((-1.1941874999722e-11)*x1215))+(((4.82499999988767e-6)*x1216))+(((-1.0)*x1212*x1217))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x1214))+(((-1.0)*x1213*x1218))+(((-0.999999999976719)*x1219))+(((2.47499999994238e-6)*x1218))+(((1.1941874999722e-11)*x1212))+((x1215*x1217))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1220=IKsin(j11);
IkReal x1221=IKcos(j11);
IkReal x1222=((0.4)*sj14);
IkReal x1223=(cj15*r20);
IkReal x1224=(r01*sj15);
IkReal x1225=((0.4)*sj13);
IkReal x1226=(r21*sj15);
IkReal x1227=((0.4)*cj14);
IkReal x1228=(cj15*r00);
IkReal x1229=((9.9e-7)*x1224);
IkReal x1230=((1.93e-6)*x1220);
IkReal x1231=((9.9e-7)*x1228);
IkReal x1232=((0.4)*x1221);
IkReal x1233=((0.4)*x1220);
IkReal x1234=((1.93e-6)*x1221);
IkReal x1235=((9.9e-7)*x1226);
IkReal x1236=((9.9e-7)*x1223);
IkReal x1237=(x1231+x1232);
IkReal x1238=(x1230+x1229+px);
IkReal x1239=(x1234+x1235+x1233);
evalcond[0]=(x1238+(((-1.0)*x1237))+(((-1.0)*x1222*x1224))+((x1222*x1228))+(((-1.0)*r02*x1227)));
evalcond[1]=(x1236+(((-1.0)*x1239))+(((-1.0)*x1222*x1223))+(((-1.0)*pz))+((r22*x1227))+((x1222*x1226)));
evalcond[2]=((((-1.0)*cj13*x1226*x1227))+x1238+(((-1.0)*x1237))+(((-1.0)*cj15*r21*x1225))+((cj13*x1223*x1227))+((cj13*r22*x1222))+(((-1.0)*r20*sj15*x1225)));
evalcond[3]=(x1239+(((-1.0)*cj13*x1227*x1228))+((r00*sj15*x1225))+(((-1.0)*x1236))+((cj13*x1224*x1227))+((cj15*r01*x1225))+(((-1.0)*cj13*r02*x1222))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1240=(cj15*r00);
IkReal x1241=(cj14*r22);
IkReal x1242=(r21*sj15);
IkReal x1243=(cj11*sj14);
IkReal x1244=(sj11*sj14);
IkReal x1245=(cj15*r20);
IkReal x1246=(r01*sj15);
IkReal x1247=(cj14*r02);
IkReal x1248=((1.0)*x1244);
if( IKabs(((((-1.0)*sj11*x1241))+(((-1.0)*x1242*x1248))+(((-1.0)*x1240*x1243))+((x1244*x1245))+((x1243*x1246))+((cj11*x1247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj11*x1247))+(((-1.0)*x1243*x1245))+(((-1.0)*x1240*x1248))+((x1242*x1243))+((x1244*x1246))+((cj11*x1241)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj11*x1241))+(((-1.0)*x1242*x1248))+(((-1.0)*x1240*x1243))+((x1244*x1245))+((x1243*x1246))+((cj11*x1247))))+IKsqr((((sj11*x1247))+(((-1.0)*x1243*x1245))+(((-1.0)*x1240*x1248))+((x1242*x1243))+((x1244*x1246))+((cj11*x1241))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*sj11*x1241))+(((-1.0)*x1242*x1248))+(((-1.0)*x1240*x1243))+((x1244*x1245))+((x1243*x1246))+((cj11*x1247))), (((sj11*x1247))+(((-1.0)*x1243*x1245))+(((-1.0)*x1240*x1248))+((x1242*x1243))+((x1244*x1246))+((cj11*x1241))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1249=IKcos(j12);
IkReal x1250=IKsin(j12);
IkReal x1251=(cj13*cj14);
IkReal x1252=(r01*sj15);
IkReal x1253=((0.4)*cj11);
IkReal x1254=(cj15*r20);
IkReal x1255=((1.0)*r22);
IkReal x1256=(sj13*sj15);
IkReal x1257=(cj15*r00);
IkReal x1258=(cj13*sj14);
IkReal x1259=((1.0)*r02);
IkReal x1260=((1.0)*sj14);
IkReal x1261=(cj15*sj13);
IkReal x1262=(r21*sj15);
IkReal x1263=(cj11*x1249);
IkReal x1264=(sj11*x1249);
IkReal x1265=(sj11*x1250);
IkReal x1266=(cj11*x1250);
IkReal x1267=((1.0)*x1265);
evalcond[0]=(x1266+x1264+(((-1.0)*cj14*x1259))+(((-1.0)*x1252*x1260))+((sj14*x1257)));
evalcond[1]=(x1263+(((-1.0)*x1260*x1262))+(((-1.0)*cj14*x1255))+((sj14*x1254))+(((-1.0)*x1267)));
evalcond[2]=((((-0.4)*x1265))+(((9.9e-7)*x1254))+(((-9.9e-7)*x1262))+(((-1.0)*pz))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+((x1249*x1253)));
evalcond[3]=(x1253+(((9.9e-7)*x1257))+(((-9.9e-7)*x1252))+(((-1.93e-6)*sj11))+(((-1.0)*px))+((x1250*x1253))+(((0.4)*x1264)));
evalcond[4]=((((-1.0)*x1258*x1259))+x1263+(((-1.0)*x1251*x1257))+((x1251*x1252))+((r00*x1256))+((r01*x1261))+(((-1.0)*x1267)));
evalcond[5]=(((r21*x1261))+(((-1.0)*x1251*x1254))+(((-1.0)*x1255*x1258))+((x1251*x1262))+(((-1.0)*x1264))+(((-1.0)*x1266))+((r20*x1256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1268=(cj15*r20);
IkReal x1269=((0.999999999976719)*sj14);
IkReal x1270=(cj15*r00);
IkReal x1271=(r21*sj15);
IkReal x1272=(cj14*r22);
IkReal x1273=((4.82499999988767e-6)*sj14);
IkReal x1274=(r01*sj15);
IkReal x1275=(cj14*r02);
if( IKabs((((x1269*x1271))+(((0.999999999976719)*x1272))+(((-1.0)*x1268*x1269))+(((1.20624999997192e-5)*px))+(((-4.82499999988767e-6)*x1275))+(((-1.0)*x1273*x1274))+(((-1.1941874999722e-11)*x1270))+(((-2.47499999994238e-6)*x1271))+((x1270*x1273))+(((1.1941874999722e-11)*x1274))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x1268)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1269*x1274))+(((4.82499999988767e-6)*x1272))+(((-1.0)*x1268*x1273))+(((0.999999999976719)*x1275))+(((-1.0)*x1269*x1270))+(((-1.20624999997192e-5)*pz))+(((-1.1941874999722e-11)*x1271))+(((-2.47499999994238e-6)*x1274))+((x1271*x1273))+(((1.1941874999722e-11)*x1268))+(((2.47499999994238e-6)*x1270))+(((-2.4999999999418)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1269*x1271))+(((0.999999999976719)*x1272))+(((-1.0)*x1268*x1269))+(((1.20624999997192e-5)*px))+(((-4.82499999988767e-6)*x1275))+(((-1.0)*x1273*x1274))+(((-1.1941874999722e-11)*x1270))+(((-2.47499999994238e-6)*x1271))+((x1270*x1273))+(((1.1941874999722e-11)*x1274))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x1268))))+IKsqr((((x1269*x1274))+(((4.82499999988767e-6)*x1272))+(((-1.0)*x1268*x1273))+(((0.999999999976719)*x1275))+(((-1.0)*x1269*x1270))+(((-1.20624999997192e-5)*pz))+(((-1.1941874999722e-11)*x1271))+(((-2.47499999994238e-6)*x1274))+((x1271*x1273))+(((1.1941874999722e-11)*x1268))+(((2.47499999994238e-6)*x1270))+(((-2.4999999999418)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((((x1269*x1271))+(((0.999999999976719)*x1272))+(((-1.0)*x1268*x1269))+(((1.20624999997192e-5)*px))+(((-4.82499999988767e-6)*x1275))+(((-1.0)*x1273*x1274))+(((-1.1941874999722e-11)*x1270))+(((-2.47499999994238e-6)*x1271))+((x1270*x1273))+(((1.1941874999722e-11)*x1274))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x1268))), (((x1269*x1274))+(((4.82499999988767e-6)*x1272))+(((-1.0)*x1268*x1273))+(((0.999999999976719)*x1275))+(((-1.0)*x1269*x1270))+(((-1.20624999997192e-5)*pz))+(((-1.1941874999722e-11)*x1271))+(((-2.47499999994238e-6)*x1274))+((x1271*x1273))+(((1.1941874999722e-11)*x1268))+(((2.47499999994238e-6)*x1270))+(((-2.4999999999418)*px))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1276=IKsin(j11);
IkReal x1277=IKcos(j11);
IkReal x1278=((1.0)*pz);
IkReal x1279=((0.4)*sj14);
IkReal x1280=(cj15*r20);
IkReal x1281=(r01*sj15);
IkReal x1282=((0.4)*cj14);
IkReal x1283=(r21*sj15);
IkReal x1284=(cj15*r00);
IkReal x1285=((9.9e-7)*x1281);
IkReal x1286=((0.4)*x1277);
IkReal x1287=((9.9e-7)*x1284);
IkReal x1288=((1.93e-6)*x1276);
IkReal x1289=((9.9e-7)*x1280);
IkReal x1290=((0.4)*x1276);
IkReal x1291=((1.93e-6)*x1277);
IkReal x1292=((9.9e-7)*x1283);
IkReal x1293=((0.4)*cj15*sj13);
IkReal x1294=((0.4)*sj13*sj15);
IkReal x1295=(x1287+x1288);
IkReal x1296=(x1285+x1286);
IkReal x1297=(x1278+x1292+x1290+x1291);
evalcond[0]=(((x1279*x1281))+x1295+((r02*x1282))+(((-1.0)*x1296))+(((-1.0)*px))+(((-1.0)*x1279*x1284)));
evalcond[1]=(((x1279*x1283))+x1289+(((-1.0)*x1297))+((r22*x1282))+(((-1.0)*x1279*x1280)));
evalcond[2]=(((r20*x1294))+((cj13*x1282*x1283))+x1296+((r21*x1293))+(((-1.0)*x1295))+(((-1.0)*cj13*r22*x1279))+(((-1.0)*cj13*x1280*x1282))+px);
evalcond[3]=(x1289+(((-1.0)*x1297))+(((-1.0)*cj13*r02*x1279))+((cj13*x1281*x1282))+((r01*x1293))+((r00*x1294))+(((-1.0)*cj13*x1282*x1284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1298=(sj11*sj14);
IkReal x1299=(r21*sj15);
IkReal x1300=(cj15*r20);
IkReal x1301=(cj11*sj14);
IkReal x1302=(cj15*r00);
IkReal x1303=((1.0)*cj14);
IkReal x1304=((1.0)*r01*sj14*sj15);
if( IKabs(((((-1.0)*r22*sj11*x1303))+(((-1.0)*r01*sj15*x1301))+(((-1.0)*cj11*r02*x1303))+(((-1.0)*x1298*x1299))+((x1298*x1300))+((x1301*x1302)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1299*x1301))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x1303))+(((-1.0)*x1300*x1301))+((x1298*x1302))+(((-1.0)*r01*sj15*x1298)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*sj11*x1303))+(((-1.0)*r01*sj15*x1301))+(((-1.0)*cj11*r02*x1303))+(((-1.0)*x1298*x1299))+((x1298*x1300))+((x1301*x1302))))+IKsqr((((x1299*x1301))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x1303))+(((-1.0)*x1300*x1301))+((x1298*x1302))+(((-1.0)*r01*sj15*x1298))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r22*sj11*x1303))+(((-1.0)*r01*sj15*x1301))+(((-1.0)*cj11*r02*x1303))+(((-1.0)*x1298*x1299))+((x1298*x1300))+((x1301*x1302))), (((x1299*x1301))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x1303))+(((-1.0)*x1300*x1301))+((x1298*x1302))+(((-1.0)*r01*sj15*x1298))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1305=IKsin(j12);
IkReal x1306=IKcos(j12);
IkReal x1307=(cj13*cj14);
IkReal x1308=(r01*sj15);
IkReal x1309=((0.4)*cj11);
IkReal x1310=(cj15*r20);
IkReal x1311=((1.0)*r22);
IkReal x1312=((0.4)*sj11);
IkReal x1313=(sj13*sj15);
IkReal x1314=(cj15*r00);
IkReal x1315=(cj13*sj14);
IkReal x1316=((1.0)*sj14);
IkReal x1317=(r21*sj15);
IkReal x1318=((1.0)*r02);
IkReal x1319=(cj15*sj13);
IkReal x1320=(sj11*x1305);
IkReal x1321=(cj11*x1306);
IkReal x1322=((1.0)*cj11*x1305);
IkReal x1323=((1.0)*sj11*x1306);
IkReal x1324=(x1322+x1323);
evalcond[0]=(x1321+(((-1.0)*cj14*x1311))+(((-1.0)*x1320))+(((-1.0)*x1316*x1317))+((sj14*x1310)));
evalcond[1]=((((-1.0)*x1308*x1316))+(((-1.0)*x1324))+(((-1.0)*cj14*x1318))+((sj14*x1314)));
evalcond[2]=(((x1306*x1309))+(((-9.9e-7)*x1317))+(((-1.0)*x1312))+(((-1.0)*x1305*x1312))+(((9.9e-7)*x1310))+(((-1.0)*pz))+(((-1.93e-6)*cj11)));
evalcond[3]=((((1.93e-6)*sj11))+(((-9.9e-7)*x1308))+(((-1.0)*x1306*x1312))+(((-1.0)*x1309))+(((9.9e-7)*x1314))+(((-1.0)*px))+(((-1.0)*x1305*x1309)));
evalcond[4]=(x1320+((r00*x1313))+(((-1.0)*x1315*x1318))+((r01*x1319))+(((-1.0)*x1321))+((x1307*x1308))+(((-1.0)*x1307*x1314)));
evalcond[5]=((((-1.0)*x1311*x1315))+((x1307*x1317))+(((-1.0)*x1324))+((r21*x1319))+(((-1.0)*x1307*x1310))+((r20*x1313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1325=(cj14*r12);
IkReal x1326=(cj15*r20);
IkReal x1327=((0.999999999976719)*sj14);
IkReal x1328=(r21*sj15);
IkReal x1329=(cj15*r10);
IkReal x1330=((4.82499999988767e-6)*sj14);
IkReal x1331=(cj14*r22);
IkReal x1332=(r11*sj15);
if( IKabs(((((-2.47499999994238e-6)*x1328))+(((0.999999999976719)*x1331))+((x1327*x1328))+(((-1.0)*x1326*x1327))+(((-1.20624999997192e-5)*py))+(((-1.0)*x1329*x1330))+(((1.1941874999722e-11)*x1329))+((x1330*x1332))+(((2.47499999994238e-6)*x1326))+(((-1.1941874999722e-11)*x1332))+(((-2.4999999999418)*pz))+(((4.82499999988767e-6)*x1325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.47499999994238e-6)*x1329))+(((-1.0)*x1326*x1330))+(((-1.0)*x1327*x1332))+(((4.82499999988767e-6)*x1331))+(((2.4999999999418)*py))+(((-1.1941874999722e-11)*x1328))+(((2.47499999994238e-6)*x1332))+((x1327*x1329))+(((-1.20624999997192e-5)*pz))+((x1328*x1330))+(((1.1941874999722e-11)*x1326))+(((-0.999999999976719)*x1325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.47499999994238e-6)*x1328))+(((0.999999999976719)*x1331))+((x1327*x1328))+(((-1.0)*x1326*x1327))+(((-1.20624999997192e-5)*py))+(((-1.0)*x1329*x1330))+(((1.1941874999722e-11)*x1329))+((x1330*x1332))+(((2.47499999994238e-6)*x1326))+(((-1.1941874999722e-11)*x1332))+(((-2.4999999999418)*pz))+(((4.82499999988767e-6)*x1325))))+IKsqr(((((-2.47499999994238e-6)*x1329))+(((-1.0)*x1326*x1330))+(((-1.0)*x1327*x1332))+(((4.82499999988767e-6)*x1331))+(((2.4999999999418)*py))+(((-1.1941874999722e-11)*x1328))+(((2.47499999994238e-6)*x1332))+((x1327*x1329))+(((-1.20624999997192e-5)*pz))+((x1328*x1330))+(((1.1941874999722e-11)*x1326))+(((-0.999999999976719)*x1325))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-2.47499999994238e-6)*x1328))+(((0.999999999976719)*x1331))+((x1327*x1328))+(((-1.0)*x1326*x1327))+(((-1.20624999997192e-5)*py))+(((-1.0)*x1329*x1330))+(((1.1941874999722e-11)*x1329))+((x1330*x1332))+(((2.47499999994238e-6)*x1326))+(((-1.1941874999722e-11)*x1332))+(((-2.4999999999418)*pz))+(((4.82499999988767e-6)*x1325))), ((((-2.47499999994238e-6)*x1329))+(((-1.0)*x1326*x1330))+(((-1.0)*x1327*x1332))+(((4.82499999988767e-6)*x1331))+(((2.4999999999418)*py))+(((-1.1941874999722e-11)*x1328))+(((2.47499999994238e-6)*x1332))+((x1327*x1329))+(((-1.20624999997192e-5)*pz))+((x1328*x1330))+(((1.1941874999722e-11)*x1326))+(((-0.999999999976719)*x1325))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1333=IKsin(j11);
IkReal x1334=IKcos(j11);
IkReal x1335=((0.4)*sj13);
IkReal x1336=((0.4)*sj14);
IkReal x1337=(cj15*r20);
IkReal x1338=((0.4)*cj14);
IkReal x1339=(r21*sj15);
IkReal x1340=(cj15*r10);
IkReal x1341=(r11*sj15);
IkReal x1342=((9.9e-7)*x1341);
IkReal x1343=((1.93e-6)*x1333);
IkReal x1344=((9.9e-7)*x1340);
IkReal x1345=((0.4)*x1334);
IkReal x1346=((0.4)*x1333);
IkReal x1347=((1.93e-6)*x1334);
IkReal x1348=((9.9e-7)*x1339);
IkReal x1349=((9.9e-7)*x1337);
IkReal x1350=(x1344+x1345);
IkReal x1351=(x1342+x1343+py);
IkReal x1352=(x1348+x1346+x1347);
evalcond[0]=(x1351+(((-1.0)*x1336*x1341))+(((-1.0)*x1350))+((x1336*x1340))+(((-1.0)*r12*x1338)));
evalcond[1]=(x1349+(((-1.0)*x1352))+((x1336*x1339))+(((-1.0)*pz))+(((-1.0)*x1336*x1337))+((r22*x1338)));
evalcond[2]=(x1351+(((-1.0)*x1350))+(((-1.0)*r20*sj15*x1335))+((cj13*r22*x1336))+(((-1.0)*cj15*r21*x1335))+((cj13*x1337*x1338))+(((-1.0)*cj13*x1338*x1339)));
evalcond[3]=(x1352+(((-1.0)*cj13*r12*x1336))+(((-1.0)*x1349))+((cj13*x1338*x1341))+((r10*sj15*x1335))+pz+((cj15*r11*x1335))+(((-1.0)*cj13*x1338*x1340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1353=(sj11*sj14);
IkReal x1354=(r11*sj15);
IkReal x1355=((1.0)*cj15);
IkReal x1356=(cj14*r12);
IkReal x1357=(cj11*sj14);
IkReal x1358=(r21*sj15);
IkReal x1359=(cj14*r22);
if( IKabs((((cj11*x1356))+((cj15*r20*x1353))+(((-1.0)*sj11*x1359))+(((-1.0)*r10*x1355*x1357))+((x1354*x1357))+(((-1.0)*x1353*x1358)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*x1359))+((x1357*x1358))+(((-1.0)*r10*x1353*x1355))+((sj11*x1356))+(((-1.0)*r20*x1355*x1357))+((x1353*x1354)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj11*x1356))+((cj15*r20*x1353))+(((-1.0)*sj11*x1359))+(((-1.0)*r10*x1355*x1357))+((x1354*x1357))+(((-1.0)*x1353*x1358))))+IKsqr((((cj11*x1359))+((x1357*x1358))+(((-1.0)*r10*x1353*x1355))+((sj11*x1356))+(((-1.0)*r20*x1355*x1357))+((x1353*x1354))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((cj11*x1356))+((cj15*r20*x1353))+(((-1.0)*sj11*x1359))+(((-1.0)*r10*x1355*x1357))+((x1354*x1357))+(((-1.0)*x1353*x1358))), (((cj11*x1359))+((x1357*x1358))+(((-1.0)*r10*x1353*x1355))+((sj11*x1356))+(((-1.0)*r20*x1355*x1357))+((x1353*x1354))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1360=IKcos(j12);
IkReal x1361=IKsin(j12);
IkReal x1362=(cj15*r10);
IkReal x1363=((0.4)*cj11);
IkReal x1364=((1.0)*sj14);
IkReal x1365=(r11*sj15);
IkReal x1366=((1.0)*cj14);
IkReal x1367=(cj15*r20);
IkReal x1368=(cj13*cj14);
IkReal x1369=(sj13*sj15);
IkReal x1370=(cj15*sj13);
IkReal x1371=(r21*sj15);
IkReal x1372=(cj11*x1360);
IkReal x1373=(sj11*x1360);
IkReal x1374=(sj11*x1361);
IkReal x1375=(cj11*x1361);
IkReal x1376=((1.0)*x1374);
evalcond[0]=(x1373+x1375+(((-1.0)*x1364*x1365))+(((-1.0)*r12*x1366))+((sj14*x1362)));
evalcond[1]=(x1372+((sj14*x1367))+(((-1.0)*r22*x1366))+(((-1.0)*x1376))+(((-1.0)*x1364*x1371)));
evalcond[2]=(((x1360*x1363))+(((-9.9e-7)*x1371))+(((-0.4)*x1374))+(((-1.0)*pz))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+(((9.9e-7)*x1367)));
evalcond[3]=(x1363+((x1361*x1363))+(((-1.93e-6)*sj11))+(((0.4)*x1373))+(((-1.0)*py))+(((-9.9e-7)*x1365))+(((9.9e-7)*x1362)));
evalcond[4]=(x1372+(((-1.0)*cj13*x1362*x1366))+((r10*x1369))+(((-1.0)*cj13*r12*x1364))+((r11*x1370))+((x1365*x1368))+(((-1.0)*x1376)));
evalcond[5]=((((-1.0)*cj13*x1366*x1367))+(((-1.0)*x1373))+(((-1.0)*x1375))+(((-1.0)*cj13*r22*x1364))+((r20*x1369))+((r21*x1370))+((x1368*x1371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1377=(cj14*r12);
IkReal x1378=(cj15*r20);
IkReal x1379=((0.999999999976719)*sj14);
IkReal x1380=(r21*sj15);
IkReal x1381=(cj15*r10);
IkReal x1382=((4.82499999988767e-6)*sj14);
IkReal x1383=(cj14*r22);
IkReal x1384=(r11*sj15);
if( IKabs(((((0.999999999976719)*x1383))+(((-1.1941874999722e-11)*x1381))+((x1381*x1382))+(((1.1941874999722e-11)*x1384))+(((-2.47499999994238e-6)*x1380))+(((-1.0)*x1382*x1384))+(((1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x1378))+((x1379*x1380))+(((-4.82499999988767e-6)*x1377))+(((-2.4999999999418)*pz))+(((-1.0)*x1378*x1379)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.1941874999722e-11)*x1380))+((x1380*x1382))+(((2.47499999994238e-6)*x1381))+(((4.82499999988767e-6)*x1383))+(((-2.47499999994238e-6)*x1384))+(((-1.20624999997192e-5)*pz))+(((0.999999999976719)*x1377))+((x1379*x1384))+(((-1.0)*x1378*x1382))+(((1.1941874999722e-11)*x1378))+(((-2.4999999999418)*py))+(((-1.0)*x1379*x1381)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.999999999976719)*x1383))+(((-1.1941874999722e-11)*x1381))+((x1381*x1382))+(((1.1941874999722e-11)*x1384))+(((-2.47499999994238e-6)*x1380))+(((-1.0)*x1382*x1384))+(((1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x1378))+((x1379*x1380))+(((-4.82499999988767e-6)*x1377))+(((-2.4999999999418)*pz))+(((-1.0)*x1378*x1379))))+IKsqr(((((-1.1941874999722e-11)*x1380))+((x1380*x1382))+(((2.47499999994238e-6)*x1381))+(((4.82499999988767e-6)*x1383))+(((-2.47499999994238e-6)*x1384))+(((-1.20624999997192e-5)*pz))+(((0.999999999976719)*x1377))+((x1379*x1384))+(((-1.0)*x1378*x1382))+(((1.1941874999722e-11)*x1378))+(((-2.4999999999418)*py))+(((-1.0)*x1379*x1381))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((0.999999999976719)*x1383))+(((-1.1941874999722e-11)*x1381))+((x1381*x1382))+(((1.1941874999722e-11)*x1384))+(((-2.47499999994238e-6)*x1380))+(((-1.0)*x1382*x1384))+(((1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x1378))+((x1379*x1380))+(((-4.82499999988767e-6)*x1377))+(((-2.4999999999418)*pz))+(((-1.0)*x1378*x1379))), ((((-1.1941874999722e-11)*x1380))+((x1380*x1382))+(((2.47499999994238e-6)*x1381))+(((4.82499999988767e-6)*x1383))+(((-2.47499999994238e-6)*x1384))+(((-1.20624999997192e-5)*pz))+(((0.999999999976719)*x1377))+((x1379*x1384))+(((-1.0)*x1378*x1382))+(((1.1941874999722e-11)*x1378))+(((-2.4999999999418)*py))+(((-1.0)*x1379*x1381))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1385=IKsin(j11);
IkReal x1386=IKcos(j11);
IkReal x1387=((1.0)*pz);
IkReal x1388=((0.4)*sj14);
IkReal x1389=(cj15*r20);
IkReal x1390=((0.4)*cj14);
IkReal x1391=(r21*sj15);
IkReal x1392=(cj15*r10);
IkReal x1393=(r11*sj15);
IkReal x1394=((9.9e-7)*x1393);
IkReal x1395=((0.4)*x1386);
IkReal x1396=((9.9e-7)*x1392);
IkReal x1397=((1.93e-6)*x1385);
IkReal x1398=((9.9e-7)*x1389);
IkReal x1399=((0.4)*x1385);
IkReal x1400=((1.93e-6)*x1386);
IkReal x1401=((9.9e-7)*x1391);
IkReal x1402=((0.4)*sj13*sj15);
IkReal x1403=((0.4)*cj15*sj13);
IkReal x1404=(x1397+x1396);
IkReal x1405=(x1395+x1394);
IkReal x1406=(x1387+x1399+x1401+x1400);
evalcond[0]=(((x1388*x1393))+(((-1.0)*x1405))+(((-1.0)*py))+x1404+(((-1.0)*x1388*x1392))+((r12*x1390)));
evalcond[1]=(x1398+((x1388*x1391))+(((-1.0)*x1406))+((r22*x1390))+(((-1.0)*x1388*x1389)));
evalcond[2]=((((-1.0)*cj13*x1389*x1390))+((cj13*x1390*x1391))+(((-1.0)*x1404))+((r20*x1402))+((r21*x1403))+py+x1405+(((-1.0)*cj13*r22*x1388)));
evalcond[3]=(x1398+(((-1.0)*cj13*x1390*x1392))+((cj13*x1390*x1393))+((r11*x1403))+(((-1.0)*x1406))+(((-1.0)*cj13*r12*x1388))+((r10*x1402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1407=((1.0)*cj11);
IkReal x1408=(sj14*sj15);
IkReal x1409=(cj14*r12);
IkReal x1410=((1.0)*sj11);
IkReal x1411=(cj14*r22);
IkReal x1412=(cj15*r20*sj14);
IkReal x1413=(cj15*r10*sj14);
if( IKabs((((sj11*x1412))+(((-1.0)*r11*x1407*x1408))+(((-1.0)*r21*x1408*x1410))+(((-1.0)*x1410*x1411))+(((-1.0)*x1407*x1409))+((cj11*x1413)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj11*x1413))+((cj11*r21*x1408))+(((-1.0)*x1407*x1412))+(((-1.0)*r11*x1408*x1410))+(((-1.0)*x1409*x1410))+((cj11*x1411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj11*x1412))+(((-1.0)*r11*x1407*x1408))+(((-1.0)*r21*x1408*x1410))+(((-1.0)*x1410*x1411))+(((-1.0)*x1407*x1409))+((cj11*x1413))))+IKsqr((((sj11*x1413))+((cj11*r21*x1408))+(((-1.0)*x1407*x1412))+(((-1.0)*r11*x1408*x1410))+(((-1.0)*x1409*x1410))+((cj11*x1411))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((sj11*x1412))+(((-1.0)*r11*x1407*x1408))+(((-1.0)*r21*x1408*x1410))+(((-1.0)*x1410*x1411))+(((-1.0)*x1407*x1409))+((cj11*x1413))), (((sj11*x1413))+((cj11*r21*x1408))+(((-1.0)*x1407*x1412))+(((-1.0)*r11*x1408*x1410))+(((-1.0)*x1409*x1410))+((cj11*x1411))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1414=IKsin(j12);
IkReal x1415=IKcos(j12);
IkReal x1416=(cj15*r10);
IkReal x1417=((0.4)*cj11);
IkReal x1418=((1.0)*sj14);
IkReal x1419=(r11*sj15);
IkReal x1420=((1.0)*cj14);
IkReal x1421=((0.4)*sj11);
IkReal x1422=(cj15*r20);
IkReal x1423=(cj13*cj14);
IkReal x1424=(r21*sj15);
IkReal x1425=(sj13*sj15);
IkReal x1426=(cj15*sj13);
IkReal x1427=(sj11*x1414);
IkReal x1428=(cj11*x1415);
IkReal x1429=((1.0)*cj11*x1414);
IkReal x1430=((1.0)*sj11*x1415);
IkReal x1431=(x1429+x1430);
evalcond[0]=((((-1.0)*x1418*x1424))+(((-1.0)*x1427))+x1428+((sj14*x1422))+(((-1.0)*r22*x1420)));
evalcond[1]=((((-1.0)*x1431))+(((-1.0)*r12*x1420))+((sj14*x1416))+(((-1.0)*x1418*x1419)));
evalcond[2]=(((x1415*x1417))+(((-9.9e-7)*x1424))+(((9.9e-7)*x1422))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((-1.0)*x1414*x1421))+(((-1.0)*x1421)));
evalcond[3]=((((-1.0)*x1415*x1421))+(((1.93e-6)*sj11))+(((-1.0)*x1417))+(((-1.0)*x1414*x1417))+(((-9.9e-7)*x1419))+(((-1.0)*py))+(((9.9e-7)*x1416)));
evalcond[4]=(((r11*x1426))+(((-1.0)*cj13*x1416*x1420))+((r10*x1425))+(((-1.0)*x1428))+((x1419*x1423))+x1427+(((-1.0)*cj13*r12*x1418)));
evalcond[5]=(((r21*x1426))+((x1423*x1424))+(((-1.0)*x1431))+(((-1.0)*cj13*x1420*x1422))+((r20*x1425))+(((-1.0)*cj13*r22*x1418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11, j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1432=(r21*sj10);
IkReal x1433=(cj15*sj13);
IkReal x1434=((0.4)*sj14);
IkReal x1435=(cj15*r20);
IkReal x1436=(r21*sj15);
IkReal x1437=(cj15*r10);
IkReal x1438=(r22*sj14);
IkReal x1439=(r11*sj15);
IkReal x1440=(cj13*cj14*sj15);
IkReal x1441=((1.6e+15)*cj13*sj10);
IkReal x1442=((7720000000.0)*cj13*sj10);
IkReal x1443=(r20*sj10*sj13*sj15);
IkReal x1444=((((0.4)*cj14*r22))+(((-1.0)*x1434*x1435))+((x1434*x1436))+(((-1.0)*pz))+(((-9.9e-7)*x1436))+(((9.9e-7)*x1435)));
IkReal x1445=(sj10*x1444);
CheckValue<IkReal> x1446=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x1446.valid){
continue;
}
CheckValue<IkReal> x1447 = IKatan2WithCheck(IkReal(((((4.0e+15)*x1445))+(((7720000000.0)*x1443))+(((-1.0)*x1438*x1442))+(((7720000000.0)*x1432*x1433))+(((19107.0)*x1437))+(((-1.0)*cj14*x1435*x1442))+(((-19107.0)*x1439))+(((-19300000000.0)*py))+(((7720000000.0)*x1432*x1440)))),IkReal((((x1438*x1441))+(((-3960000000.0)*x1437))+((cj14*x1435*x1441))+(((-1.6e+15)*x1432*x1433))+(((-1.6e+15)*x1432*x1440))+(((-1.6e+15)*x1443))+(((4.0e+15)*py))+(((3960000000.0)*x1439))+(((19300000000.0)*x1445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1447.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1446.value)))+(x1447.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x1448=IKsin(j11);
IkReal x1449=sj10*sj10;
IkReal x1450=IKcos(j11);
IkReal x1451=cj10*cj10;
IkReal x1452=(cj10*sj15);
IkReal x1453=((9.9e-7)*r11);
IkReal x1454=(cj15*r20);
IkReal x1455=((0.4)*sj14);
IkReal x1456=(cj15*r00);
IkReal x1457=((0.4)*cj10);
IkReal x1458=(cj15*sj13);
IkReal x1459=(cj13*r22);
IkReal x1460=((0.4)*r11);
IkReal x1461=(cj10*sj10);
IkReal x1462=(r21*sj15);
IkReal x1463=((0.4)*r01);
IkReal x1464=((0.4)*cj14);
IkReal x1465=((9.9e-7)*cj10);
IkReal x1466=(cj13*cj14);
IkReal x1467=((0.4)*sj10);
IkReal x1468=(sj10*sj15);
IkReal x1469=(cj15*r10);
IkReal x1470=((0.4)*sj13*sj15);
IkReal x1471=(sj10*x1464);
IkReal x1472=((9.9e-7)*cj15*sj10);
IkReal x1473=((0.4)*x1450);
IkReal x1474=((9.9e-7)*r01*sj15);
IkReal x1475=((1.93e-6)*x1448);
IkReal x1476=((1.93e-6)*x1450);
IkReal x1477=(x1461*x1475);
IkReal x1478=(sj10*x1450*x1457);
evalcond[0]=((((-1.0)*x1454*x1455))+((x1455*x1462))+(((-1.0)*pz))+(((-9.9e-7)*x1462))+((r22*x1464))+(((-0.4)*x1448))+(((-1.0)*x1476))+(((9.9e-7)*x1454)));
evalcond[1]=(((x1453*x1468))+((sj10*x1455*x1469))+(((-9.9e-7)*sj10*x1469))+(((-1.0)*x1449*x1473))+((x1449*x1475))+(((-1.0)*r12*x1471))+((py*sj10))+(((-1.0)*r11*x1455*x1468)));
evalcond[2]=((((9.9e-7)*r01*x1452))+((cj10*px))+(((-1.0)*r01*x1452*x1455))+(((-1.0)*x1456*x1465))+(((-1.0)*x1451*x1473))+((x1451*x1475))+((cj10*x1455*x1456))+(((-1.0)*cj14*r02*x1457)));
evalcond[3]=(((sj10*x1476))+(((-9.9e-7)*sj10*x1454))+((r10*x1470))+(((9.9e-7)*sj10*x1462))+((pz*sj10))+((x1448*x1467))+((x1458*x1460))+(((-1.0)*cj13*x1464*x1469))+((sj15*x1460*x1466))+(((-1.0)*cj13*r12*x1455)));
evalcond[4]=(((cj10*pz))+(((-1.0)*cj13*x1456*x1464))+(((-1.0)*cj13*r02*x1455))+(((-1.0)*x1454*x1465))+(((9.9e-7)*r21*x1452))+((x1448*x1457))+((x1458*x1463))+((cj10*x1476))+((r00*x1470))+((sj15*x1463*x1466)));
evalcond[5]=((((-1.0)*r21*x1458*x1467))+((sj10*x1475))+((cj13*x1454*x1471))+(((-1.0)*cj13*x1462*x1471))+(((-1.0)*r20*sj13*sj15*x1467))+((sj15*x1453))+(((-9.9e-7)*x1469))+((sj10*x1455*x1459))+py+(((-1.0)*x1450*x1467)));
evalcond[6]=(((x1454*x1457*x1466))+(((-0.4)*r20*sj13*x1452))+(((-1.0)*r21*x1457*x1458))+((cj10*x1455*x1459))+px+(((-9.9e-7)*x1456))+x1474+((cj10*x1475))+(((-1.0)*cj13*r21*x1452*x1464))+(((-1.0)*x1450*x1457)));
evalcond[7]=((((-1.0)*cj14*r12*x1457))+(((-9.9e-7)*sj10*x1456))+((px*sj10))+(((-1.0)*r11*x1452*x1455))+((cj10*x1455*x1469))+x1477+(((-1.0)*x1478))+(((9.9e-7)*r01*x1468)));
evalcond[8]=(((cj10*py))+(((-1.0)*r01*x1455*x1468))+((sj10*x1455*x1456))+x1477+(((-1.0)*x1478))+(((-1.0)*r02*x1471))+(((-1.0)*x1465*x1469))+((x1452*x1453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[2];
j12eval[0]=cj10;
j12eval[1]=IKsign(cj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
j12eval[0]=sj10;
j12eval[1]=IKsign(sj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1479=(cj15*r00);
IkReal x1480=(cj14*r22);
IkReal x1481=(r21*sj15);
IkReal x1482=(cj11*sj14);
IkReal x1483=(sj11*sj14);
IkReal x1484=(cj15*r20);
IkReal x1485=(r01*sj15);
IkReal x1486=(cj14*r02);
IkReal x1487=((1.0)*x1483);
if( IKabs((((x1482*x1485))+(((-1.0)*x1479*x1482))+(((-1.0)*x1481*x1487))+((x1483*x1484))+((cj11*x1486))+(((-1.0)*sj11*x1480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj11*x1486))+(((-1.0)*x1479*x1487))+((x1481*x1482))+((x1483*x1485))+(((-1.0)*x1482*x1484))+((cj11*x1480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1482*x1485))+(((-1.0)*x1479*x1482))+(((-1.0)*x1481*x1487))+((x1483*x1484))+((cj11*x1486))+(((-1.0)*sj11*x1480))))+IKsqr((((sj11*x1486))+(((-1.0)*x1479*x1487))+((x1481*x1482))+((x1483*x1485))+(((-1.0)*x1482*x1484))+((cj11*x1480))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((x1482*x1485))+(((-1.0)*x1479*x1482))+(((-1.0)*x1481*x1487))+((x1483*x1484))+((cj11*x1486))+(((-1.0)*sj11*x1480))), (((sj11*x1486))+(((-1.0)*x1479*x1487))+((x1481*x1482))+((x1483*x1485))+(((-1.0)*x1482*x1484))+((cj11*x1480))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1488=IKcos(j12);
IkReal x1489=IKsin(j12);
IkReal x1490=(cj13*cj14);
IkReal x1491=(r01*sj15);
IkReal x1492=((0.4)*cj11);
IkReal x1493=(cj15*r20);
IkReal x1494=((1.0)*r22);
IkReal x1495=(sj13*sj15);
IkReal x1496=(cj15*r00);
IkReal x1497=(cj13*sj14);
IkReal x1498=((1.0)*r02);
IkReal x1499=((1.0)*sj14);
IkReal x1500=(cj15*sj13);
IkReal x1501=(r21*sj15);
IkReal x1502=(cj11*x1488);
IkReal x1503=(sj11*x1488);
IkReal x1504=(sj11*x1489);
IkReal x1505=(cj11*x1489);
IkReal x1506=((1.0)*x1504);
evalcond[0]=((((-1.0)*cj14*x1498))+x1503+x1505+(((-1.0)*x1491*x1499))+((sj14*x1496)));
evalcond[1]=((((-1.0)*x1506))+(((-1.0)*x1499*x1501))+(((-1.0)*cj14*x1494))+x1502+((sj14*x1493)));
evalcond[2]=((((-9.9e-7)*x1501))+(((-1.0)*pz))+(((9.9e-7)*x1493))+(((-0.4)*sj11))+(((-0.4)*x1504))+(((-1.93e-6)*cj11))+((x1488*x1492)));
evalcond[3]=(((x1489*x1492))+(((-1.93e-6)*sj11))+(((-1.0)*px))+(((9.9e-7)*x1496))+x1492+(((-9.9e-7)*x1491))+(((0.4)*x1503)));
evalcond[4]=((((-1.0)*x1506))+((r00*x1495))+((r01*x1500))+(((-1.0)*x1497*x1498))+x1502+(((-1.0)*x1490*x1496))+((x1490*x1491)));
evalcond[5]=((((-1.0)*x1494*x1497))+(((-1.0)*x1505))+(((-1.0)*x1503))+((x1490*x1501))+((r20*x1495))+((r21*x1500))+(((-1.0)*x1490*x1493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1507=(sj11*sj14);
IkReal x1508=(r21*sj15);
IkReal x1509=(cj15*r20);
IkReal x1510=(cj11*sj14);
IkReal x1511=(cj15*r00);
IkReal x1512=((1.0)*cj14);
IkReal x1513=((1.0)*r01*sj14*sj15);
if( IKabs((((x1510*x1511))+(((-1.0)*x1507*x1508))+(((-1.0)*cj11*r02*x1512))+((x1507*x1509))+(((-1.0)*r22*sj11*x1512))+(((-1.0)*r01*sj15*x1510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1508*x1510))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x1512))+((x1507*x1511))+(((-1.0)*x1509*x1510))+(((-1.0)*r01*sj15*x1507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1510*x1511))+(((-1.0)*x1507*x1508))+(((-1.0)*cj11*r02*x1512))+((x1507*x1509))+(((-1.0)*r22*sj11*x1512))+(((-1.0)*r01*sj15*x1510))))+IKsqr((((x1508*x1510))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x1512))+((x1507*x1511))+(((-1.0)*x1509*x1510))+(((-1.0)*r01*sj15*x1507))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((x1510*x1511))+(((-1.0)*x1507*x1508))+(((-1.0)*cj11*r02*x1512))+((x1507*x1509))+(((-1.0)*r22*sj11*x1512))+(((-1.0)*r01*sj15*x1510))), (((x1508*x1510))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x1512))+((x1507*x1511))+(((-1.0)*x1509*x1510))+(((-1.0)*r01*sj15*x1507))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1514=IKsin(j12);
IkReal x1515=IKcos(j12);
IkReal x1516=(cj13*cj14);
IkReal x1517=(r01*sj15);
IkReal x1518=((0.4)*cj11);
IkReal x1519=(cj15*r20);
IkReal x1520=((1.0)*r22);
IkReal x1521=((0.4)*sj11);
IkReal x1522=(sj13*sj15);
IkReal x1523=(cj15*r00);
IkReal x1524=(cj13*sj14);
IkReal x1525=((1.0)*sj14);
IkReal x1526=(r21*sj15);
IkReal x1527=((1.0)*r02);
IkReal x1528=(cj15*sj13);
IkReal x1529=(sj11*x1514);
IkReal x1530=(cj11*x1515);
IkReal x1531=((1.0)*cj11*x1514);
IkReal x1532=((1.0)*sj11*x1515);
IkReal x1533=(x1532+x1531);
evalcond[0]=((((-1.0)*x1525*x1526))+x1530+(((-1.0)*cj14*x1520))+(((-1.0)*x1529))+((sj14*x1519)));
evalcond[1]=((((-1.0)*x1533))+((sj14*x1523))+(((-1.0)*x1517*x1525))+(((-1.0)*cj14*x1527)));
evalcond[2]=((((-1.0)*x1521))+(((-1.0)*x1514*x1521))+(((-1.0)*pz))+((x1515*x1518))+(((-9.9e-7)*x1526))+(((-1.93e-6)*cj11))+(((9.9e-7)*x1519)));
evalcond[3]=((((-1.0)*x1518))+(((1.93e-6)*sj11))+(((-1.0)*x1515*x1521))+(((-9.9e-7)*x1517))+(((-1.0)*px))+(((-1.0)*x1514*x1518))+(((9.9e-7)*x1523)));
evalcond[4]=((((-1.0)*x1530))+(((-1.0)*x1516*x1523))+(((-1.0)*x1524*x1527))+((r00*x1522))+((r01*x1528))+((x1516*x1517))+x1529);
evalcond[5]=((((-1.0)*x1516*x1519))+(((-1.0)*x1533))+((r20*x1522))+((r21*x1528))+((x1516*x1526))+(((-1.0)*x1520*x1524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1534=(sj11*sj14);
IkReal x1535=(r11*sj15);
IkReal x1536=((1.0)*cj15);
IkReal x1537=(cj14*r12);
IkReal x1538=(cj11*sj14);
IkReal x1539=(r21*sj15);
IkReal x1540=(cj14*r22);
if( IKabs((((cj11*x1537))+(((-1.0)*r10*x1536*x1538))+((x1535*x1538))+((cj15*r20*x1534))+(((-1.0)*x1534*x1539))+(((-1.0)*sj11*x1540)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1538*x1539))+(((-1.0)*r10*x1534*x1536))+(((-1.0)*r20*x1536*x1538))+((cj11*x1540))+((x1534*x1535))+((sj11*x1537)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj11*x1537))+(((-1.0)*r10*x1536*x1538))+((x1535*x1538))+((cj15*r20*x1534))+(((-1.0)*x1534*x1539))+(((-1.0)*sj11*x1540))))+IKsqr((((x1538*x1539))+(((-1.0)*r10*x1534*x1536))+(((-1.0)*r20*x1536*x1538))+((cj11*x1540))+((x1534*x1535))+((sj11*x1537))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((cj11*x1537))+(((-1.0)*r10*x1536*x1538))+((x1535*x1538))+((cj15*r20*x1534))+(((-1.0)*x1534*x1539))+(((-1.0)*sj11*x1540))), (((x1538*x1539))+(((-1.0)*r10*x1534*x1536))+(((-1.0)*r20*x1536*x1538))+((cj11*x1540))+((x1534*x1535))+((sj11*x1537))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1541=IKcos(j12);
IkReal x1542=IKsin(j12);
IkReal x1543=(cj15*r10);
IkReal x1544=((0.4)*cj11);
IkReal x1545=((1.0)*sj14);
IkReal x1546=(r11*sj15);
IkReal x1547=((1.0)*cj14);
IkReal x1548=(cj15*r20);
IkReal x1549=(cj13*cj14);
IkReal x1550=(sj13*sj15);
IkReal x1551=(cj15*sj13);
IkReal x1552=(r21*sj15);
IkReal x1553=(cj11*x1541);
IkReal x1554=(sj11*x1541);
IkReal x1555=(sj11*x1542);
IkReal x1556=(cj11*x1542);
IkReal x1557=((1.0)*x1555);
evalcond[0]=(((sj14*x1543))+x1554+x1556+(((-1.0)*x1545*x1546))+(((-1.0)*r12*x1547)));
evalcond[1]=(((sj14*x1548))+(((-1.0)*r22*x1547))+x1553+(((-1.0)*x1545*x1552))+(((-1.0)*x1557)));
evalcond[2]=(((x1541*x1544))+(((-9.9e-7)*x1552))+(((-1.0)*pz))+(((-0.4)*x1555))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+(((9.9e-7)*x1548)));
evalcond[3]=((((-1.93e-6)*sj11))+(((-9.9e-7)*x1546))+(((0.4)*x1554))+(((-1.0)*py))+x1544+((x1542*x1544))+(((9.9e-7)*x1543)));
evalcond[4]=((((-1.0)*cj13*r12*x1545))+((r11*x1551))+((x1546*x1549))+x1553+(((-1.0)*cj13*x1543*x1547))+(((-1.0)*x1557))+((r10*x1550)));
evalcond[5]=((((-1.0)*x1554))+(((-1.0)*x1556))+((x1549*x1552))+(((-1.0)*cj13*x1547*x1548))+(((-1.0)*cj13*r22*x1545))+((r21*x1551))+((r20*x1550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1558=((1.0)*cj11);
IkReal x1559=(sj14*sj15);
IkReal x1560=(cj14*r12);
IkReal x1561=((1.0)*sj11);
IkReal x1562=(cj14*r22);
IkReal x1563=(cj15*r20*sj14);
IkReal x1564=(cj15*r10*sj14);
if( IKabs((((sj11*x1563))+(((-1.0)*r11*x1558*x1559))+((cj11*x1564))+(((-1.0)*r21*x1559*x1561))+(((-1.0)*x1561*x1562))+(((-1.0)*x1558*x1560)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj11*x1564))+(((-1.0)*x1560*x1561))+((cj11*x1562))+(((-1.0)*r11*x1559*x1561))+((cj11*r21*x1559))+(((-1.0)*x1558*x1563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj11*x1563))+(((-1.0)*r11*x1558*x1559))+((cj11*x1564))+(((-1.0)*r21*x1559*x1561))+(((-1.0)*x1561*x1562))+(((-1.0)*x1558*x1560))))+IKsqr((((sj11*x1564))+(((-1.0)*x1560*x1561))+((cj11*x1562))+(((-1.0)*r11*x1559*x1561))+((cj11*r21*x1559))+(((-1.0)*x1558*x1563))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((sj11*x1563))+(((-1.0)*r11*x1558*x1559))+((cj11*x1564))+(((-1.0)*r21*x1559*x1561))+(((-1.0)*x1561*x1562))+(((-1.0)*x1558*x1560))), (((sj11*x1564))+(((-1.0)*x1560*x1561))+((cj11*x1562))+(((-1.0)*r11*x1559*x1561))+((cj11*r21*x1559))+(((-1.0)*x1558*x1563))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1565=IKsin(j12);
IkReal x1566=IKcos(j12);
IkReal x1567=(cj15*r10);
IkReal x1568=((0.4)*cj11);
IkReal x1569=((1.0)*sj14);
IkReal x1570=(r11*sj15);
IkReal x1571=((1.0)*cj14);
IkReal x1572=((0.4)*sj11);
IkReal x1573=(cj15*r20);
IkReal x1574=(cj13*cj14);
IkReal x1575=(r21*sj15);
IkReal x1576=(sj13*sj15);
IkReal x1577=(cj15*sj13);
IkReal x1578=(sj11*x1565);
IkReal x1579=(cj11*x1566);
IkReal x1580=((1.0)*cj11*x1565);
IkReal x1581=((1.0)*sj11*x1566);
IkReal x1582=(x1580+x1581);
evalcond[0]=(((sj14*x1573))+(((-1.0)*r22*x1571))+x1579+(((-1.0)*x1569*x1575))+(((-1.0)*x1578)));
evalcond[1]=((((-1.0)*x1582))+((sj14*x1567))+(((-1.0)*x1569*x1570))+(((-1.0)*r12*x1571)));
evalcond[2]=(((x1566*x1568))+(((9.9e-7)*x1573))+(((-1.0)*x1565*x1572))+(((-9.9e-7)*x1575))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((-1.0)*x1572)));
evalcond[3]=((((-1.0)*x1565*x1568))+(((1.93e-6)*sj11))+(((-1.0)*x1566*x1572))+(((-9.9e-7)*x1570))+(((-1.0)*py))+(((-1.0)*x1568))+(((9.9e-7)*x1567)));
evalcond[4]=((((-1.0)*cj13*r12*x1569))+(((-1.0)*cj13*x1567*x1571))+((x1570*x1574))+x1578+((r11*x1577))+((r10*x1576))+(((-1.0)*x1579)));
evalcond[5]=((((-1.0)*x1582))+((r20*x1576))+((r21*x1577))+(((-1.0)*cj13*r22*x1569))+(((-1.0)*cj13*x1571*x1573))+((x1574*x1575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1583=(sj11*sj14);
IkReal x1584=(r11*sj15);
IkReal x1585=((1.0)*cj15);
IkReal x1586=(cj14*sj11);
IkReal x1587=(cj11*sj14);
IkReal x1588=(r20*sj10);
IkReal x1589=(r22*sj10);
IkReal x1590=(cj11*cj14);
IkReal x1591=(r21*sj10*sj15);
CheckValue<IkReal> x1592 = IKatan2WithCheck(IkReal((((x1584*x1587))+((r12*x1590))+(((-1.0)*x1583*x1591))+(((-1.0)*x1586*x1589))+(((-1.0)*r10*x1585*x1587))+((cj15*x1583*x1588)))),IkReal((((x1587*x1591))+((x1589*x1590))+(((-1.0)*r10*x1583*x1585))+((r12*x1586))+((x1583*x1584))+(((-1.0)*x1585*x1587*x1588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1592.valid){
continue;
}
CheckValue<IkReal> x1593=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x1593.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1592.value)+(((1.5707963267949)*(x1593.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x1594=IKsin(j12);
IkReal x1595=IKcos(j12);
IkReal x1596=(cj15*sj14);
IkReal x1597=((1.0)*sj11);
IkReal x1598=((1.0)*sj14);
IkReal x1599=(r11*sj15);
IkReal x1600=((1.0)*cj14);
IkReal x1601=(cj15*r20);
IkReal x1602=(sj13*sj15);
IkReal x1603=(r01*sj15);
IkReal x1604=(r21*sj15);
IkReal x1605=(cj13*cj14);
IkReal x1606=((0.4)*sj11);
IkReal x1607=(cj15*r10);
IkReal x1608=((0.4)*cj11);
IkReal x1609=(cj15*sj13);
IkReal x1610=((1.93e-6)*sj11);
IkReal x1611=(cj15*r00);
IkReal x1612=(sj10*x1594);
IkReal x1613=(cj11*x1595);
IkReal x1614=(cj10*x1594);
IkReal x1615=(cj10*x1595);
IkReal x1616=(sj10*x1595);
evalcond[0]=(((r20*x1596))+x1613+(((-1.0)*x1594*x1597))+(((-1.0)*r22*x1600))+(((-1.0)*x1598*x1604)));
evalcond[1]=(((r00*x1596))+((sj11*x1615))+(((-1.0)*r02*x1600))+(((-1.0)*x1598*x1603))+((cj11*x1614)));
evalcond[2]=(((sj11*x1616))+(((-1.0)*x1598*x1599))+(((-1.0)*r12*x1600))+((r10*x1596))+((cj11*x1612)));
evalcond[3]=(((x1595*x1608))+(((-1.0)*x1594*x1606))+(((-1.0)*x1606))+(((-9.9e-7)*x1604))+(((9.9e-7)*x1601))+(((-1.0)*pz))+(((-1.93e-6)*cj11)));
evalcond[4]=((((-9.9e-7)*x1603))+((x1608*x1614))+(((-1.0)*px))+(((9.9e-7)*x1611))+(((-1.0)*cj10*x1610))+((cj10*x1608))+((x1606*x1615)));
evalcond[5]=(((sj10*x1608))+(((-9.9e-7)*x1599))+(((-1.0)*sj10*x1610))+(((9.9e-7)*x1607))+((x1608*x1612))+(((-1.0)*py))+((x1606*x1616)));
evalcond[6]=((((-1.0)*cj13*r22*x1598))+(((-1.0)*x1595*x1597))+((r21*x1609))+(((-1.0)*cj11*x1594))+((x1604*x1605))+(((-1.0)*cj13*x1600*x1601))+((r20*x1602)));
evalcond[7]=(((r00*x1602))+((r01*x1609))+(((-1.0)*x1597*x1614))+((cj10*x1613))+(((-1.0)*cj13*r02*x1598))+(((-1.0)*cj13*x1600*x1611))+((x1603*x1605)));
evalcond[8]=(((sj10*x1613))+((x1599*x1605))+(((-1.0)*cj13*r12*x1598))+((r11*x1609))+(((-1.0)*x1597*x1612))+((r10*x1602))+(((-1.0)*cj13*x1600*x1607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1617=(cj10*cj11);
IkReal x1618=(cj14*r22);
IkReal x1619=(sj14*sj15);
IkReal x1620=(cj14*r02);
IkReal x1621=(cj10*sj11);
IkReal x1622=((1.0)*cj15*sj14);
CheckValue<IkReal> x1623=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x1623.valid){
continue;
}
CheckValue<IkReal> x1624 = IKatan2WithCheck(IkReal((((cj11*x1620))+((cj15*r20*sj14*x1621))+(((-1.0)*r21*x1619*x1621))+(((-1.0)*cj11*r00*x1622))+((cj11*r01*x1619))+(((-1.0)*x1618*x1621)))),IkReal(((((-1.0)*r00*sj11*x1622))+(((-1.0)*r20*x1617*x1622))+((x1617*x1618))+((sj11*x1620))+((r21*x1617*x1619))+((r01*sj11*x1619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1624.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1623.value)))+(x1624.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x1625=IKsin(j12);
IkReal x1626=IKcos(j12);
IkReal x1627=(cj15*sj14);
IkReal x1628=((1.0)*sj11);
IkReal x1629=((1.0)*sj14);
IkReal x1630=(r11*sj15);
IkReal x1631=((1.0)*cj14);
IkReal x1632=(cj15*r20);
IkReal x1633=(sj13*sj15);
IkReal x1634=(r01*sj15);
IkReal x1635=(r21*sj15);
IkReal x1636=(cj13*cj14);
IkReal x1637=((0.4)*sj11);
IkReal x1638=(cj15*r10);
IkReal x1639=((0.4)*cj11);
IkReal x1640=(cj15*sj13);
IkReal x1641=((1.93e-6)*sj11);
IkReal x1642=(cj15*r00);
IkReal x1643=(sj10*x1625);
IkReal x1644=(cj11*x1626);
IkReal x1645=(cj10*x1625);
IkReal x1646=(cj10*x1626);
IkReal x1647=(sj10*x1626);
evalcond[0]=((((-1.0)*r22*x1631))+((r20*x1627))+x1644+(((-1.0)*x1625*x1628))+(((-1.0)*x1629*x1635)));
evalcond[1]=(((sj11*x1646))+((r00*x1627))+((cj11*x1645))+(((-1.0)*x1629*x1634))+(((-1.0)*r02*x1631)));
evalcond[2]=(((sj11*x1647))+(((-1.0)*r12*x1631))+((cj11*x1643))+(((-1.0)*x1629*x1630))+((r10*x1627)));
evalcond[3]=((((9.9e-7)*x1632))+(((-1.0)*x1625*x1637))+(((-1.0)*x1637))+(((-1.0)*pz))+(((-9.9e-7)*x1635))+(((-1.93e-6)*cj11))+((x1626*x1639)));
evalcond[4]=(((cj10*x1639))+(((9.9e-7)*x1642))+((x1637*x1646))+(((-1.0)*cj10*x1641))+(((-1.0)*px))+(((-9.9e-7)*x1634))+((x1639*x1645)));
evalcond[5]=(((x1637*x1647))+(((9.9e-7)*x1638))+((sj10*x1639))+(((-1.0)*py))+(((-9.9e-7)*x1630))+((x1639*x1643))+(((-1.0)*sj10*x1641)));
evalcond[6]=((((-1.0)*cj13*x1631*x1632))+((r21*x1640))+(((-1.0)*cj13*r22*x1629))+((r20*x1633))+(((-1.0)*cj11*x1625))+((x1635*x1636))+(((-1.0)*x1626*x1628)));
evalcond[7]=((((-1.0)*cj13*x1631*x1642))+((r00*x1633))+((r01*x1640))+(((-1.0)*x1628*x1645))+((x1634*x1636))+(((-1.0)*cj13*r02*x1629))+((cj10*x1644)));
evalcond[8]=((((-1.0)*cj13*x1631*x1638))+((r11*x1640))+((r10*x1633))+((sj10*x1644))+(((-1.0)*x1628*x1643))+((x1630*x1636))+(((-1.0)*cj13*r12*x1629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1648=cj10*cj10;
IkReal x1649=((0.00019107)*cj10);
IkReal x1650=(r01*sj15);
IkReal x1651=((0.4)*sj14);
IkReal x1652=(r21*sj15);
IkReal x1653=(cj15*r00);
IkReal x1654=(cj10*sj14);
IkReal x1655=(cj15*r20);
IkReal x1656=(cj10*px);
IkReal x1657=(cj10*cj14*r02);
IkReal x1658=((((0.4)*cj14*r22))+(((9.9e-7)*x1655))+(((-1.0)*pz))+(((-9.9e-7)*x1652))+((x1651*x1652))+(((-1.0)*x1651*x1655)));
IkReal x1659=(x1648*x1658);
CheckValue<IkReal> x1660=IKPowWithIntegerCheck(IKsign(x1648),-1);
if(!x1660.valid){
continue;
}
CheckValue<IkReal> x1661 = IKatan2WithCheck(IkReal(((((193.0)*x1656))+(((-77.2)*x1650*x1654))+(((-77.2)*x1657))+((x1649*x1650))+(((-40000000.0)*x1659))+(((-1.0)*x1649*x1653))+(((77.2)*x1653*x1654)))),IkReal(((((-193.0)*x1659))+(((-39.6)*cj10*x1650))+(((39.6)*cj10*x1653))+(((-16000000.0)*x1653*x1654))+(((-40000000.0)*x1656))+(((16000000.0)*x1650*x1654))+(((16000000.0)*x1657)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1661.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1660.value)))+(x1661.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x1662=IKsin(j11);
IkReal x1663=sj10*sj10;
IkReal x1664=IKcos(j11);
IkReal x1665=cj10*cj10;
IkReal x1666=(cj10*sj15);
IkReal x1667=((9.9e-7)*r11);
IkReal x1668=(cj15*r20);
IkReal x1669=((0.4)*sj14);
IkReal x1670=(cj15*r00);
IkReal x1671=((0.4)*cj10);
IkReal x1672=(cj15*sj13);
IkReal x1673=(cj13*r22);
IkReal x1674=((0.4)*r11);
IkReal x1675=(cj10*sj10);
IkReal x1676=(r21*sj15);
IkReal x1677=((0.4)*r01);
IkReal x1678=((0.4)*cj14);
IkReal x1679=((9.9e-7)*cj10);
IkReal x1680=(cj13*cj14);
IkReal x1681=((0.4)*sj10);
IkReal x1682=(sj10*sj15);
IkReal x1683=(cj15*r10);
IkReal x1684=((0.4)*sj13*sj15);
IkReal x1685=(sj10*x1678);
IkReal x1686=((9.9e-7)*cj15*sj10);
IkReal x1687=((0.4)*x1664);
IkReal x1688=((9.9e-7)*r01*sj15);
IkReal x1689=((1.93e-6)*x1662);
IkReal x1690=((1.93e-6)*x1664);
IkReal x1691=(x1675*x1689);
IkReal x1692=(sj10*x1664*x1671);
evalcond[0]=((((-1.0)*x1690))+(((-1.0)*x1668*x1669))+(((9.9e-7)*x1668))+(((-0.4)*x1662))+((x1669*x1676))+(((-1.0)*pz))+(((-9.9e-7)*x1676))+((r22*x1678)));
evalcond[1]=((((-9.9e-7)*sj10*x1683))+(((-1.0)*r12*x1685))+((x1667*x1682))+(((-1.0)*r11*x1669*x1682))+((sj10*x1669*x1683))+((py*sj10))+((x1663*x1689))+(((-1.0)*x1663*x1687)));
evalcond[2]=(((cj10*px))+(((-1.0)*x1665*x1687))+((cj10*x1669*x1670))+(((-1.0)*r01*x1666*x1669))+(((-1.0)*x1670*x1679))+((x1665*x1689))+(((-1.0)*cj14*r02*x1671))+(((9.9e-7)*r01*x1666)));
evalcond[3]=((((9.9e-7)*sj10*x1676))+((r10*x1684))+(((-1.0)*cj13*r12*x1669))+(((-9.9e-7)*sj10*x1668))+((sj15*x1674*x1680))+((x1662*x1681))+((pz*sj10))+(((-1.0)*cj13*x1678*x1683))+((sj10*x1690))+((x1672*x1674)));
evalcond[4]=(((cj10*pz))+((r00*x1684))+((cj10*x1690))+(((-1.0)*x1668*x1679))+((x1662*x1671))+(((-1.0)*cj13*r02*x1669))+((x1672*x1677))+((sj15*x1677*x1680))+(((9.9e-7)*r21*x1666))+(((-1.0)*cj13*x1670*x1678)));
evalcond[5]=(((cj13*x1668*x1685))+(((-1.0)*r20*sj13*sj15*x1681))+(((-9.9e-7)*x1683))+(((-1.0)*cj13*x1676*x1685))+(((-1.0)*x1664*x1681))+py+(((-1.0)*r21*x1672*x1681))+((sj10*x1689))+((sj10*x1669*x1673))+((sj15*x1667)));
evalcond[6]=((((-0.4)*r20*sj13*x1666))+((x1668*x1671*x1680))+((cj10*x1689))+x1688+((cj10*x1669*x1673))+px+(((-1.0)*x1664*x1671))+(((-9.9e-7)*x1670))+(((-1.0)*r21*x1671*x1672))+(((-1.0)*cj13*r21*x1666*x1678)));
evalcond[7]=((((-1.0)*x1692))+(((9.9e-7)*r01*x1682))+((px*sj10))+x1691+(((-9.9e-7)*sj10*x1670))+(((-1.0)*cj14*r12*x1671))+(((-1.0)*r11*x1666*x1669))+((cj10*x1669*x1683)));
evalcond[8]=(((cj10*py))+(((-1.0)*x1692))+x1691+(((-1.0)*x1679*x1683))+(((-1.0)*r01*x1669*x1682))+(((-1.0)*r02*x1685))+((x1666*x1667))+((sj10*x1669*x1670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[2];
j12eval[0]=cj10;
j12eval[1]=IKsign(cj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
j12eval[0]=sj10;
j12eval[1]=IKsign(sj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1693=(cj15*r00);
IkReal x1694=(cj14*r22);
IkReal x1695=(r21*sj15);
IkReal x1696=(cj11*sj14);
IkReal x1697=(sj11*sj14);
IkReal x1698=(cj15*r20);
IkReal x1699=(r01*sj15);
IkReal x1700=(cj14*r02);
IkReal x1701=((1.0)*x1697);
if( IKabs(((((-1.0)*x1693*x1696))+((cj11*x1700))+(((-1.0)*sj11*x1694))+((x1697*x1698))+(((-1.0)*x1695*x1701))+((x1696*x1699)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1695*x1696))+((cj11*x1694))+((sj11*x1700))+((x1697*x1699))+(((-1.0)*x1693*x1701))+(((-1.0)*x1696*x1698)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1693*x1696))+((cj11*x1700))+(((-1.0)*sj11*x1694))+((x1697*x1698))+(((-1.0)*x1695*x1701))+((x1696*x1699))))+IKsqr((((x1695*x1696))+((cj11*x1694))+((sj11*x1700))+((x1697*x1699))+(((-1.0)*x1693*x1701))+(((-1.0)*x1696*x1698))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*x1693*x1696))+((cj11*x1700))+(((-1.0)*sj11*x1694))+((x1697*x1698))+(((-1.0)*x1695*x1701))+((x1696*x1699))), (((x1695*x1696))+((cj11*x1694))+((sj11*x1700))+((x1697*x1699))+(((-1.0)*x1693*x1701))+(((-1.0)*x1696*x1698))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1702=IKcos(j12);
IkReal x1703=IKsin(j12);
IkReal x1704=(cj13*cj14);
IkReal x1705=(r01*sj15);
IkReal x1706=((0.4)*cj11);
IkReal x1707=(cj15*r20);
IkReal x1708=((1.0)*r22);
IkReal x1709=(sj13*sj15);
IkReal x1710=(cj15*r00);
IkReal x1711=(cj13*sj14);
IkReal x1712=((1.0)*r02);
IkReal x1713=((1.0)*sj14);
IkReal x1714=(cj15*sj13);
IkReal x1715=(r21*sj15);
IkReal x1716=(cj11*x1702);
IkReal x1717=(sj11*x1702);
IkReal x1718=(sj11*x1703);
IkReal x1719=(cj11*x1703);
IkReal x1720=((1.0)*x1718);
evalcond[0]=(x1717+x1719+(((-1.0)*cj14*x1712))+(((-1.0)*x1705*x1713))+((sj14*x1710)));
evalcond[1]=(x1716+(((-1.0)*x1713*x1715))+(((-1.0)*cj14*x1708))+((sj14*x1707))+(((-1.0)*x1720)));
evalcond[2]=((((9.9e-7)*x1707))+(((-0.4)*x1718))+(((-1.0)*pz))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+(((-9.9e-7)*x1715))+((x1702*x1706)));
evalcond[3]=(x1706+(((9.9e-7)*x1710))+(((-1.93e-6)*sj11))+((x1703*x1706))+(((-1.0)*px))+(((-9.9e-7)*x1705))+(((0.4)*x1717)));
evalcond[4]=(x1716+((r00*x1709))+((r01*x1714))+((x1704*x1705))+(((-1.0)*x1711*x1712))+(((-1.0)*x1704*x1710))+(((-1.0)*x1720)));
evalcond[5]=((((-1.0)*x1717))+(((-1.0)*x1719))+(((-1.0)*x1708*x1711))+((r20*x1709))+((x1704*x1715))+((r21*x1714))+(((-1.0)*x1704*x1707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1721=(sj11*sj14);
IkReal x1722=(r21*sj15);
IkReal x1723=(cj15*r20);
IkReal x1724=(cj11*sj14);
IkReal x1725=(cj15*r00);
IkReal x1726=((1.0)*cj14);
IkReal x1727=((1.0)*r01*sj14*sj15);
if( IKabs((((x1724*x1725))+(((-1.0)*r22*sj11*x1726))+(((-1.0)*cj11*r02*x1726))+((x1721*x1723))+(((-1.0)*r01*sj15*x1724))+(((-1.0)*x1721*x1722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1722*x1724))+((cj11*cj14*r22))+(((-1.0)*x1723*x1724))+((x1721*x1725))+(((-1.0)*r01*sj15*x1721))+(((-1.0)*r02*sj11*x1726)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1724*x1725))+(((-1.0)*r22*sj11*x1726))+(((-1.0)*cj11*r02*x1726))+((x1721*x1723))+(((-1.0)*r01*sj15*x1724))+(((-1.0)*x1721*x1722))))+IKsqr((((x1722*x1724))+((cj11*cj14*r22))+(((-1.0)*x1723*x1724))+((x1721*x1725))+(((-1.0)*r01*sj15*x1721))+(((-1.0)*r02*sj11*x1726))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((x1724*x1725))+(((-1.0)*r22*sj11*x1726))+(((-1.0)*cj11*r02*x1726))+((x1721*x1723))+(((-1.0)*r01*sj15*x1724))+(((-1.0)*x1721*x1722))), (((x1722*x1724))+((cj11*cj14*r22))+(((-1.0)*x1723*x1724))+((x1721*x1725))+(((-1.0)*r01*sj15*x1721))+(((-1.0)*r02*sj11*x1726))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1728=IKsin(j12);
IkReal x1729=IKcos(j12);
IkReal x1730=(cj13*cj14);
IkReal x1731=(r01*sj15);
IkReal x1732=((0.4)*cj11);
IkReal x1733=(cj15*r20);
IkReal x1734=((1.0)*r22);
IkReal x1735=((0.4)*sj11);
IkReal x1736=(sj13*sj15);
IkReal x1737=(cj15*r00);
IkReal x1738=(cj13*sj14);
IkReal x1739=((1.0)*sj14);
IkReal x1740=(r21*sj15);
IkReal x1741=((1.0)*r02);
IkReal x1742=(cj15*sj13);
IkReal x1743=(sj11*x1728);
IkReal x1744=(cj11*x1729);
IkReal x1745=((1.0)*cj11*x1728);
IkReal x1746=((1.0)*sj11*x1729);
IkReal x1747=(x1745+x1746);
evalcond[0]=(x1744+((sj14*x1733))+(((-1.0)*x1739*x1740))+(((-1.0)*x1743))+(((-1.0)*cj14*x1734)));
evalcond[1]=((((-1.0)*x1731*x1739))+((sj14*x1737))+(((-1.0)*x1747))+(((-1.0)*cj14*x1741)));
evalcond[2]=((((-9.9e-7)*x1740))+(((-1.0)*x1728*x1735))+((x1729*x1732))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((9.9e-7)*x1733))+(((-1.0)*x1735)));
evalcond[3]=((((-1.0)*x1728*x1732))+(((1.93e-6)*sj11))+(((-9.9e-7)*x1731))+(((-1.0)*x1729*x1735))+(((-1.0)*px))+(((9.9e-7)*x1737))+(((-1.0)*x1732)));
evalcond[4]=(((x1730*x1731))+((r00*x1736))+x1743+(((-1.0)*x1738*x1741))+(((-1.0)*x1744))+(((-1.0)*x1730*x1737))+((r01*x1742)));
evalcond[5]=(((x1730*x1740))+((r21*x1742))+(((-1.0)*x1747))+(((-1.0)*x1730*x1733))+(((-1.0)*x1734*x1738))+((r20*x1736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1748=(sj11*sj14);
IkReal x1749=(r11*sj15);
IkReal x1750=((1.0)*cj15);
IkReal x1751=(cj14*r12);
IkReal x1752=(cj11*sj14);
IkReal x1753=(r21*sj15);
IkReal x1754=(cj14*r22);
if( IKabs((((x1749*x1752))+((cj15*r20*x1748))+(((-1.0)*x1748*x1753))+(((-1.0)*sj11*x1754))+((cj11*x1751))+(((-1.0)*r10*x1750*x1752)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1752*x1753))+((sj11*x1751))+(((-1.0)*r20*x1750*x1752))+((x1748*x1749))+((cj11*x1754))+(((-1.0)*r10*x1748*x1750)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1749*x1752))+((cj15*r20*x1748))+(((-1.0)*x1748*x1753))+(((-1.0)*sj11*x1754))+((cj11*x1751))+(((-1.0)*r10*x1750*x1752))))+IKsqr((((x1752*x1753))+((sj11*x1751))+(((-1.0)*r20*x1750*x1752))+((x1748*x1749))+((cj11*x1754))+(((-1.0)*r10*x1748*x1750))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((x1749*x1752))+((cj15*r20*x1748))+(((-1.0)*x1748*x1753))+(((-1.0)*sj11*x1754))+((cj11*x1751))+(((-1.0)*r10*x1750*x1752))), (((x1752*x1753))+((sj11*x1751))+(((-1.0)*r20*x1750*x1752))+((x1748*x1749))+((cj11*x1754))+(((-1.0)*r10*x1748*x1750))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1755=IKcos(j12);
IkReal x1756=IKsin(j12);
IkReal x1757=(cj15*r10);
IkReal x1758=((0.4)*cj11);
IkReal x1759=((1.0)*sj14);
IkReal x1760=(r11*sj15);
IkReal x1761=((1.0)*cj14);
IkReal x1762=(cj15*r20);
IkReal x1763=(cj13*cj14);
IkReal x1764=(sj13*sj15);
IkReal x1765=(cj15*sj13);
IkReal x1766=(r21*sj15);
IkReal x1767=(cj11*x1755);
IkReal x1768=(sj11*x1755);
IkReal x1769=(sj11*x1756);
IkReal x1770=(cj11*x1756);
IkReal x1771=((1.0)*x1769);
evalcond[0]=(x1768+x1770+(((-1.0)*x1759*x1760))+((sj14*x1757))+(((-1.0)*r12*x1761)));
evalcond[1]=(((sj14*x1762))+x1767+(((-1.0)*x1759*x1766))+(((-1.0)*x1771))+(((-1.0)*r22*x1761)));
evalcond[2]=((((9.9e-7)*x1762))+(((-9.9e-7)*x1766))+(((-1.0)*pz))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+(((-0.4)*x1769))+((x1755*x1758)));
evalcond[3]=((((0.4)*x1768))+x1758+(((-1.93e-6)*sj11))+(((-9.9e-7)*x1760))+(((-1.0)*py))+((x1756*x1758))+(((9.9e-7)*x1757)));
evalcond[4]=(x1767+(((-1.0)*cj13*r12*x1759))+((r11*x1765))+(((-1.0)*cj13*x1757*x1761))+(((-1.0)*x1771))+((r10*x1764))+((x1760*x1763)));
evalcond[5]=(((r21*x1765))+(((-1.0)*x1768))+((r20*x1764))+(((-1.0)*x1770))+(((-1.0)*cj13*r22*x1759))+(((-1.0)*cj13*x1761*x1762))+((x1763*x1766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1772=((1.0)*cj11);
IkReal x1773=(sj14*sj15);
IkReal x1774=(cj14*r12);
IkReal x1775=((1.0)*sj11);
IkReal x1776=(cj14*r22);
IkReal x1777=(cj15*r20*sj14);
IkReal x1778=(cj15*r10*sj14);
if( IKabs(((((-1.0)*x1772*x1774))+((cj11*x1778))+(((-1.0)*r21*x1773*x1775))+((sj11*x1777))+(((-1.0)*x1775*x1776))+(((-1.0)*r11*x1772*x1773)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1772*x1777))+(((-1.0)*r11*x1773*x1775))+((cj11*r21*x1773))+((cj11*x1776))+((sj11*x1778))+(((-1.0)*x1774*x1775)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1772*x1774))+((cj11*x1778))+(((-1.0)*r21*x1773*x1775))+((sj11*x1777))+(((-1.0)*x1775*x1776))+(((-1.0)*r11*x1772*x1773))))+IKsqr(((((-1.0)*x1772*x1777))+(((-1.0)*r11*x1773*x1775))+((cj11*r21*x1773))+((cj11*x1776))+((sj11*x1778))+(((-1.0)*x1774*x1775))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*x1772*x1774))+((cj11*x1778))+(((-1.0)*r21*x1773*x1775))+((sj11*x1777))+(((-1.0)*x1775*x1776))+(((-1.0)*r11*x1772*x1773))), ((((-1.0)*x1772*x1777))+(((-1.0)*r11*x1773*x1775))+((cj11*r21*x1773))+((cj11*x1776))+((sj11*x1778))+(((-1.0)*x1774*x1775))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1779=IKsin(j12);
IkReal x1780=IKcos(j12);
IkReal x1781=(cj15*r10);
IkReal x1782=((0.4)*cj11);
IkReal x1783=((1.0)*sj14);
IkReal x1784=(r11*sj15);
IkReal x1785=((1.0)*cj14);
IkReal x1786=((0.4)*sj11);
IkReal x1787=(cj15*r20);
IkReal x1788=(cj13*cj14);
IkReal x1789=(r21*sj15);
IkReal x1790=(sj13*sj15);
IkReal x1791=(cj15*sj13);
IkReal x1792=(sj11*x1779);
IkReal x1793=(cj11*x1780);
IkReal x1794=((1.0)*cj11*x1779);
IkReal x1795=((1.0)*sj11*x1780);
IkReal x1796=(x1795+x1794);
evalcond[0]=((((-1.0)*x1783*x1789))+((sj14*x1787))+x1793+(((-1.0)*r22*x1785))+(((-1.0)*x1792)));
evalcond[1]=((((-1.0)*x1796))+(((-1.0)*x1783*x1784))+((sj14*x1781))+(((-1.0)*r12*x1785)));
evalcond[2]=((((-1.0)*x1786))+(((-9.9e-7)*x1789))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((9.9e-7)*x1787))+(((-1.0)*x1779*x1786))+((x1780*x1782)));
evalcond[3]=((((-1.0)*x1782))+(((1.93e-6)*sj11))+(((-9.9e-7)*x1784))+(((-1.0)*py))+(((9.9e-7)*x1781))+(((-1.0)*x1779*x1782))+(((-1.0)*x1780*x1786)));
evalcond[4]=(((r10*x1790))+x1792+(((-1.0)*cj13*x1781*x1785))+((x1784*x1788))+(((-1.0)*cj13*r12*x1783))+(((-1.0)*x1793))+((r11*x1791)));
evalcond[5]=((((-1.0)*x1796))+((r21*x1791))+(((-1.0)*cj13*x1785*x1787))+((x1788*x1789))+(((-1.0)*cj13*r22*x1783))+((r20*x1790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1797=(sj11*sj14);
IkReal x1798=(r11*sj15);
IkReal x1799=((1.0)*cj15);
IkReal x1800=(cj14*sj11);
IkReal x1801=(cj11*sj14);
IkReal x1802=(r20*sj10);
IkReal x1803=(r22*sj10);
IkReal x1804=(cj11*cj14);
IkReal x1805=(r21*sj10*sj15);
CheckValue<IkReal> x1806=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x1806.valid){
continue;
}
CheckValue<IkReal> x1807 = IKatan2WithCheck(IkReal(((((-1.0)*x1800*x1803))+(((-1.0)*x1797*x1805))+((cj15*x1797*x1802))+((x1798*x1801))+(((-1.0)*r10*x1799*x1801))+((r12*x1804)))),IkReal(((((-1.0)*r10*x1797*x1799))+((x1801*x1805))+((x1803*x1804))+((x1797*x1798))+((r12*x1800))+(((-1.0)*x1799*x1801*x1802)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1807.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1806.value)))+(x1807.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x1808=IKsin(j12);
IkReal x1809=IKcos(j12);
IkReal x1810=(cj15*sj14);
IkReal x1811=((1.0)*sj11);
IkReal x1812=((1.0)*sj14);
IkReal x1813=(r11*sj15);
IkReal x1814=((1.0)*cj14);
IkReal x1815=(cj15*r20);
IkReal x1816=(sj13*sj15);
IkReal x1817=(r01*sj15);
IkReal x1818=(r21*sj15);
IkReal x1819=(cj13*cj14);
IkReal x1820=((0.4)*sj11);
IkReal x1821=(cj15*r10);
IkReal x1822=((0.4)*cj11);
IkReal x1823=(cj15*sj13);
IkReal x1824=((1.93e-6)*sj11);
IkReal x1825=(cj15*r00);
IkReal x1826=(sj10*x1808);
IkReal x1827=(cj11*x1809);
IkReal x1828=(cj10*x1808);
IkReal x1829=(cj10*x1809);
IkReal x1830=(sj10*x1809);
evalcond[0]=((((-1.0)*x1812*x1818))+(((-1.0)*x1808*x1811))+((r20*x1810))+x1827+(((-1.0)*r22*x1814)));
evalcond[1]=(((sj11*x1829))+(((-1.0)*x1812*x1817))+(((-1.0)*r02*x1814))+((r00*x1810))+((cj11*x1828)));
evalcond[2]=((((-1.0)*x1812*x1813))+(((-1.0)*r12*x1814))+((sj11*x1830))+((cj11*x1826))+((r10*x1810)));
evalcond[3]=((((-1.0)*x1820))+(((9.9e-7)*x1815))+(((-9.9e-7)*x1818))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+((x1809*x1822))+(((-1.0)*x1808*x1820)));
evalcond[4]=((((9.9e-7)*x1825))+((cj10*x1822))+(((-9.9e-7)*x1817))+((x1822*x1828))+(((-1.0)*px))+((x1820*x1829))+(((-1.0)*cj10*x1824)));
evalcond[5]=((((9.9e-7)*x1821))+((sj10*x1822))+(((-9.9e-7)*x1813))+((x1820*x1830))+((x1822*x1826))+(((-1.0)*py))+(((-1.0)*sj10*x1824)));
evalcond[6]=(((x1818*x1819))+(((-1.0)*x1809*x1811))+((r20*x1816))+(((-1.0)*cj11*x1808))+(((-1.0)*cj13*x1814*x1815))+(((-1.0)*cj13*r22*x1812))+((r21*x1823)));
evalcond[7]=((((-1.0)*x1811*x1828))+((cj10*x1827))+((r01*x1823))+(((-1.0)*cj13*r02*x1812))+((x1817*x1819))+((r00*x1816))+(((-1.0)*cj13*x1814*x1825)));
evalcond[8]=((((-1.0)*x1811*x1826))+((x1813*x1819))+((sj10*x1827))+((r11*x1823))+(((-1.0)*cj13*r12*x1812))+((r10*x1816))+(((-1.0)*cj13*x1814*x1821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1831=(cj10*cj11);
IkReal x1832=(cj14*r22);
IkReal x1833=(sj14*sj15);
IkReal x1834=(cj14*r02);
IkReal x1835=(cj10*sj11);
IkReal x1836=((1.0)*cj15*sj14);
CheckValue<IkReal> x1837 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*r00*x1836))+(((-1.0)*x1832*x1835))+((cj11*x1834))+((cj11*r01*x1833))+((cj15*r20*sj14*x1835))+(((-1.0)*r21*x1833*x1835)))),IkReal((((r21*x1831*x1833))+(((-1.0)*r00*sj11*x1836))+((r01*sj11*x1833))+((x1831*x1832))+((sj11*x1834))+(((-1.0)*r20*x1831*x1836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1837.valid){
continue;
}
CheckValue<IkReal> x1838=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x1838.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1837.value)+(((1.5707963267949)*(x1838.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x1839=IKsin(j12);
IkReal x1840=IKcos(j12);
IkReal x1841=(cj15*sj14);
IkReal x1842=((1.0)*sj11);
IkReal x1843=((1.0)*sj14);
IkReal x1844=(r11*sj15);
IkReal x1845=((1.0)*cj14);
IkReal x1846=(cj15*r20);
IkReal x1847=(sj13*sj15);
IkReal x1848=(r01*sj15);
IkReal x1849=(r21*sj15);
IkReal x1850=(cj13*cj14);
IkReal x1851=((0.4)*sj11);
IkReal x1852=(cj15*r10);
IkReal x1853=((0.4)*cj11);
IkReal x1854=(cj15*sj13);
IkReal x1855=((1.93e-6)*sj11);
IkReal x1856=(cj15*r00);
IkReal x1857=(sj10*x1839);
IkReal x1858=(cj11*x1840);
IkReal x1859=(cj10*x1839);
IkReal x1860=(cj10*x1840);
IkReal x1861=(sj10*x1840);
evalcond[0]=((((-1.0)*x1843*x1849))+(((-1.0)*r22*x1845))+(((-1.0)*x1839*x1842))+((r20*x1841))+x1858);
evalcond[1]=((((-1.0)*x1843*x1848))+(((-1.0)*r02*x1845))+((sj11*x1860))+((r00*x1841))+((cj11*x1859)));
evalcond[2]=((((-1.0)*x1843*x1844))+((sj11*x1861))+((r10*x1841))+(((-1.0)*r12*x1845))+((cj11*x1857)));
evalcond[3]=((((9.9e-7)*x1846))+((x1840*x1853))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((-9.9e-7)*x1849))+(((-1.0)*x1839*x1851))+(((-1.0)*x1851)));
evalcond[4]=(((x1851*x1860))+(((9.9e-7)*x1856))+((cj10*x1853))+(((-1.0)*px))+((x1853*x1859))+(((-9.9e-7)*x1848))+(((-1.0)*cj10*x1855)));
evalcond[5]=(((x1851*x1861))+(((9.9e-7)*x1852))+((sj10*x1853))+(((-1.0)*py))+(((-1.0)*sj10*x1855))+((x1853*x1857))+(((-9.9e-7)*x1844)));
evalcond[6]=((((-1.0)*cj13*x1845*x1846))+((x1849*x1850))+((r20*x1847))+(((-1.0)*cj11*x1839))+(((-1.0)*x1840*x1842))+(((-1.0)*cj13*r22*x1843))+((r21*x1854)));
evalcond[7]=(((x1848*x1850))+((cj10*x1858))+(((-1.0)*cj13*r02*x1843))+((r01*x1854))+(((-1.0)*cj13*x1845*x1856))+(((-1.0)*x1842*x1859))+((r00*x1847)));
evalcond[8]=((((-1.0)*cj13*x1845*x1852))+((sj10*x1858))+((x1844*x1850))+(((-1.0)*x1842*x1857))+((r10*x1847))+(((-1.0)*cj13*r12*x1843))+((r11*x1854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1862=sj10*sj10;
IkReal x1863=(sj10*sj14);
IkReal x1864=(r11*sj15);
IkReal x1865=(cj15*r10);
IkReal x1866=((0.4)*sj14);
IkReal x1867=(r21*sj15);
IkReal x1868=(cj15*r20);
IkReal x1869=((0.00019107)*sj10);
IkReal x1870=(py*sj10);
IkReal x1871=(cj14*r12*sj10);
IkReal x1872=((((-9.9e-7)*x1867))+(((0.4)*cj14*r22))+(((-1.0)*x1866*x1868))+((x1866*x1867))+(((9.9e-7)*x1868))+(((-1.0)*pz)));
IkReal x1873=(x1862*x1872);
CheckValue<IkReal> x1874 = IKatan2WithCheck(IkReal(((((193.0)*x1870))+(((-40000000.0)*x1873))+((x1864*x1869))+(((-77.2)*x1863*x1864))+(((-1.0)*x1865*x1869))+(((77.2)*x1863*x1865))+(((-77.2)*x1871)))),IkReal(((((-40000000.0)*x1870))+(((-16000000.0)*x1863*x1865))+(((-193.0)*x1873))+(((39.6)*sj10*x1865))+(((16000000.0)*x1863*x1864))+(((-39.6)*sj10*x1864))+(((16000000.0)*x1871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1874.valid){
continue;
}
CheckValue<IkReal> x1875=IKPowWithIntegerCheck(IKsign(x1862),-1);
if(!x1875.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1874.value)+(((-1.5707963267949)*(x1875.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x1876=IKsin(j11);
IkReal x1877=sj10*sj10;
IkReal x1878=IKcos(j11);
IkReal x1879=cj10*cj10;
IkReal x1880=(cj10*sj15);
IkReal x1881=((9.9e-7)*r11);
IkReal x1882=(cj15*r20);
IkReal x1883=((0.4)*sj14);
IkReal x1884=(cj15*r00);
IkReal x1885=((0.4)*cj10);
IkReal x1886=(cj15*sj13);
IkReal x1887=(cj13*r22);
IkReal x1888=((0.4)*r11);
IkReal x1889=(cj10*sj10);
IkReal x1890=(r21*sj15);
IkReal x1891=((0.4)*r01);
IkReal x1892=((0.4)*cj14);
IkReal x1893=((9.9e-7)*cj10);
IkReal x1894=(cj13*cj14);
IkReal x1895=((0.4)*sj10);
IkReal x1896=(sj10*sj15);
IkReal x1897=(cj15*r10);
IkReal x1898=((0.4)*sj13*sj15);
IkReal x1899=(sj10*x1892);
IkReal x1900=((9.9e-7)*cj15*sj10);
IkReal x1901=((0.4)*x1878);
IkReal x1902=((9.9e-7)*r01*sj15);
IkReal x1903=((1.93e-6)*x1876);
IkReal x1904=((1.93e-6)*x1878);
IkReal x1905=(x1889*x1903);
IkReal x1906=(sj10*x1878*x1885);
evalcond[0]=(((r22*x1892))+(((-1.0)*x1882*x1883))+((x1883*x1890))+(((-9.9e-7)*x1890))+(((9.9e-7)*x1882))+(((-1.0)*pz))+(((-0.4)*x1876))+(((-1.0)*x1904)));
evalcond[1]=(((sj10*x1883*x1897))+((x1881*x1896))+((x1877*x1903))+(((-9.9e-7)*sj10*x1897))+((py*sj10))+(((-1.0)*r11*x1883*x1896))+(((-1.0)*r12*x1899))+(((-1.0)*x1877*x1901)));
evalcond[2]=((((-1.0)*r01*x1880*x1883))+((cj10*px))+(((-1.0)*cj14*r02*x1885))+(((9.9e-7)*r01*x1880))+((x1879*x1903))+(((-1.0)*x1879*x1901))+((cj10*x1883*x1884))+(((-1.0)*x1884*x1893)));
evalcond[3]=((((9.9e-7)*sj10*x1890))+((sj10*x1904))+((r10*x1898))+((x1876*x1895))+((pz*sj10))+(((-1.0)*cj13*r12*x1883))+(((-9.9e-7)*sj10*x1882))+((sj15*x1888*x1894))+((x1886*x1888))+(((-1.0)*cj13*x1892*x1897)));
evalcond[4]=(((cj10*pz))+((x1886*x1891))+((cj10*x1904))+((x1876*x1885))+((r00*x1898))+(((-1.0)*x1882*x1893))+(((-1.0)*cj13*r02*x1883))+((sj15*x1891*x1894))+(((-1.0)*cj13*x1884*x1892))+(((9.9e-7)*r21*x1880)));
evalcond[5]=((((-1.0)*x1878*x1895))+((sj10*x1883*x1887))+(((-1.0)*r20*sj13*sj15*x1895))+((sj10*x1903))+(((-9.9e-7)*x1897))+py+(((-1.0)*r21*x1886*x1895))+(((-1.0)*cj13*x1890*x1899))+((cj13*x1882*x1899))+((sj15*x1881)));
evalcond[6]=(((x1882*x1885*x1894))+(((-1.0)*cj13*r21*x1880*x1892))+(((-0.4)*r20*sj13*x1880))+((cj10*x1903))+(((-9.9e-7)*x1884))+(((-1.0)*x1878*x1885))+x1902+px+(((-1.0)*r21*x1885*x1886))+((cj10*x1883*x1887)));
evalcond[7]=((((-1.0)*r11*x1880*x1883))+(((-1.0)*cj14*r12*x1885))+((px*sj10))+x1905+(((-9.9e-7)*sj10*x1884))+(((9.9e-7)*r01*x1896))+((cj10*x1883*x1897))+(((-1.0)*x1906)));
evalcond[8]=((((-1.0)*x1893*x1897))+(((-1.0)*r02*x1899))+((sj10*x1883*x1884))+((cj10*py))+((x1880*x1881))+x1905+(((-1.0)*r01*x1883*x1896))+(((-1.0)*x1906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[2];
j12eval[0]=cj10;
j12eval[1]=IKsign(cj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
j12eval[0]=sj10;
j12eval[1]=IKsign(sj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1907=(cj15*r00);
IkReal x1908=(cj14*r22);
IkReal x1909=(r21*sj15);
IkReal x1910=(cj11*sj14);
IkReal x1911=(sj11*sj14);
IkReal x1912=(cj15*r20);
IkReal x1913=(r01*sj15);
IkReal x1914=(cj14*r02);
IkReal x1915=((1.0)*x1911);
if( IKabs(((((-1.0)*x1907*x1910))+(((-1.0)*sj11*x1908))+((x1910*x1913))+((x1911*x1912))+(((-1.0)*x1909*x1915))+((cj11*x1914)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj11*x1914))+(((-1.0)*x1910*x1912))+((x1911*x1913))+(((-1.0)*x1907*x1915))+((x1909*x1910))+((cj11*x1908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1907*x1910))+(((-1.0)*sj11*x1908))+((x1910*x1913))+((x1911*x1912))+(((-1.0)*x1909*x1915))+((cj11*x1914))))+IKsqr((((sj11*x1914))+(((-1.0)*x1910*x1912))+((x1911*x1913))+(((-1.0)*x1907*x1915))+((x1909*x1910))+((cj11*x1908))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*x1907*x1910))+(((-1.0)*sj11*x1908))+((x1910*x1913))+((x1911*x1912))+(((-1.0)*x1909*x1915))+((cj11*x1914))), (((sj11*x1914))+(((-1.0)*x1910*x1912))+((x1911*x1913))+(((-1.0)*x1907*x1915))+((x1909*x1910))+((cj11*x1908))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1916=IKcos(j12);
IkReal x1917=IKsin(j12);
IkReal x1918=(cj13*cj14);
IkReal x1919=(r01*sj15);
IkReal x1920=((0.4)*cj11);
IkReal x1921=(cj15*r20);
IkReal x1922=((1.0)*r22);
IkReal x1923=(sj13*sj15);
IkReal x1924=(cj15*r00);
IkReal x1925=(cj13*sj14);
IkReal x1926=((1.0)*r02);
IkReal x1927=((1.0)*sj14);
IkReal x1928=(cj15*sj13);
IkReal x1929=(r21*sj15);
IkReal x1930=(cj11*x1916);
IkReal x1931=(sj11*x1916);
IkReal x1932=(sj11*x1917);
IkReal x1933=(cj11*x1917);
IkReal x1934=((1.0)*x1932);
evalcond[0]=((((-1.0)*cj14*x1926))+((sj14*x1924))+x1933+x1931+(((-1.0)*x1919*x1927)));
evalcond[1]=((((-1.0)*cj14*x1922))+((sj14*x1921))+x1930+(((-1.0)*x1927*x1929))+(((-1.0)*x1934)));
evalcond[2]=((((-9.9e-7)*x1929))+(((9.9e-7)*x1921))+(((-1.0)*pz))+((x1916*x1920))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+(((-0.4)*x1932)));
evalcond[3]=((((-1.93e-6)*sj11))+(((0.4)*x1931))+(((9.9e-7)*x1924))+(((-1.0)*px))+(((-9.9e-7)*x1919))+x1920+((x1917*x1920)));
evalcond[4]=(((r01*x1928))+((r00*x1923))+(((-1.0)*x1918*x1924))+x1930+(((-1.0)*x1925*x1926))+((x1918*x1919))+(((-1.0)*x1934)));
evalcond[5]=(((x1918*x1929))+(((-1.0)*x1922*x1925))+(((-1.0)*x1933))+(((-1.0)*x1931))+((r20*x1923))+(((-1.0)*x1918*x1921))+((r21*x1928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1935=(sj11*sj14);
IkReal x1936=(r21*sj15);
IkReal x1937=(cj15*r20);
IkReal x1938=(cj11*sj14);
IkReal x1939=(cj15*r00);
IkReal x1940=((1.0)*cj14);
IkReal x1941=((1.0)*r01*sj14*sj15);
if( IKabs(((((-1.0)*x1935*x1936))+(((-1.0)*cj11*r02*x1940))+(((-1.0)*r01*sj15*x1938))+((x1935*x1937))+(((-1.0)*r22*sj11*x1940))+((x1938*x1939)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*cj14*r22))+((x1936*x1938))+(((-1.0)*r01*sj15*x1935))+((x1935*x1939))+(((-1.0)*x1937*x1938))+(((-1.0)*r02*sj11*x1940)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1935*x1936))+(((-1.0)*cj11*r02*x1940))+(((-1.0)*r01*sj15*x1938))+((x1935*x1937))+(((-1.0)*r22*sj11*x1940))+((x1938*x1939))))+IKsqr((((cj11*cj14*r22))+((x1936*x1938))+(((-1.0)*r01*sj15*x1935))+((x1935*x1939))+(((-1.0)*x1937*x1938))+(((-1.0)*r02*sj11*x1940))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*x1935*x1936))+(((-1.0)*cj11*r02*x1940))+(((-1.0)*r01*sj15*x1938))+((x1935*x1937))+(((-1.0)*r22*sj11*x1940))+((x1938*x1939))), (((cj11*cj14*r22))+((x1936*x1938))+(((-1.0)*r01*sj15*x1935))+((x1935*x1939))+(((-1.0)*x1937*x1938))+(((-1.0)*r02*sj11*x1940))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1942=IKsin(j12);
IkReal x1943=IKcos(j12);
IkReal x1944=(cj13*cj14);
IkReal x1945=(r01*sj15);
IkReal x1946=((0.4)*cj11);
IkReal x1947=(cj15*r20);
IkReal x1948=((1.0)*r22);
IkReal x1949=((0.4)*sj11);
IkReal x1950=(sj13*sj15);
IkReal x1951=(cj15*r00);
IkReal x1952=(cj13*sj14);
IkReal x1953=((1.0)*sj14);
IkReal x1954=(r21*sj15);
IkReal x1955=((1.0)*r02);
IkReal x1956=(cj15*sj13);
IkReal x1957=(sj11*x1942);
IkReal x1958=(cj11*x1943);
IkReal x1959=((1.0)*cj11*x1942);
IkReal x1960=((1.0)*sj11*x1943);
IkReal x1961=(x1960+x1959);
evalcond[0]=((((-1.0)*cj14*x1948))+x1958+(((-1.0)*x1957))+(((-1.0)*x1953*x1954))+((sj14*x1947)));
evalcond[1]=((((-1.0)*x1945*x1953))+(((-1.0)*x1961))+(((-1.0)*cj14*x1955))+((sj14*x1951)));
evalcond[2]=(((x1943*x1946))+(((-1.0)*x1949))+(((-1.0)*x1942*x1949))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((-9.9e-7)*x1954))+(((9.9e-7)*x1947)));
evalcond[3]=((((1.93e-6)*sj11))+(((-1.0)*x1946))+(((-1.0)*x1943*x1949))+(((-1.0)*x1942*x1946))+(((-1.0)*px))+(((-9.9e-7)*x1945))+(((9.9e-7)*x1951)));
evalcond[4]=((((-1.0)*x1944*x1951))+(((-1.0)*x1952*x1955))+((x1944*x1945))+x1957+(((-1.0)*x1958))+((r01*x1956))+((r00*x1950)));
evalcond[5]=((((-1.0)*x1948*x1952))+((r20*x1950))+(((-1.0)*x1944*x1947))+((x1944*x1954))+(((-1.0)*x1961))+((r21*x1956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1962=(sj11*sj14);
IkReal x1963=(r11*sj15);
IkReal x1964=((1.0)*cj15);
IkReal x1965=(cj14*r12);
IkReal x1966=(cj11*sj14);
IkReal x1967=(r21*sj15);
IkReal x1968=(cj14*r22);
if( IKabs(((((-1.0)*r10*x1964*x1966))+(((-1.0)*sj11*x1968))+((cj11*x1965))+((cj15*r20*x1962))+((x1963*x1966))+(((-1.0)*x1962*x1967)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1964*x1966))+((cj11*x1968))+(((-1.0)*r10*x1962*x1964))+((x1962*x1963))+((x1966*x1967))+((sj11*x1965)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1964*x1966))+(((-1.0)*sj11*x1968))+((cj11*x1965))+((cj15*r20*x1962))+((x1963*x1966))+(((-1.0)*x1962*x1967))))+IKsqr(((((-1.0)*r20*x1964*x1966))+((cj11*x1968))+(((-1.0)*r10*x1962*x1964))+((x1962*x1963))+((x1966*x1967))+((sj11*x1965))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r10*x1964*x1966))+(((-1.0)*sj11*x1968))+((cj11*x1965))+((cj15*r20*x1962))+((x1963*x1966))+(((-1.0)*x1962*x1967))), ((((-1.0)*r20*x1964*x1966))+((cj11*x1968))+(((-1.0)*r10*x1962*x1964))+((x1962*x1963))+((x1966*x1967))+((sj11*x1965))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1969=IKcos(j12);
IkReal x1970=IKsin(j12);
IkReal x1971=(cj15*r10);
IkReal x1972=((0.4)*cj11);
IkReal x1973=((1.0)*sj14);
IkReal x1974=(r11*sj15);
IkReal x1975=((1.0)*cj14);
IkReal x1976=(cj15*r20);
IkReal x1977=(cj13*cj14);
IkReal x1978=(sj13*sj15);
IkReal x1979=(cj15*sj13);
IkReal x1980=(r21*sj15);
IkReal x1981=(cj11*x1969);
IkReal x1982=(sj11*x1969);
IkReal x1983=(sj11*x1970);
IkReal x1984=(cj11*x1970);
IkReal x1985=((1.0)*x1983);
evalcond[0]=((((-1.0)*x1973*x1974))+x1984+x1982+((sj14*x1971))+(((-1.0)*r12*x1975)));
evalcond[1]=((((-1.0)*x1985))+(((-1.0)*r22*x1975))+(((-1.0)*x1973*x1980))+x1981+((sj14*x1976)));
evalcond[2]=(((x1969*x1972))+(((9.9e-7)*x1976))+(((-1.0)*pz))+(((-0.4)*x1983))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+(((-9.9e-7)*x1980)));
evalcond[3]=((((9.9e-7)*x1971))+(((-1.93e-6)*sj11))+((x1970*x1972))+(((-1.0)*py))+x1972+(((-9.9e-7)*x1974))+(((0.4)*x1982)));
evalcond[4]=((((-1.0)*x1985))+((r10*x1978))+((r11*x1979))+x1981+((x1974*x1977))+(((-1.0)*cj13*x1971*x1975))+(((-1.0)*cj13*r12*x1973)));
evalcond[5]=((((-1.0)*cj13*x1975*x1976))+((r20*x1978))+((r21*x1979))+(((-1.0)*x1984))+(((-1.0)*x1982))+(((-1.0)*cj13*r22*x1973))+((x1977*x1980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1986=((1.0)*cj11);
IkReal x1987=(sj14*sj15);
IkReal x1988=(cj14*r12);
IkReal x1989=((1.0)*sj11);
IkReal x1990=(cj14*r22);
IkReal x1991=(cj15*r20*sj14);
IkReal x1992=(cj15*r10*sj14);
if( IKabs(((((-1.0)*x1986*x1988))+(((-1.0)*r11*x1986*x1987))+((cj11*x1992))+(((-1.0)*r21*x1987*x1989))+(((-1.0)*x1989*x1990))+((sj11*x1991)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1986*x1991))+((cj11*x1990))+(((-1.0)*x1988*x1989))+((sj11*x1992))+((cj11*r21*x1987))+(((-1.0)*r11*x1987*x1989)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1986*x1988))+(((-1.0)*r11*x1986*x1987))+((cj11*x1992))+(((-1.0)*r21*x1987*x1989))+(((-1.0)*x1989*x1990))+((sj11*x1991))))+IKsqr(((((-1.0)*x1986*x1991))+((cj11*x1990))+(((-1.0)*x1988*x1989))+((sj11*x1992))+((cj11*r21*x1987))+(((-1.0)*r11*x1987*x1989))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*x1986*x1988))+(((-1.0)*r11*x1986*x1987))+((cj11*x1992))+(((-1.0)*r21*x1987*x1989))+(((-1.0)*x1989*x1990))+((sj11*x1991))), ((((-1.0)*x1986*x1991))+((cj11*x1990))+(((-1.0)*x1988*x1989))+((sj11*x1992))+((cj11*r21*x1987))+(((-1.0)*r11*x1987*x1989))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1993=IKsin(j12);
IkReal x1994=IKcos(j12);
IkReal x1995=(cj15*r10);
IkReal x1996=((0.4)*cj11);
IkReal x1997=((1.0)*sj14);
IkReal x1998=(r11*sj15);
IkReal x1999=((1.0)*cj14);
IkReal x2000=((0.4)*sj11);
IkReal x2001=(cj15*r20);
IkReal x2002=(cj13*cj14);
IkReal x2003=(r21*sj15);
IkReal x2004=(sj13*sj15);
IkReal x2005=(cj15*sj13);
IkReal x2006=(sj11*x1993);
IkReal x2007=(cj11*x1994);
IkReal x2008=((1.0)*cj11*x1993);
IkReal x2009=((1.0)*sj11*x1994);
IkReal x2010=(x2008+x2009);
evalcond[0]=(x2007+(((-1.0)*x2006))+((sj14*x2001))+(((-1.0)*x1997*x2003))+(((-1.0)*r22*x1999)));
evalcond[1]=((((-1.0)*x1997*x1998))+(((-1.0)*x2010))+((sj14*x1995))+(((-1.0)*r12*x1999)));
evalcond[2]=((((9.9e-7)*x2001))+((x1994*x1996))+(((-1.0)*pz))+(((-1.0)*x2000))+(((-1.93e-6)*cj11))+(((-9.9e-7)*x2003))+(((-1.0)*x1993*x2000)));
evalcond[3]=((((-1.0)*x1993*x1996))+(((1.93e-6)*sj11))+(((-9.9e-7)*x1998))+(((-1.0)*x1994*x2000))+(((-1.0)*py))+(((-1.0)*x1996))+(((9.9e-7)*x1995)));
evalcond[4]=(((r11*x2005))+((r10*x2004))+(((-1.0)*cj13*x1995*x1999))+x2006+(((-1.0)*x2007))+(((-1.0)*cj13*r12*x1997))+((x1998*x2002)));
evalcond[5]=(((r21*x2005))+((x2002*x2003))+(((-1.0)*x2010))+(((-1.0)*cj13*x1999*x2001))+((r20*x2004))+(((-1.0)*cj13*r22*x1997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2011=(sj11*sj14);
IkReal x2012=(r11*sj15);
IkReal x2013=((1.0)*cj15);
IkReal x2014=(cj14*sj11);
IkReal x2015=(cj11*sj14);
IkReal x2016=(r20*sj10);
IkReal x2017=(r22*sj10);
IkReal x2018=(cj11*cj14);
IkReal x2019=(r21*sj10*sj15);
CheckValue<IkReal> x2020=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x2020.valid){
continue;
}
CheckValue<IkReal> x2021 = IKatan2WithCheck(IkReal(((((-1.0)*x2011*x2019))+(((-1.0)*r10*x2013*x2015))+((cj15*x2011*x2016))+((x2012*x2015))+((r12*x2018))+(((-1.0)*x2014*x2017)))),IkReal((((x2015*x2019))+(((-1.0)*r10*x2011*x2013))+((x2011*x2012))+((r12*x2014))+((x2017*x2018))+(((-1.0)*x2013*x2015*x2016)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2021.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2020.value)))+(x2021.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x2022=IKsin(j12);
IkReal x2023=IKcos(j12);
IkReal x2024=(cj15*sj14);
IkReal x2025=((1.0)*sj11);
IkReal x2026=((1.0)*sj14);
IkReal x2027=(r11*sj15);
IkReal x2028=((1.0)*cj14);
IkReal x2029=(cj15*r20);
IkReal x2030=(sj13*sj15);
IkReal x2031=(r01*sj15);
IkReal x2032=(r21*sj15);
IkReal x2033=(cj13*cj14);
IkReal x2034=((0.4)*sj11);
IkReal x2035=(cj15*r10);
IkReal x2036=((0.4)*cj11);
IkReal x2037=(cj15*sj13);
IkReal x2038=((1.93e-6)*sj11);
IkReal x2039=(cj15*r00);
IkReal x2040=(sj10*x2022);
IkReal x2041=(cj11*x2023);
IkReal x2042=(cj10*x2022);
IkReal x2043=(cj10*x2023);
IkReal x2044=(sj10*x2023);
evalcond[0]=((((-1.0)*x2022*x2025))+(((-1.0)*r22*x2028))+x2041+(((-1.0)*x2026*x2032))+((r20*x2024)));
evalcond[1]=(((r00*x2024))+(((-1.0)*r02*x2028))+(((-1.0)*x2026*x2031))+((cj11*x2042))+((sj11*x2043)));
evalcond[2]=(((r10*x2024))+(((-1.0)*r12*x2028))+(((-1.0)*x2026*x2027))+((cj11*x2040))+((sj11*x2044)));
evalcond[3]=((((-1.0)*x2022*x2034))+(((-1.0)*pz))+(((9.9e-7)*x2029))+(((-1.93e-6)*cj11))+((x2023*x2036))+(((-1.0)*x2034))+(((-9.9e-7)*x2032)));
evalcond[4]=(((cj10*x2036))+(((9.9e-7)*x2039))+(((-1.0)*px))+(((-1.0)*cj10*x2038))+((x2034*x2043))+((x2036*x2042))+(((-9.9e-7)*x2031)));
evalcond[5]=((((9.9e-7)*x2035))+(((-1.0)*sj10*x2038))+((sj10*x2036))+(((-1.0)*py))+((x2034*x2044))+((x2036*x2040))+(((-9.9e-7)*x2027)));
evalcond[6]=((((-1.0)*x2023*x2025))+((r21*x2037))+(((-1.0)*cj11*x2022))+(((-1.0)*cj13*r22*x2026))+((x2032*x2033))+(((-1.0)*cj13*x2028*x2029))+((r20*x2030)));
evalcond[7]=(((x2031*x2033))+((r00*x2030))+((cj10*x2041))+((r01*x2037))+(((-1.0)*cj13*x2028*x2039))+(((-1.0)*x2025*x2042))+(((-1.0)*cj13*r02*x2026)));
evalcond[8]=(((x2027*x2033))+((r10*x2030))+((sj10*x2041))+(((-1.0)*cj13*x2028*x2035))+(((-1.0)*x2025*x2040))+(((-1.0)*cj13*r12*x2026))+((r11*x2037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2045=(cj10*cj11);
IkReal x2046=(cj14*r22);
IkReal x2047=(sj14*sj15);
IkReal x2048=(cj14*r02);
IkReal x2049=(cj10*sj11);
IkReal x2050=((1.0)*cj15*sj14);
CheckValue<IkReal> x2051 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2047*x2049))+(((-1.0)*cj11*r00*x2050))+((cj15*r20*sj14*x2049))+((cj11*x2048))+(((-1.0)*x2046*x2049))+((cj11*r01*x2047)))),IkReal(((((-1.0)*r00*sj11*x2050))+((r01*sj11*x2047))+((x2045*x2046))+((r21*x2045*x2047))+((sj11*x2048))+(((-1.0)*r20*x2045*x2050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2051.valid){
continue;
}
CheckValue<IkReal> x2052=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x2052.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x2051.value)+(((1.5707963267949)*(x2052.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x2053=IKsin(j12);
IkReal x2054=IKcos(j12);
IkReal x2055=(cj15*sj14);
IkReal x2056=((1.0)*sj11);
IkReal x2057=((1.0)*sj14);
IkReal x2058=(r11*sj15);
IkReal x2059=((1.0)*cj14);
IkReal x2060=(cj15*r20);
IkReal x2061=(sj13*sj15);
IkReal x2062=(r01*sj15);
IkReal x2063=(r21*sj15);
IkReal x2064=(cj13*cj14);
IkReal x2065=((0.4)*sj11);
IkReal x2066=(cj15*r10);
IkReal x2067=((0.4)*cj11);
IkReal x2068=(cj15*sj13);
IkReal x2069=((1.93e-6)*sj11);
IkReal x2070=(cj15*r00);
IkReal x2071=(sj10*x2053);
IkReal x2072=(cj11*x2054);
IkReal x2073=(cj10*x2053);
IkReal x2074=(cj10*x2054);
IkReal x2075=(sj10*x2054);
evalcond[0]=((((-1.0)*x2057*x2063))+x2072+(((-1.0)*r22*x2059))+(((-1.0)*x2053*x2056))+((r20*x2055)));
evalcond[1]=((((-1.0)*x2057*x2062))+(((-1.0)*r02*x2059))+((cj11*x2073))+((sj11*x2074))+((r00*x2055)));
evalcond[2]=(((r10*x2055))+(((-1.0)*r12*x2059))+(((-1.0)*x2057*x2058))+((cj11*x2071))+((sj11*x2075)));
evalcond[3]=(((x2054*x2067))+(((-1.0)*x2053*x2065))+(((-1.0)*x2065))+(((-1.0)*pz))+(((9.9e-7)*x2060))+(((-1.93e-6)*cj11))+(((-9.9e-7)*x2063)));
evalcond[4]=((((-1.0)*cj10*x2069))+(((-1.0)*px))+(((9.9e-7)*x2070))+(((-9.9e-7)*x2062))+((x2065*x2074))+((x2067*x2073))+((cj10*x2067)));
evalcond[5]=((((-9.9e-7)*x2058))+((sj10*x2067))+(((-1.0)*sj10*x2069))+(((-1.0)*py))+(((9.9e-7)*x2066))+((x2065*x2075))+((x2067*x2071)));
evalcond[6]=((((-1.0)*x2054*x2056))+((r21*x2068))+(((-1.0)*cj11*x2053))+(((-1.0)*cj13*r22*x2057))+(((-1.0)*cj13*x2059*x2060))+((r20*x2061))+((x2063*x2064)));
evalcond[7]=(((cj10*x2072))+(((-1.0)*cj13*x2059*x2070))+((r00*x2061))+(((-1.0)*x2056*x2073))+((r01*x2068))+(((-1.0)*cj13*r02*x2057))+((x2062*x2064)));
evalcond[8]=(((sj10*x2072))+(((-1.0)*cj13*x2059*x2066))+((r11*x2068))+((x2058*x2064))+((r10*x2061))+(((-1.0)*x2056*x2071))+(((-1.0)*cj13*r12*x2057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x2076=(cj15*sj10);
IkReal x2077=((1.0)*sj15);
CheckValue<IkReal> x2078 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj10*x2077))+(((-1.0)*r21*x2076)))),IkReal((((cj14*r20*x2076))+(((-1.0)*cj14*r21*sj10*x2077))+((r22*sj10*sj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2078.valid){
continue;
}
CheckValue<IkReal> x2079=IKPowWithIntegerCheck(IKsign((((cj15*r10*sj14))+(((-1.0)*cj14*r12))+(((-1.0)*r11*sj14*x2077)))),-1);
if(!x2079.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x2078.value)+(((1.5707963267949)*(x2079.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[3];
IkReal x2080=IKsin(j13);
IkReal x2081=IKcos(j13);
IkReal x2082=((1.0)*r20);
IkReal x2083=((1.0)*cj15);
IkReal x2084=(cj14*x2080);
IkReal x2085=(sj15*x2081);
IkReal x2086=((1.0)*sj14*x2080);
evalcond[0]=((((-1.0)*r22*x2086))+((r21*sj15*x2084))+(((-1.0)*x2082*x2085))+(((-1.0)*cj15*x2082*x2084))+(((-1.0)*r21*x2081*x2083)));
evalcond[1]=(cj10+((r11*sj15*x2084))+(((-1.0)*r10*x2083*x2084))+(((-1.0)*r11*x2081*x2083))+(((-1.0)*r12*x2086))+(((-1.0)*r10*x2085)));
evalcond[2]=((((-1.0)*r02*x2086))+(((-1.0)*r00*x2083*x2084))+(((-1.0)*sj10))+((r01*sj15*x2084))+(((-1.0)*r00*x2085))+(((-1.0)*r01*x2081*x2083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[2];
IkReal x2087=sj10*sj10;
j11eval[0]=x2087;
j11eval[1]=IKsign(x2087);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x2088=cj10*cj10;
j11eval[0]=x2088;
j11eval[1]=IKsign(x2088);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
j11eval[0]=sj10;
j11eval[1]=IKsign(sj10);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2089=(cj15*r20);
IkReal x2090=((0.999999999976719)*sj14);
IkReal x2091=(cj15*r00);
IkReal x2092=(r21*sj15);
IkReal x2093=(cj14*r22);
IkReal x2094=((4.82499999988767e-6)*sj14);
IkReal x2095=(r01*sj15);
IkReal x2096=(cj14*r02);
if( IKabs((((x2094*x2095))+(((-1.0)*x2091*x2094))+(((0.999999999976719)*x2093))+(((-1.1941874999722e-11)*x2095))+(((-1.0)*x2089*x2090))+((x2090*x2092))+(((-1.20624999997192e-5)*px))+(((4.82499999988767e-6)*x2096))+(((2.47499999994238e-6)*x2089))+(((-2.47499999994238e-6)*x2092))+(((1.1941874999722e-11)*x2091))+(((-2.4999999999418)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2090*x2095))+(((1.1941874999722e-11)*x2089))+(((2.47499999994238e-6)*x2095))+(((2.4999999999418)*px))+(((-1.1941874999722e-11)*x2092))+(((-1.0)*x2089*x2094))+((x2090*x2091))+(((-1.20624999997192e-5)*pz))+(((-0.999999999976719)*x2096))+((x2092*x2094))+(((4.82499999988767e-6)*x2093))+(((-2.47499999994238e-6)*x2091)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2094*x2095))+(((-1.0)*x2091*x2094))+(((0.999999999976719)*x2093))+(((-1.1941874999722e-11)*x2095))+(((-1.0)*x2089*x2090))+((x2090*x2092))+(((-1.20624999997192e-5)*px))+(((4.82499999988767e-6)*x2096))+(((2.47499999994238e-6)*x2089))+(((-2.47499999994238e-6)*x2092))+(((1.1941874999722e-11)*x2091))+(((-2.4999999999418)*pz))))+IKsqr(((((-1.0)*x2090*x2095))+(((1.1941874999722e-11)*x2089))+(((2.47499999994238e-6)*x2095))+(((2.4999999999418)*px))+(((-1.1941874999722e-11)*x2092))+(((-1.0)*x2089*x2094))+((x2090*x2091))+(((-1.20624999997192e-5)*pz))+(((-0.999999999976719)*x2096))+((x2092*x2094))+(((4.82499999988767e-6)*x2093))+(((-2.47499999994238e-6)*x2091))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((((x2094*x2095))+(((-1.0)*x2091*x2094))+(((0.999999999976719)*x2093))+(((-1.1941874999722e-11)*x2095))+(((-1.0)*x2089*x2090))+((x2090*x2092))+(((-1.20624999997192e-5)*px))+(((4.82499999988767e-6)*x2096))+(((2.47499999994238e-6)*x2089))+(((-2.47499999994238e-6)*x2092))+(((1.1941874999722e-11)*x2091))+(((-2.4999999999418)*pz))), ((((-1.0)*x2090*x2095))+(((1.1941874999722e-11)*x2089))+(((2.47499999994238e-6)*x2095))+(((2.4999999999418)*px))+(((-1.1941874999722e-11)*x2092))+(((-1.0)*x2089*x2094))+((x2090*x2091))+(((-1.20624999997192e-5)*pz))+(((-0.999999999976719)*x2096))+((x2092*x2094))+(((4.82499999988767e-6)*x2093))+(((-2.47499999994238e-6)*x2091))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x2097=IKsin(j11);
IkReal x2098=IKcos(j11);
IkReal x2099=((0.4)*sj14);
IkReal x2100=(cj15*r20);
IkReal x2101=(r01*sj15);
IkReal x2102=((0.4)*sj13);
IkReal x2103=(r21*sj15);
IkReal x2104=((0.4)*cj14);
IkReal x2105=(cj15*r00);
IkReal x2106=((9.9e-7)*x2101);
IkReal x2107=((1.93e-6)*x2097);
IkReal x2108=((9.9e-7)*x2105);
IkReal x2109=((0.4)*x2098);
IkReal x2110=((0.4)*x2097);
IkReal x2111=((1.93e-6)*x2098);
IkReal x2112=((9.9e-7)*x2103);
IkReal x2113=((9.9e-7)*x2100);
IkReal x2114=(x2109+x2108);
IkReal x2115=(x2107+x2106+px);
IkReal x2116=(x2110+x2111+x2112);
evalcond[0]=((((-1.0)*r02*x2104))+((x2099*x2105))+x2115+(((-1.0)*x2099*x2101))+(((-1.0)*x2114)));
evalcond[1]=(((x2099*x2103))+x2113+(((-1.0)*x2099*x2100))+(((-1.0)*pz))+((r22*x2104))+(((-1.0)*x2116)));
evalcond[2]=((((-1.0)*r20*sj15*x2102))+(((-1.0)*cj15*r21*x2102))+(((-1.0)*cj13*x2103*x2104))+((cj13*x2100*x2104))+x2115+((cj13*r22*x2099))+(((-1.0)*x2114)));
evalcond[3]=(((cj13*x2101*x2104))+((r00*sj15*x2102))+x2116+(((-1.0)*cj13*r02*x2099))+((cj15*r01*x2102))+pz+(((-1.0)*x2113))+(((-1.0)*cj13*x2104*x2105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2117=(cj15*r00);
IkReal x2118=(cj14*r22);
IkReal x2119=(r21*sj15);
IkReal x2120=(cj11*sj14);
IkReal x2121=(sj11*sj14);
IkReal x2122=(cj15*r20);
IkReal x2123=(r01*sj15);
IkReal x2124=(cj14*r02);
IkReal x2125=((1.0)*x2121);
if( IKabs(((((-1.0)*x2119*x2125))+((x2120*x2123))+((x2121*x2122))+(((-1.0)*sj11*x2118))+((cj11*x2124))+(((-1.0)*x2117*x2120)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2117*x2125))+(((-1.0)*x2120*x2122))+((cj11*x2118))+((x2121*x2123))+((x2119*x2120))+((sj11*x2124)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2119*x2125))+((x2120*x2123))+((x2121*x2122))+(((-1.0)*sj11*x2118))+((cj11*x2124))+(((-1.0)*x2117*x2120))))+IKsqr(((((-1.0)*x2117*x2125))+(((-1.0)*x2120*x2122))+((cj11*x2118))+((x2121*x2123))+((x2119*x2120))+((sj11*x2124))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*x2119*x2125))+((x2120*x2123))+((x2121*x2122))+(((-1.0)*sj11*x2118))+((cj11*x2124))+(((-1.0)*x2117*x2120))), ((((-1.0)*x2117*x2125))+(((-1.0)*x2120*x2122))+((cj11*x2118))+((x2121*x2123))+((x2119*x2120))+((sj11*x2124))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2126=IKcos(j12);
IkReal x2127=IKsin(j12);
IkReal x2128=(cj13*cj14);
IkReal x2129=(r01*sj15);
IkReal x2130=((0.4)*cj11);
IkReal x2131=(cj15*r20);
IkReal x2132=((1.0)*r22);
IkReal x2133=(sj13*sj15);
IkReal x2134=(cj15*r00);
IkReal x2135=(cj13*sj14);
IkReal x2136=((1.0)*r02);
IkReal x2137=((1.0)*sj14);
IkReal x2138=(cj15*sj13);
IkReal x2139=(r21*sj15);
IkReal x2140=(cj11*x2126);
IkReal x2141=(sj11*x2126);
IkReal x2142=(sj11*x2127);
IkReal x2143=(cj11*x2127);
IkReal x2144=((1.0)*x2142);
evalcond[0]=((((-1.0)*cj14*x2136))+x2143+x2141+(((-1.0)*x2129*x2137))+((sj14*x2134)));
evalcond[1]=((((-1.0)*cj14*x2132))+x2140+(((-1.0)*x2144))+(((-1.0)*x2137*x2139))+((sj14*x2131)));
evalcond[2]=((((9.9e-7)*x2131))+(((-0.4)*x2142))+(((-1.0)*pz))+(((-9.9e-7)*x2139))+((x2126*x2130))+(((-0.4)*sj11))+(((-1.93e-6)*cj11)));
evalcond[3]=((((9.9e-7)*x2134))+(((-1.93e-6)*sj11))+x2130+(((-1.0)*px))+((x2127*x2130))+(((-9.9e-7)*x2129))+(((0.4)*x2141)));
evalcond[4]=((((-1.0)*x2128*x2134))+((x2128*x2129))+x2140+(((-1.0)*x2135*x2136))+((r01*x2138))+((r00*x2133))+(((-1.0)*x2144)));
evalcond[5]=((((-1.0)*x2141))+(((-1.0)*x2143))+((r21*x2138))+(((-1.0)*x2128*x2131))+((x2128*x2139))+(((-1.0)*x2132*x2135))+((r20*x2133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2145=(cj15*r20);
IkReal x2146=((0.999999999976719)*sj14);
IkReal x2147=(cj15*r00);
IkReal x2148=(r21*sj15);
IkReal x2149=(cj14*r22);
IkReal x2150=((4.82499999988767e-6)*sj14);
IkReal x2151=(r01*sj15);
IkReal x2152=(cj14*r02);
if( IKabs((((x2146*x2148))+((x2147*x2150))+(((1.20624999997192e-5)*px))+(((0.999999999976719)*x2149))+(((2.47499999994238e-6)*x2145))+(((1.1941874999722e-11)*x2151))+(((-4.82499999988767e-6)*x2152))+(((-1.1941874999722e-11)*x2147))+(((-1.0)*x2150*x2151))+(((-2.47499999994238e-6)*x2148))+(((-2.4999999999418)*pz))+(((-1.0)*x2145*x2146)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2146*x2151))+(((4.82499999988767e-6)*x2149))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x2145))+(((2.47499999994238e-6)*x2147))+(((0.999999999976719)*x2152))+((x2148*x2150))+(((-2.47499999994238e-6)*x2151))+(((-1.1941874999722e-11)*x2148))+(((-2.4999999999418)*px))+(((-1.0)*x2146*x2147))+(((-1.0)*x2145*x2150)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2146*x2148))+((x2147*x2150))+(((1.20624999997192e-5)*px))+(((0.999999999976719)*x2149))+(((2.47499999994238e-6)*x2145))+(((1.1941874999722e-11)*x2151))+(((-4.82499999988767e-6)*x2152))+(((-1.1941874999722e-11)*x2147))+(((-1.0)*x2150*x2151))+(((-2.47499999994238e-6)*x2148))+(((-2.4999999999418)*pz))+(((-1.0)*x2145*x2146))))+IKsqr((((x2146*x2151))+(((4.82499999988767e-6)*x2149))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x2145))+(((2.47499999994238e-6)*x2147))+(((0.999999999976719)*x2152))+((x2148*x2150))+(((-2.47499999994238e-6)*x2151))+(((-1.1941874999722e-11)*x2148))+(((-2.4999999999418)*px))+(((-1.0)*x2146*x2147))+(((-1.0)*x2145*x2150))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((((x2146*x2148))+((x2147*x2150))+(((1.20624999997192e-5)*px))+(((0.999999999976719)*x2149))+(((2.47499999994238e-6)*x2145))+(((1.1941874999722e-11)*x2151))+(((-4.82499999988767e-6)*x2152))+(((-1.1941874999722e-11)*x2147))+(((-1.0)*x2150*x2151))+(((-2.47499999994238e-6)*x2148))+(((-2.4999999999418)*pz))+(((-1.0)*x2145*x2146))), (((x2146*x2151))+(((4.82499999988767e-6)*x2149))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x2145))+(((2.47499999994238e-6)*x2147))+(((0.999999999976719)*x2152))+((x2148*x2150))+(((-2.47499999994238e-6)*x2151))+(((-1.1941874999722e-11)*x2148))+(((-2.4999999999418)*px))+(((-1.0)*x2146*x2147))+(((-1.0)*x2145*x2150))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x2153=IKsin(j11);
IkReal x2154=IKcos(j11);
IkReal x2155=((1.0)*pz);
IkReal x2156=((0.4)*sj14);
IkReal x2157=(cj15*r20);
IkReal x2158=(r01*sj15);
IkReal x2159=((0.4)*cj14);
IkReal x2160=(r21*sj15);
IkReal x2161=(cj15*r00);
IkReal x2162=((9.9e-7)*x2158);
IkReal x2163=((0.4)*x2154);
IkReal x2164=((9.9e-7)*x2161);
IkReal x2165=((1.93e-6)*x2153);
IkReal x2166=((9.9e-7)*x2157);
IkReal x2167=((0.4)*x2153);
IkReal x2168=((1.93e-6)*x2154);
IkReal x2169=((9.9e-7)*x2160);
IkReal x2170=((0.4)*cj15*sj13);
IkReal x2171=((0.4)*sj13*sj15);
IkReal x2172=(x2165+x2164);
IkReal x2173=(x2163+x2162);
IkReal x2174=(x2169+x2168+x2167+x2155);
evalcond[0]=(x2172+((x2156*x2158))+((r02*x2159))+(((-1.0)*px))+(((-1.0)*x2156*x2161))+(((-1.0)*x2173)));
evalcond[1]=(x2166+((x2156*x2160))+((r22*x2159))+(((-1.0)*x2174))+(((-1.0)*x2156*x2157)));
evalcond[2]=(((r21*x2170))+((cj13*x2159*x2160))+x2173+((r20*x2171))+px+(((-1.0)*cj13*x2157*x2159))+(((-1.0)*cj13*r22*x2156))+(((-1.0)*x2172)));
evalcond[3]=(((r01*x2170))+((r00*x2171))+(((-1.0)*cj13*r02*x2156))+((cj13*x2158*x2159))+x2166+(((-1.0)*x2174))+(((-1.0)*cj13*x2159*x2161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2175=(sj11*sj14);
IkReal x2176=(r21*sj15);
IkReal x2177=(cj15*r20);
IkReal x2178=(cj11*sj14);
IkReal x2179=(cj15*r00);
IkReal x2180=((1.0)*cj14);
IkReal x2181=((1.0)*r01*sj14*sj15);
if( IKabs(((((-1.0)*r01*sj15*x2178))+(((-1.0)*x2175*x2176))+((x2175*x2177))+((x2178*x2179))+(((-1.0)*r22*sj11*x2180))+(((-1.0)*cj11*r02*x2180)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj15*x2175))+(((-1.0)*x2177*x2178))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x2180))+((x2176*x2178))+((x2175*x2179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj15*x2178))+(((-1.0)*x2175*x2176))+((x2175*x2177))+((x2178*x2179))+(((-1.0)*r22*sj11*x2180))+(((-1.0)*cj11*r02*x2180))))+IKsqr(((((-1.0)*r01*sj15*x2175))+(((-1.0)*x2177*x2178))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x2180))+((x2176*x2178))+((x2175*x2179))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r01*sj15*x2178))+(((-1.0)*x2175*x2176))+((x2175*x2177))+((x2178*x2179))+(((-1.0)*r22*sj11*x2180))+(((-1.0)*cj11*r02*x2180))), ((((-1.0)*r01*sj15*x2175))+(((-1.0)*x2177*x2178))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x2180))+((x2176*x2178))+((x2175*x2179))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2182=IKsin(j12);
IkReal x2183=IKcos(j12);
IkReal x2184=(cj13*cj14);
IkReal x2185=(r01*sj15);
IkReal x2186=((0.4)*cj11);
IkReal x2187=(cj15*r20);
IkReal x2188=((1.0)*r22);
IkReal x2189=((0.4)*sj11);
IkReal x2190=(sj13*sj15);
IkReal x2191=(cj15*r00);
IkReal x2192=(cj13*sj14);
IkReal x2193=((1.0)*sj14);
IkReal x2194=(r21*sj15);
IkReal x2195=((1.0)*r02);
IkReal x2196=(cj15*sj13);
IkReal x2197=(sj11*x2182);
IkReal x2198=(cj11*x2183);
IkReal x2199=((1.0)*cj11*x2182);
IkReal x2200=((1.0)*sj11*x2183);
IkReal x2201=(x2200+x2199);
evalcond[0]=(((sj14*x2187))+(((-1.0)*x2197))+(((-1.0)*x2193*x2194))+x2198+(((-1.0)*cj14*x2188)));
evalcond[1]=(((sj14*x2191))+(((-1.0)*x2201))+(((-1.0)*x2185*x2193))+(((-1.0)*cj14*x2195)));
evalcond[2]=((((-9.9e-7)*x2194))+((x2183*x2186))+(((-1.0)*pz))+(((9.9e-7)*x2187))+(((-1.93e-6)*cj11))+(((-1.0)*x2189))+(((-1.0)*x2182*x2189)));
evalcond[3]=((((1.93e-6)*sj11))+(((-1.0)*px))+(((9.9e-7)*x2191))+(((-1.0)*x2186))+(((-1.0)*x2183*x2189))+(((-1.0)*x2182*x2186))+(((-9.9e-7)*x2185)));
evalcond[4]=((((-1.0)*x2198))+(((-1.0)*x2192*x2195))+x2197+(((-1.0)*x2184*x2191))+((x2184*x2185))+((r00*x2190))+((r01*x2196)));
evalcond[5]=((((-1.0)*x2201))+(((-1.0)*x2188*x2192))+((r20*x2190))+((r21*x2196))+(((-1.0)*x2184*x2187))+((x2184*x2194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2202=(cj14*r12);
IkReal x2203=(cj15*r20);
IkReal x2204=((0.999999999976719)*sj14);
IkReal x2205=(r21*sj15);
IkReal x2206=(cj15*r10);
IkReal x2207=((4.82499999988767e-6)*sj14);
IkReal x2208=(cj14*r22);
IkReal x2209=(r11*sj15);
if( IKabs(((((-1.0)*x2203*x2204))+(((-1.1941874999722e-11)*x2209))+(((0.999999999976719)*x2208))+(((4.82499999988767e-6)*x2202))+(((1.1941874999722e-11)*x2206))+(((2.47499999994238e-6)*x2203))+((x2204*x2205))+(((-2.47499999994238e-6)*x2205))+(((-1.20624999997192e-5)*py))+(((-1.0)*x2206*x2207))+((x2207*x2209))+(((-2.4999999999418)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2203*x2207))+(((-1.0)*x2204*x2209))+(((-1.1941874999722e-11)*x2205))+(((2.4999999999418)*py))+(((4.82499999988767e-6)*x2208))+(((1.1941874999722e-11)*x2203))+(((2.47499999994238e-6)*x2209))+((x2204*x2206))+(((-2.47499999994238e-6)*x2206))+((x2205*x2207))+(((-1.20624999997192e-5)*pz))+(((-0.999999999976719)*x2202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2203*x2204))+(((-1.1941874999722e-11)*x2209))+(((0.999999999976719)*x2208))+(((4.82499999988767e-6)*x2202))+(((1.1941874999722e-11)*x2206))+(((2.47499999994238e-6)*x2203))+((x2204*x2205))+(((-2.47499999994238e-6)*x2205))+(((-1.20624999997192e-5)*py))+(((-1.0)*x2206*x2207))+((x2207*x2209))+(((-2.4999999999418)*pz))))+IKsqr(((((-1.0)*x2203*x2207))+(((-1.0)*x2204*x2209))+(((-1.1941874999722e-11)*x2205))+(((2.4999999999418)*py))+(((4.82499999988767e-6)*x2208))+(((1.1941874999722e-11)*x2203))+(((2.47499999994238e-6)*x2209))+((x2204*x2206))+(((-2.47499999994238e-6)*x2206))+((x2205*x2207))+(((-1.20624999997192e-5)*pz))+(((-0.999999999976719)*x2202))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*x2203*x2204))+(((-1.1941874999722e-11)*x2209))+(((0.999999999976719)*x2208))+(((4.82499999988767e-6)*x2202))+(((1.1941874999722e-11)*x2206))+(((2.47499999994238e-6)*x2203))+((x2204*x2205))+(((-2.47499999994238e-6)*x2205))+(((-1.20624999997192e-5)*py))+(((-1.0)*x2206*x2207))+((x2207*x2209))+(((-2.4999999999418)*pz))), ((((-1.0)*x2203*x2207))+(((-1.0)*x2204*x2209))+(((-1.1941874999722e-11)*x2205))+(((2.4999999999418)*py))+(((4.82499999988767e-6)*x2208))+(((1.1941874999722e-11)*x2203))+(((2.47499999994238e-6)*x2209))+((x2204*x2206))+(((-2.47499999994238e-6)*x2206))+((x2205*x2207))+(((-1.20624999997192e-5)*pz))+(((-0.999999999976719)*x2202))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x2210=IKsin(j11);
IkReal x2211=IKcos(j11);
IkReal x2212=((0.4)*sj13);
IkReal x2213=((0.4)*sj14);
IkReal x2214=(cj15*r20);
IkReal x2215=((0.4)*cj14);
IkReal x2216=(r21*sj15);
IkReal x2217=(cj15*r10);
IkReal x2218=(r11*sj15);
IkReal x2219=((9.9e-7)*x2218);
IkReal x2220=((1.93e-6)*x2210);
IkReal x2221=((9.9e-7)*x2217);
IkReal x2222=((0.4)*x2211);
IkReal x2223=((0.4)*x2210);
IkReal x2224=((1.93e-6)*x2211);
IkReal x2225=((9.9e-7)*x2216);
IkReal x2226=((9.9e-7)*x2214);
IkReal x2227=(x2222+x2221);
IkReal x2228=(x2220+x2219+py);
IkReal x2229=(x2224+x2225+x2223);
evalcond[0]=(x2228+(((-1.0)*r12*x2215))+(((-1.0)*x2213*x2218))+(((-1.0)*x2227))+((x2213*x2217)));
evalcond[1]=(x2226+(((-1.0)*pz))+(((-1.0)*x2213*x2214))+(((-1.0)*x2229))+((r22*x2215))+((x2213*x2216)));
evalcond[2]=((((-1.0)*cj13*x2215*x2216))+x2228+(((-1.0)*r20*sj15*x2212))+((cj13*x2214*x2215))+(((-1.0)*cj15*r21*x2212))+(((-1.0)*x2227))+((cj13*r22*x2213)));
evalcond[3]=((((-1.0)*cj13*x2215*x2217))+x2229+((cj13*x2215*x2218))+(((-1.0)*cj13*r12*x2213))+((cj15*r11*x2212))+pz+(((-1.0)*x2226))+((r10*sj15*x2212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2230=(sj11*sj14);
IkReal x2231=(r11*sj15);
IkReal x2232=((1.0)*cj15);
IkReal x2233=(cj14*r12);
IkReal x2234=(cj11*sj14);
IkReal x2235=(r21*sj15);
IkReal x2236=(cj14*r22);
if( IKabs(((((-1.0)*x2230*x2235))+((cj11*x2233))+(((-1.0)*sj11*x2236))+((x2231*x2234))+((cj15*r20*x2230))+(((-1.0)*r10*x2232*x2234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*x2236))+(((-1.0)*r10*x2230*x2232))+((x2230*x2231))+((sj11*x2233))+(((-1.0)*r20*x2232*x2234))+((x2234*x2235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2230*x2235))+((cj11*x2233))+(((-1.0)*sj11*x2236))+((x2231*x2234))+((cj15*r20*x2230))+(((-1.0)*r10*x2232*x2234))))+IKsqr((((cj11*x2236))+(((-1.0)*r10*x2230*x2232))+((x2230*x2231))+((sj11*x2233))+(((-1.0)*r20*x2232*x2234))+((x2234*x2235))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*x2230*x2235))+((cj11*x2233))+(((-1.0)*sj11*x2236))+((x2231*x2234))+((cj15*r20*x2230))+(((-1.0)*r10*x2232*x2234))), (((cj11*x2236))+(((-1.0)*r10*x2230*x2232))+((x2230*x2231))+((sj11*x2233))+(((-1.0)*r20*x2232*x2234))+((x2234*x2235))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2237=IKcos(j12);
IkReal x2238=IKsin(j12);
IkReal x2239=(cj15*r10);
IkReal x2240=((0.4)*cj11);
IkReal x2241=((1.0)*sj14);
IkReal x2242=(r11*sj15);
IkReal x2243=((1.0)*cj14);
IkReal x2244=(cj15*r20);
IkReal x2245=(cj13*cj14);
IkReal x2246=(sj13*sj15);
IkReal x2247=(cj15*sj13);
IkReal x2248=(r21*sj15);
IkReal x2249=(cj11*x2237);
IkReal x2250=(sj11*x2237);
IkReal x2251=(sj11*x2238);
IkReal x2252=(cj11*x2238);
IkReal x2253=((1.0)*x2251);
evalcond[0]=(((sj14*x2239))+x2252+x2250+(((-1.0)*x2241*x2242))+(((-1.0)*r12*x2243)));
evalcond[1]=(((sj14*x2244))+x2249+(((-1.0)*r22*x2243))+(((-1.0)*x2253))+(((-1.0)*x2241*x2248)));
evalcond[2]=((((9.9e-7)*x2244))+(((-1.0)*pz))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+((x2237*x2240))+(((-9.9e-7)*x2248))+(((-0.4)*x2251)));
evalcond[3]=(x2240+(((-1.93e-6)*sj11))+(((0.4)*x2250))+(((-1.0)*py))+(((-9.9e-7)*x2242))+((x2238*x2240))+(((9.9e-7)*x2239)));
evalcond[4]=((((-1.0)*cj13*x2239*x2243))+((r10*x2246))+x2249+((r11*x2247))+(((-1.0)*x2253))+(((-1.0)*cj13*r12*x2241))+((x2242*x2245)));
evalcond[5]=((((-1.0)*cj13*r22*x2241))+(((-1.0)*x2252))+(((-1.0)*x2250))+((r20*x2246))+((r21*x2247))+(((-1.0)*cj13*x2243*x2244))+((x2245*x2248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2254=(cj14*r12);
IkReal x2255=(cj15*r20);
IkReal x2256=((0.999999999976719)*sj14);
IkReal x2257=(r21*sj15);
IkReal x2258=(cj15*r10);
IkReal x2259=((4.82499999988767e-6)*sj14);
IkReal x2260=(cj14*r22);
IkReal x2261=(r11*sj15);
if( IKabs(((((-1.0)*x2255*x2256))+(((-1.1941874999722e-11)*x2258))+((x2256*x2257))+(((2.47499999994238e-6)*x2255))+(((-1.0)*x2259*x2261))+((x2258*x2259))+(((1.20624999997192e-5)*py))+(((-2.47499999994238e-6)*x2257))+(((1.1941874999722e-11)*x2261))+(((0.999999999976719)*x2260))+(((-2.4999999999418)*pz))+(((-4.82499999988767e-6)*x2254)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2256*x2261))+(((-2.47499999994238e-6)*x2261))+(((-1.0)*x2255*x2259))+(((1.1941874999722e-11)*x2255))+(((-1.0)*x2256*x2258))+(((-1.1941874999722e-11)*x2257))+(((2.47499999994238e-6)*x2258))+(((-1.20624999997192e-5)*pz))+((x2257*x2259))+(((4.82499999988767e-6)*x2260))+(((-2.4999999999418)*py))+(((0.999999999976719)*x2254)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2255*x2256))+(((-1.1941874999722e-11)*x2258))+((x2256*x2257))+(((2.47499999994238e-6)*x2255))+(((-1.0)*x2259*x2261))+((x2258*x2259))+(((1.20624999997192e-5)*py))+(((-2.47499999994238e-6)*x2257))+(((1.1941874999722e-11)*x2261))+(((0.999999999976719)*x2260))+(((-2.4999999999418)*pz))+(((-4.82499999988767e-6)*x2254))))+IKsqr((((x2256*x2261))+(((-2.47499999994238e-6)*x2261))+(((-1.0)*x2255*x2259))+(((1.1941874999722e-11)*x2255))+(((-1.0)*x2256*x2258))+(((-1.1941874999722e-11)*x2257))+(((2.47499999994238e-6)*x2258))+(((-1.20624999997192e-5)*pz))+((x2257*x2259))+(((4.82499999988767e-6)*x2260))+(((-2.4999999999418)*py))+(((0.999999999976719)*x2254))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*x2255*x2256))+(((-1.1941874999722e-11)*x2258))+((x2256*x2257))+(((2.47499999994238e-6)*x2255))+(((-1.0)*x2259*x2261))+((x2258*x2259))+(((1.20624999997192e-5)*py))+(((-2.47499999994238e-6)*x2257))+(((1.1941874999722e-11)*x2261))+(((0.999999999976719)*x2260))+(((-2.4999999999418)*pz))+(((-4.82499999988767e-6)*x2254))), (((x2256*x2261))+(((-2.47499999994238e-6)*x2261))+(((-1.0)*x2255*x2259))+(((1.1941874999722e-11)*x2255))+(((-1.0)*x2256*x2258))+(((-1.1941874999722e-11)*x2257))+(((2.47499999994238e-6)*x2258))+(((-1.20624999997192e-5)*pz))+((x2257*x2259))+(((4.82499999988767e-6)*x2260))+(((-2.4999999999418)*py))+(((0.999999999976719)*x2254))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x2262=IKsin(j11);
IkReal x2263=IKcos(j11);
IkReal x2264=((1.0)*pz);
IkReal x2265=((0.4)*sj14);
IkReal x2266=(cj15*r20);
IkReal x2267=((0.4)*cj14);
IkReal x2268=(r21*sj15);
IkReal x2269=(cj15*r10);
IkReal x2270=(r11*sj15);
IkReal x2271=((9.9e-7)*x2270);
IkReal x2272=((0.4)*x2263);
IkReal x2273=((9.9e-7)*x2269);
IkReal x2274=((1.93e-6)*x2262);
IkReal x2275=((9.9e-7)*x2266);
IkReal x2276=((0.4)*x2262);
IkReal x2277=((1.93e-6)*x2263);
IkReal x2278=((9.9e-7)*x2268);
IkReal x2279=((0.4)*sj13*sj15);
IkReal x2280=((0.4)*cj15*sj13);
IkReal x2281=(x2274+x2273);
IkReal x2282=(x2271+x2272);
IkReal x2283=(x2264+x2277+x2276+x2278);
evalcond[0]=(x2281+(((-1.0)*x2282))+(((-1.0)*py))+((r12*x2267))+((x2265*x2270))+(((-1.0)*x2265*x2269)));
evalcond[1]=(x2275+(((-1.0)*x2283))+((r22*x2267))+((x2265*x2268))+(((-1.0)*x2265*x2266)));
evalcond[2]=(x2282+((cj13*x2267*x2268))+(((-1.0)*x2281))+(((-1.0)*cj13*x2266*x2267))+(((-1.0)*cj13*r22*x2265))+py+((r21*x2280))+((r20*x2279)));
evalcond[3]=((((-1.0)*cj13*x2267*x2269))+x2275+((r11*x2280))+((cj13*x2267*x2270))+(((-1.0)*cj13*r12*x2265))+(((-1.0)*x2283))+((r10*x2279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2284=((1.0)*cj11);
IkReal x2285=(sj14*sj15);
IkReal x2286=(cj14*r12);
IkReal x2287=((1.0)*sj11);
IkReal x2288=(cj14*r22);
IkReal x2289=(cj15*r20*sj14);
IkReal x2290=(cj15*r10*sj14);
if( IKabs(((((-1.0)*r21*x2285*x2287))+((sj11*x2289))+(((-1.0)*x2284*x2286))+(((-1.0)*r11*x2284*x2285))+(((-1.0)*x2287*x2288))+((cj11*x2290)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj11*x2290))+(((-1.0)*x2284*x2289))+(((-1.0)*r11*x2285*x2287))+((cj11*r21*x2285))+(((-1.0)*x2286*x2287))+((cj11*x2288)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x2285*x2287))+((sj11*x2289))+(((-1.0)*x2284*x2286))+(((-1.0)*r11*x2284*x2285))+(((-1.0)*x2287*x2288))+((cj11*x2290))))+IKsqr((((sj11*x2290))+(((-1.0)*x2284*x2289))+(((-1.0)*r11*x2285*x2287))+((cj11*r21*x2285))+(((-1.0)*x2286*x2287))+((cj11*x2288))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r21*x2285*x2287))+((sj11*x2289))+(((-1.0)*x2284*x2286))+(((-1.0)*r11*x2284*x2285))+(((-1.0)*x2287*x2288))+((cj11*x2290))), (((sj11*x2290))+(((-1.0)*x2284*x2289))+(((-1.0)*r11*x2285*x2287))+((cj11*r21*x2285))+(((-1.0)*x2286*x2287))+((cj11*x2288))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2291=IKsin(j12);
IkReal x2292=IKcos(j12);
IkReal x2293=(cj15*r10);
IkReal x2294=((0.4)*cj11);
IkReal x2295=((1.0)*sj14);
IkReal x2296=(r11*sj15);
IkReal x2297=((1.0)*cj14);
IkReal x2298=((0.4)*sj11);
IkReal x2299=(cj15*r20);
IkReal x2300=(cj13*cj14);
IkReal x2301=(r21*sj15);
IkReal x2302=(sj13*sj15);
IkReal x2303=(cj15*sj13);
IkReal x2304=(sj11*x2291);
IkReal x2305=(cj11*x2292);
IkReal x2306=((1.0)*cj11*x2291);
IkReal x2307=((1.0)*sj11*x2292);
IkReal x2308=(x2307+x2306);
evalcond[0]=((((-1.0)*x2304))+x2305+(((-1.0)*x2295*x2301))+((sj14*x2299))+(((-1.0)*r22*x2297)));
evalcond[1]=((((-1.0)*x2308))+(((-1.0)*r12*x2297))+(((-1.0)*x2295*x2296))+((sj14*x2293)));
evalcond[2]=((((-9.9e-7)*x2301))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((-1.0)*x2291*x2298))+(((-1.0)*x2298))+((x2292*x2294))+(((9.9e-7)*x2299)));
evalcond[3]=((((1.93e-6)*sj11))+(((-1.0)*x2292*x2298))+(((-9.9e-7)*x2296))+(((-1.0)*py))+(((-1.0)*x2291*x2294))+(((-1.0)*x2294))+(((9.9e-7)*x2293)));
evalcond[4]=((((-1.0)*cj13*r12*x2295))+(((-1.0)*cj13*x2293*x2297))+(((-1.0)*x2305))+((r11*x2303))+((r10*x2302))+x2304+((x2296*x2300)));
evalcond[5]=(((x2300*x2301))+(((-1.0)*cj13*r22*x2295))+((r20*x2302))+(((-1.0)*x2308))+(((-1.0)*cj13*x2297*x2299))+((r21*x2303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11, j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2309=(r21*sj10);
IkReal x2310=(cj15*sj13);
IkReal x2311=((0.4)*sj14);
IkReal x2312=(cj15*r20);
IkReal x2313=(r21*sj15);
IkReal x2314=(cj15*r10);
IkReal x2315=(r22*sj14);
IkReal x2316=(r11*sj15);
IkReal x2317=(cj13*cj14*sj15);
IkReal x2318=((1.6e+15)*cj13*sj10);
IkReal x2319=((7720000000.0)*cj13*sj10);
IkReal x2320=(r20*sj10*sj13*sj15);
IkReal x2321=(((x2311*x2313))+(((0.4)*cj14*r22))+(((9.9e-7)*x2312))+(((-1.0)*x2311*x2312))+(((-1.0)*pz))+(((-9.9e-7)*x2313)));
IkReal x2322=(sj10*x2321);
CheckValue<IkReal> x2323=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x2323.valid){
continue;
}
CheckValue<IkReal> x2324 = IKatan2WithCheck(IkReal(((((-1.0)*cj14*x2312*x2319))+(((-19107.0)*x2316))+(((19107.0)*x2314))+(((7720000000.0)*x2309*x2317))+(((7720000000.0)*x2309*x2310))+(((-1.0)*x2315*x2319))+(((7720000000.0)*x2320))+(((4.0e+15)*x2322))+(((-19300000000.0)*py)))),IkReal(((((-3960000000.0)*x2314))+(((-1.6e+15)*x2320))+((x2315*x2318))+(((-1.6e+15)*x2309*x2310))+(((-1.6e+15)*x2309*x2317))+(((19300000000.0)*x2322))+(((3960000000.0)*x2316))+(((4.0e+15)*py))+((cj14*x2312*x2318)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2324.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2323.value)))+(x2324.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x2325=IKsin(j11);
IkReal x2326=sj10*sj10;
IkReal x2327=IKcos(j11);
IkReal x2328=cj10*cj10;
IkReal x2329=(cj10*sj15);
IkReal x2330=((9.9e-7)*r11);
IkReal x2331=(cj15*r20);
IkReal x2332=((0.4)*sj14);
IkReal x2333=(cj15*r00);
IkReal x2334=((0.4)*cj10);
IkReal x2335=(cj15*sj13);
IkReal x2336=(cj13*r22);
IkReal x2337=((0.4)*r11);
IkReal x2338=(cj10*sj10);
IkReal x2339=(r21*sj15);
IkReal x2340=((0.4)*r01);
IkReal x2341=((0.4)*cj14);
IkReal x2342=((9.9e-7)*cj10);
IkReal x2343=(cj13*cj14);
IkReal x2344=((0.4)*sj10);
IkReal x2345=(sj10*sj15);
IkReal x2346=(cj15*r10);
IkReal x2347=((0.4)*sj13*sj15);
IkReal x2348=(sj10*x2341);
IkReal x2349=((9.9e-7)*cj15*sj10);
IkReal x2350=((0.4)*x2327);
IkReal x2351=((9.9e-7)*r01*sj15);
IkReal x2352=((1.93e-6)*x2325);
IkReal x2353=((1.93e-6)*x2327);
IkReal x2354=(x2338*x2352);
IkReal x2355=(sj10*x2327*x2334);
evalcond[0]=(((x2332*x2339))+(((9.9e-7)*x2331))+(((-1.0)*x2331*x2332))+((r22*x2341))+(((-1.0)*pz))+(((-9.9e-7)*x2339))+(((-0.4)*x2325))+(((-1.0)*x2353)));
evalcond[1]=((((-1.0)*x2326*x2350))+(((-9.9e-7)*sj10*x2346))+((py*sj10))+((x2326*x2352))+(((-1.0)*r11*x2332*x2345))+(((-1.0)*r12*x2348))+((x2330*x2345))+((sj10*x2332*x2346)));
evalcond[2]=(((x2328*x2352))+((cj10*px))+(((-1.0)*x2333*x2342))+(((-1.0)*cj14*r02*x2334))+(((-1.0)*x2328*x2350))+(((9.9e-7)*r01*x2329))+(((-1.0)*r01*x2329*x2332))+((cj10*x2332*x2333)));
evalcond[3]=((((9.9e-7)*sj10*x2339))+(((-1.0)*cj13*r12*x2332))+((r10*x2347))+((pz*sj10))+((x2335*x2337))+((sj10*x2353))+((x2325*x2344))+((sj15*x2337*x2343))+(((-1.0)*cj13*x2341*x2346))+(((-9.9e-7)*sj10*x2331)));
evalcond[4]=((((-1.0)*x2331*x2342))+((x2335*x2340))+((cj10*pz))+(((-1.0)*cj13*r02*x2332))+((r00*x2347))+(((-1.0)*cj13*x2333*x2341))+((cj10*x2353))+((x2325*x2334))+(((9.9e-7)*r21*x2329))+((sj15*x2340*x2343)));
evalcond[5]=(((cj13*x2331*x2348))+(((-1.0)*x2327*x2344))+((sj15*x2330))+((sj10*x2332*x2336))+((sj10*x2352))+py+(((-9.9e-7)*x2346))+(((-1.0)*cj13*x2339*x2348))+(((-1.0)*r20*sj13*sj15*x2344))+(((-1.0)*r21*x2335*x2344)));
evalcond[6]=((((-1.0)*r21*x2334*x2335))+x2351+((x2331*x2334*x2343))+((cj10*x2352))+(((-0.4)*r20*sj13*x2329))+px+(((-9.9e-7)*x2333))+(((-1.0)*x2327*x2334))+((cj10*x2332*x2336))+(((-1.0)*cj13*r21*x2329*x2341)));
evalcond[7]=((((9.9e-7)*r01*x2345))+(((-1.0)*cj14*r12*x2334))+x2354+((px*sj10))+((cj10*x2332*x2346))+(((-1.0)*r11*x2329*x2332))+(((-9.9e-7)*sj10*x2333))+(((-1.0)*x2355)));
evalcond[8]=(((cj10*py))+x2354+((x2329*x2330))+((sj10*x2332*x2333))+(((-1.0)*r01*x2332*x2345))+(((-1.0)*r02*x2348))+(((-1.0)*x2342*x2346))+(((-1.0)*x2355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[2];
j12eval[0]=cj10;
j12eval[1]=IKsign(cj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
j12eval[0]=sj10;
j12eval[1]=IKsign(sj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2356=(cj15*r00);
IkReal x2357=(cj14*r22);
IkReal x2358=(r21*sj15);
IkReal x2359=(cj11*sj14);
IkReal x2360=(sj11*sj14);
IkReal x2361=(cj15*r20);
IkReal x2362=(r01*sj15);
IkReal x2363=(cj14*r02);
IkReal x2364=((1.0)*x2360);
if( IKabs((((x2359*x2362))+(((-1.0)*sj11*x2357))+(((-1.0)*x2356*x2359))+(((-1.0)*x2358*x2364))+((x2360*x2361))+((cj11*x2363)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*x2357))+(((-1.0)*x2359*x2361))+(((-1.0)*x2356*x2364))+((x2358*x2359))+((x2360*x2362))+((sj11*x2363)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2359*x2362))+(((-1.0)*sj11*x2357))+(((-1.0)*x2356*x2359))+(((-1.0)*x2358*x2364))+((x2360*x2361))+((cj11*x2363))))+IKsqr((((cj11*x2357))+(((-1.0)*x2359*x2361))+(((-1.0)*x2356*x2364))+((x2358*x2359))+((x2360*x2362))+((sj11*x2363))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((x2359*x2362))+(((-1.0)*sj11*x2357))+(((-1.0)*x2356*x2359))+(((-1.0)*x2358*x2364))+((x2360*x2361))+((cj11*x2363))), (((cj11*x2357))+(((-1.0)*x2359*x2361))+(((-1.0)*x2356*x2364))+((x2358*x2359))+((x2360*x2362))+((sj11*x2363))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2365=IKcos(j12);
IkReal x2366=IKsin(j12);
IkReal x2367=(cj13*cj14);
IkReal x2368=(r01*sj15);
IkReal x2369=((0.4)*cj11);
IkReal x2370=(cj15*r20);
IkReal x2371=((1.0)*r22);
IkReal x2372=(sj13*sj15);
IkReal x2373=(cj15*r00);
IkReal x2374=(cj13*sj14);
IkReal x2375=((1.0)*r02);
IkReal x2376=((1.0)*sj14);
IkReal x2377=(cj15*sj13);
IkReal x2378=(r21*sj15);
IkReal x2379=(cj11*x2365);
IkReal x2380=(sj11*x2365);
IkReal x2381=(sj11*x2366);
IkReal x2382=(cj11*x2366);
IkReal x2383=((1.0)*x2381);
evalcond[0]=(x2380+x2382+(((-1.0)*x2368*x2376))+(((-1.0)*cj14*x2375))+((sj14*x2373)));
evalcond[1]=(x2379+(((-1.0)*x2383))+(((-1.0)*cj14*x2371))+(((-1.0)*x2376*x2378))+((sj14*x2370)));
evalcond[2]=(((x2365*x2369))+(((-0.4)*x2381))+(((-1.0)*pz))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+(((9.9e-7)*x2370))+(((-9.9e-7)*x2378)));
evalcond[3]=(x2369+((x2366*x2369))+(((-1.93e-6)*sj11))+(((0.4)*x2380))+(((-1.0)*px))+(((9.9e-7)*x2373))+(((-9.9e-7)*x2368)));
evalcond[4]=(x2379+((x2367*x2368))+(((-1.0)*x2383))+(((-1.0)*x2367*x2373))+(((-1.0)*x2374*x2375))+((r00*x2372))+((r01*x2377)));
evalcond[5]=(((r20*x2372))+((x2367*x2378))+(((-1.0)*x2380))+(((-1.0)*x2382))+(((-1.0)*x2367*x2370))+(((-1.0)*x2371*x2374))+((r21*x2377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2384=(sj11*sj14);
IkReal x2385=(r21*sj15);
IkReal x2386=(cj15*r20);
IkReal x2387=(cj11*sj14);
IkReal x2388=(cj15*r00);
IkReal x2389=((1.0)*cj14);
IkReal x2390=((1.0)*r01*sj14*sj15);
if( IKabs((((x2387*x2388))+((x2384*x2386))+(((-1.0)*r01*sj15*x2387))+(((-1.0)*x2384*x2385))+(((-1.0)*cj11*r02*x2389))+(((-1.0)*r22*sj11*x2389)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2384*x2388))+((x2385*x2387))+((cj11*cj14*r22))+(((-1.0)*r01*sj15*x2384))+(((-1.0)*x2386*x2387))+(((-1.0)*r02*sj11*x2389)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2387*x2388))+((x2384*x2386))+(((-1.0)*r01*sj15*x2387))+(((-1.0)*x2384*x2385))+(((-1.0)*cj11*r02*x2389))+(((-1.0)*r22*sj11*x2389))))+IKsqr((((x2384*x2388))+((x2385*x2387))+((cj11*cj14*r22))+(((-1.0)*r01*sj15*x2384))+(((-1.0)*x2386*x2387))+(((-1.0)*r02*sj11*x2389))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((x2387*x2388))+((x2384*x2386))+(((-1.0)*r01*sj15*x2387))+(((-1.0)*x2384*x2385))+(((-1.0)*cj11*r02*x2389))+(((-1.0)*r22*sj11*x2389))), (((x2384*x2388))+((x2385*x2387))+((cj11*cj14*r22))+(((-1.0)*r01*sj15*x2384))+(((-1.0)*x2386*x2387))+(((-1.0)*r02*sj11*x2389))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2391=IKsin(j12);
IkReal x2392=IKcos(j12);
IkReal x2393=(cj13*cj14);
IkReal x2394=(r01*sj15);
IkReal x2395=((0.4)*cj11);
IkReal x2396=(cj15*r20);
IkReal x2397=((1.0)*r22);
IkReal x2398=((0.4)*sj11);
IkReal x2399=(sj13*sj15);
IkReal x2400=(cj15*r00);
IkReal x2401=(cj13*sj14);
IkReal x2402=((1.0)*sj14);
IkReal x2403=(r21*sj15);
IkReal x2404=((1.0)*r02);
IkReal x2405=(cj15*sj13);
IkReal x2406=(sj11*x2391);
IkReal x2407=(cj11*x2392);
IkReal x2408=((1.0)*cj11*x2391);
IkReal x2409=((1.0)*sj11*x2392);
IkReal x2410=(x2408+x2409);
evalcond[0]=((((-1.0)*x2406))+x2407+(((-1.0)*x2402*x2403))+(((-1.0)*cj14*x2397))+((sj14*x2396)));
evalcond[1]=((((-1.0)*cj14*x2404))+(((-1.0)*x2394*x2402))+(((-1.0)*x2410))+((sj14*x2400)));
evalcond[2]=(((x2392*x2395))+(((-9.9e-7)*x2403))+(((9.9e-7)*x2396))+(((-1.0)*pz))+(((-1.0)*x2398))+(((-1.93e-6)*cj11))+(((-1.0)*x2391*x2398)));
evalcond[3]=((((-9.9e-7)*x2394))+(((1.93e-6)*sj11))+(((-1.0)*px))+(((-1.0)*x2395))+(((9.9e-7)*x2400))+(((-1.0)*x2391*x2395))+(((-1.0)*x2392*x2398)));
evalcond[4]=((((-1.0)*x2401*x2404))+(((-1.0)*x2407))+x2406+((r01*x2405))+((r00*x2399))+((x2393*x2394))+(((-1.0)*x2393*x2400)));
evalcond[5]=((((-1.0)*x2397*x2401))+((r20*x2399))+((x2393*x2403))+(((-1.0)*x2410))+((r21*x2405))+(((-1.0)*x2393*x2396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2411=(sj11*sj14);
IkReal x2412=(r11*sj15);
IkReal x2413=((1.0)*cj15);
IkReal x2414=(cj14*r12);
IkReal x2415=(cj11*sj14);
IkReal x2416=(r21*sj15);
IkReal x2417=(cj14*r22);
if( IKabs((((cj11*x2414))+((cj15*r20*x2411))+(((-1.0)*x2411*x2416))+(((-1.0)*r10*x2413*x2415))+(((-1.0)*sj11*x2417))+((x2412*x2415)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*x2417))+((x2415*x2416))+(((-1.0)*r20*x2413*x2415))+(((-1.0)*r10*x2411*x2413))+((x2411*x2412))+((sj11*x2414)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj11*x2414))+((cj15*r20*x2411))+(((-1.0)*x2411*x2416))+(((-1.0)*r10*x2413*x2415))+(((-1.0)*sj11*x2417))+((x2412*x2415))))+IKsqr((((cj11*x2417))+((x2415*x2416))+(((-1.0)*r20*x2413*x2415))+(((-1.0)*r10*x2411*x2413))+((x2411*x2412))+((sj11*x2414))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((cj11*x2414))+((cj15*r20*x2411))+(((-1.0)*x2411*x2416))+(((-1.0)*r10*x2413*x2415))+(((-1.0)*sj11*x2417))+((x2412*x2415))), (((cj11*x2417))+((x2415*x2416))+(((-1.0)*r20*x2413*x2415))+(((-1.0)*r10*x2411*x2413))+((x2411*x2412))+((sj11*x2414))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2418=IKcos(j12);
IkReal x2419=IKsin(j12);
IkReal x2420=(cj15*r10);
IkReal x2421=((0.4)*cj11);
IkReal x2422=((1.0)*sj14);
IkReal x2423=(r11*sj15);
IkReal x2424=((1.0)*cj14);
IkReal x2425=(cj15*r20);
IkReal x2426=(cj13*cj14);
IkReal x2427=(sj13*sj15);
IkReal x2428=(cj15*sj13);
IkReal x2429=(r21*sj15);
IkReal x2430=(cj11*x2418);
IkReal x2431=(sj11*x2418);
IkReal x2432=(sj11*x2419);
IkReal x2433=(cj11*x2419);
IkReal x2434=((1.0)*x2432);
evalcond[0]=(x2433+x2431+(((-1.0)*x2422*x2423))+((sj14*x2420))+(((-1.0)*r12*x2424)));
evalcond[1]=(x2430+(((-1.0)*x2434))+(((-1.0)*x2422*x2429))+((sj14*x2425))+(((-1.0)*r22*x2424)));
evalcond[2]=(((x2418*x2421))+(((9.9e-7)*x2425))+(((-0.4)*x2432))+(((-1.0)*pz))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+(((-9.9e-7)*x2429)));
evalcond[3]=(x2421+(((9.9e-7)*x2420))+(((-1.93e-6)*sj11))+(((0.4)*x2431))+(((-1.0)*py))+(((-9.9e-7)*x2423))+((x2419*x2421)));
evalcond[4]=(x2430+((x2423*x2426))+(((-1.0)*x2434))+((r10*x2427))+(((-1.0)*cj13*r12*x2422))+(((-1.0)*cj13*x2420*x2424))+((r11*x2428)));
evalcond[5]=((((-1.0)*x2433))+(((-1.0)*x2431))+((x2426*x2429))+((r21*x2428))+(((-1.0)*cj13*x2424*x2425))+(((-1.0)*cj13*r22*x2422))+((r20*x2427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2435=((1.0)*cj11);
IkReal x2436=(sj14*sj15);
IkReal x2437=(cj14*r12);
IkReal x2438=((1.0)*sj11);
IkReal x2439=(cj14*r22);
IkReal x2440=(cj15*r20*sj14);
IkReal x2441=(cj15*r10*sj14);
if( IKabs(((((-1.0)*x2438*x2439))+(((-1.0)*r21*x2436*x2438))+((sj11*x2440))+(((-1.0)*r11*x2435*x2436))+(((-1.0)*x2435*x2437))+((cj11*x2441)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*x2439))+((sj11*x2441))+(((-1.0)*x2435*x2440))+(((-1.0)*r11*x2436*x2438))+(((-1.0)*x2437*x2438))+((cj11*r21*x2436)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2438*x2439))+(((-1.0)*r21*x2436*x2438))+((sj11*x2440))+(((-1.0)*r11*x2435*x2436))+(((-1.0)*x2435*x2437))+((cj11*x2441))))+IKsqr((((cj11*x2439))+((sj11*x2441))+(((-1.0)*x2435*x2440))+(((-1.0)*r11*x2436*x2438))+(((-1.0)*x2437*x2438))+((cj11*r21*x2436))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*x2438*x2439))+(((-1.0)*r21*x2436*x2438))+((sj11*x2440))+(((-1.0)*r11*x2435*x2436))+(((-1.0)*x2435*x2437))+((cj11*x2441))), (((cj11*x2439))+((sj11*x2441))+(((-1.0)*x2435*x2440))+(((-1.0)*r11*x2436*x2438))+(((-1.0)*x2437*x2438))+((cj11*r21*x2436))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2442=IKsin(j12);
IkReal x2443=IKcos(j12);
IkReal x2444=(cj15*r10);
IkReal x2445=((0.4)*cj11);
IkReal x2446=((1.0)*sj14);
IkReal x2447=(r11*sj15);
IkReal x2448=((1.0)*cj14);
IkReal x2449=((0.4)*sj11);
IkReal x2450=(cj15*r20);
IkReal x2451=(cj13*cj14);
IkReal x2452=(r21*sj15);
IkReal x2453=(sj13*sj15);
IkReal x2454=(cj15*sj13);
IkReal x2455=(sj11*x2442);
IkReal x2456=(cj11*x2443);
IkReal x2457=((1.0)*cj11*x2442);
IkReal x2458=((1.0)*sj11*x2443);
IkReal x2459=(x2458+x2457);
evalcond[0]=(x2456+((sj14*x2450))+(((-1.0)*x2455))+(((-1.0)*x2446*x2452))+(((-1.0)*r22*x2448)));
evalcond[1]=(((sj14*x2444))+(((-1.0)*r12*x2448))+(((-1.0)*x2446*x2447))+(((-1.0)*x2459)));
evalcond[2]=(((x2443*x2445))+(((9.9e-7)*x2450))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((-9.9e-7)*x2452))+(((-1.0)*x2449))+(((-1.0)*x2442*x2449)));
evalcond[3]=((((-1.0)*x2443*x2449))+(((1.93e-6)*sj11))+(((9.9e-7)*x2444))+(((-1.0)*py))+(((-1.0)*x2445))+(((-1.0)*x2442*x2445))+(((-9.9e-7)*x2447)));
evalcond[4]=(((x2447*x2451))+x2455+(((-1.0)*cj13*r12*x2446))+((r10*x2453))+(((-1.0)*cj13*x2444*x2448))+(((-1.0)*x2456))+((r11*x2454)));
evalcond[5]=((((-1.0)*cj13*x2448*x2450))+(((-1.0)*cj13*r22*x2446))+((x2451*x2452))+(((-1.0)*x2459))+((r20*x2453))+((r21*x2454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2460=(sj11*sj14);
IkReal x2461=(r11*sj15);
IkReal x2462=((1.0)*cj15);
IkReal x2463=(cj14*sj11);
IkReal x2464=(cj11*sj14);
IkReal x2465=(r20*sj10);
IkReal x2466=(r22*sj10);
IkReal x2467=(cj11*cj14);
IkReal x2468=(r21*sj10*sj15);
CheckValue<IkReal> x2469=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x2469.valid){
continue;
}
CheckValue<IkReal> x2470 = IKatan2WithCheck(IkReal(((((-1.0)*x2460*x2468))+((x2461*x2464))+((cj15*x2460*x2465))+((r12*x2467))+(((-1.0)*x2463*x2466))+(((-1.0)*r10*x2462*x2464)))),IkReal(((((-1.0)*x2462*x2464*x2465))+((x2460*x2461))+((r12*x2463))+((x2464*x2468))+((x2466*x2467))+(((-1.0)*r10*x2460*x2462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2470.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2469.value)))+(x2470.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x2471=IKsin(j12);
IkReal x2472=IKcos(j12);
IkReal x2473=(cj15*sj14);
IkReal x2474=((1.0)*sj11);
IkReal x2475=((1.0)*sj14);
IkReal x2476=(r11*sj15);
IkReal x2477=((1.0)*cj14);
IkReal x2478=(cj15*r20);
IkReal x2479=(sj13*sj15);
IkReal x2480=(r01*sj15);
IkReal x2481=(r21*sj15);
IkReal x2482=(cj13*cj14);
IkReal x2483=((0.4)*sj11);
IkReal x2484=(cj15*r10);
IkReal x2485=((0.4)*cj11);
IkReal x2486=(cj15*sj13);
IkReal x2487=((1.93e-6)*sj11);
IkReal x2488=(cj15*r00);
IkReal x2489=(sj10*x2471);
IkReal x2490=(cj11*x2472);
IkReal x2491=(cj10*x2471);
IkReal x2492=(cj10*x2472);
IkReal x2493=(sj10*x2472);
evalcond[0]=(x2490+((r20*x2473))+(((-1.0)*x2471*x2474))+(((-1.0)*r22*x2477))+(((-1.0)*x2475*x2481)));
evalcond[1]=(((sj11*x2492))+((r00*x2473))+(((-1.0)*r02*x2477))+((cj11*x2491))+(((-1.0)*x2475*x2480)));
evalcond[2]=((((-1.0)*r12*x2477))+((sj11*x2493))+((r10*x2473))+(((-1.0)*x2475*x2476))+((cj11*x2489)));
evalcond[3]=((((9.9e-7)*x2478))+(((-1.0)*x2483))+(((-9.9e-7)*x2481))+((x2472*x2485))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((-1.0)*x2471*x2483)));
evalcond[4]=(((cj10*x2485))+(((-1.0)*cj10*x2487))+((x2485*x2491))+((x2483*x2492))+(((-9.9e-7)*x2480))+(((9.9e-7)*x2488))+(((-1.0)*px)));
evalcond[5]=(((x2485*x2489))+(((-1.0)*sj10*x2487))+((x2483*x2493))+(((9.9e-7)*x2484))+(((-1.0)*py))+(((-9.9e-7)*x2476))+((sj10*x2485)));
evalcond[6]=((((-1.0)*cj13*x2477*x2478))+(((-1.0)*cj13*r22*x2475))+((x2481*x2482))+(((-1.0)*x2472*x2474))+(((-1.0)*cj11*x2471))+((r20*x2479))+((r21*x2486)));
evalcond[7]=(((r01*x2486))+((cj10*x2490))+((x2480*x2482))+((r00*x2479))+(((-1.0)*x2474*x2491))+(((-1.0)*cj13*x2477*x2488))+(((-1.0)*cj13*r02*x2475)));
evalcond[8]=(((x2476*x2482))+(((-1.0)*cj13*r12*x2475))+((r10*x2479))+((r11*x2486))+(((-1.0)*x2474*x2489))+((sj10*x2490))+(((-1.0)*cj13*x2477*x2484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2494=(cj10*cj11);
IkReal x2495=(cj14*r22);
IkReal x2496=(sj14*sj15);
IkReal x2497=(cj14*r02);
IkReal x2498=(cj10*sj11);
IkReal x2499=((1.0)*cj15*sj14);
CheckValue<IkReal> x2500 = IKatan2WithCheck(IkReal((((cj15*r20*sj14*x2498))+(((-1.0)*x2495*x2498))+((cj11*r01*x2496))+((cj11*x2497))+(((-1.0)*r21*x2496*x2498))+(((-1.0)*cj11*r00*x2499)))),IkReal((((x2494*x2495))+((r01*sj11*x2496))+((sj11*x2497))+((r21*x2494*x2496))+(((-1.0)*r20*x2494*x2499))+(((-1.0)*r00*sj11*x2499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2500.valid){
continue;
}
CheckValue<IkReal> x2501=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x2501.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x2500.value)+(((1.5707963267949)*(x2501.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x2502=IKsin(j12);
IkReal x2503=IKcos(j12);
IkReal x2504=(cj15*sj14);
IkReal x2505=((1.0)*sj11);
IkReal x2506=((1.0)*sj14);
IkReal x2507=(r11*sj15);
IkReal x2508=((1.0)*cj14);
IkReal x2509=(cj15*r20);
IkReal x2510=(sj13*sj15);
IkReal x2511=(r01*sj15);
IkReal x2512=(r21*sj15);
IkReal x2513=(cj13*cj14);
IkReal x2514=((0.4)*sj11);
IkReal x2515=(cj15*r10);
IkReal x2516=((0.4)*cj11);
IkReal x2517=(cj15*sj13);
IkReal x2518=((1.93e-6)*sj11);
IkReal x2519=(cj15*r00);
IkReal x2520=(sj10*x2502);
IkReal x2521=(cj11*x2503);
IkReal x2522=(cj10*x2502);
IkReal x2523=(cj10*x2503);
IkReal x2524=(sj10*x2503);
evalcond[0]=(x2521+(((-1.0)*x2506*x2512))+(((-1.0)*x2502*x2505))+(((-1.0)*r22*x2508))+((r20*x2504)));
evalcond[1]=((((-1.0)*r02*x2508))+(((-1.0)*x2506*x2511))+((cj11*x2522))+((r00*x2504))+((sj11*x2523)));
evalcond[2]=(((r10*x2504))+(((-1.0)*r12*x2508))+((cj11*x2520))+(((-1.0)*x2506*x2507))+((sj11*x2524)));
evalcond[3]=((((-9.9e-7)*x2512))+(((-1.0)*x2514))+(((9.9e-7)*x2509))+(((-1.0)*x2502*x2514))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+((x2503*x2516)));
evalcond[4]=((((-9.9e-7)*x2511))+((x2516*x2522))+(((9.9e-7)*x2519))+((cj10*x2516))+((x2514*x2523))+(((-1.0)*px))+(((-1.0)*cj10*x2518)));
evalcond[5]=(((x2516*x2520))+(((-1.0)*sj10*x2518))+(((9.9e-7)*x2515))+((x2514*x2524))+(((-1.0)*py))+((sj10*x2516))+(((-9.9e-7)*x2507)));
evalcond[6]=(((x2512*x2513))+(((-1.0)*x2503*x2505))+(((-1.0)*cj13*r22*x2506))+((r21*x2517))+(((-1.0)*cj13*x2508*x2509))+(((-1.0)*cj11*x2502))+((r20*x2510)));
evalcond[7]=(((cj10*x2521))+((x2511*x2513))+(((-1.0)*cj13*r02*x2506))+((r01*x2517))+((r00*x2510))+(((-1.0)*cj13*x2508*x2519))+(((-1.0)*x2505*x2522)));
evalcond[8]=(((r11*x2517))+((r10*x2510))+((sj10*x2521))+((x2507*x2513))+(((-1.0)*cj13*x2508*x2515))+(((-1.0)*cj13*r12*x2506))+(((-1.0)*x2505*x2520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2525=cj10*cj10;
IkReal x2526=((0.00019107)*cj10);
IkReal x2527=(r01*sj15);
IkReal x2528=((0.4)*sj14);
IkReal x2529=(r21*sj15);
IkReal x2530=(cj15*r00);
IkReal x2531=(cj10*sj14);
IkReal x2532=(cj15*r20);
IkReal x2533=(cj10*px);
IkReal x2534=(cj10*cj14*r02);
IkReal x2535=((((-1.0)*x2528*x2532))+(((9.9e-7)*x2532))+(((0.4)*cj14*r22))+((x2528*x2529))+(((-1.0)*pz))+(((-9.9e-7)*x2529)));
IkReal x2536=(x2525*x2535);
CheckValue<IkReal> x2537=IKPowWithIntegerCheck(IKsign(x2525),-1);
if(!x2537.valid){
continue;
}
CheckValue<IkReal> x2538 = IKatan2WithCheck(IkReal(((((-77.2)*x2527*x2531))+(((-77.2)*x2534))+(((-1.0)*x2526*x2530))+(((77.2)*x2530*x2531))+(((-40000000.0)*x2536))+((x2526*x2527))+(((193.0)*x2533)))),IkReal(((((-39.6)*cj10*x2527))+(((-16000000.0)*x2530*x2531))+(((16000000.0)*x2534))+(((-193.0)*x2536))+(((-40000000.0)*x2533))+(((16000000.0)*x2527*x2531))+(((39.6)*cj10*x2530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2538.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x2537.value)))+(x2538.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x2539=IKsin(j11);
IkReal x2540=sj10*sj10;
IkReal x2541=IKcos(j11);
IkReal x2542=cj10*cj10;
IkReal x2543=(cj10*sj15);
IkReal x2544=((9.9e-7)*r11);
IkReal x2545=(cj15*r20);
IkReal x2546=((0.4)*sj14);
IkReal x2547=(cj15*r00);
IkReal x2548=((0.4)*cj10);
IkReal x2549=(cj15*sj13);
IkReal x2550=(cj13*r22);
IkReal x2551=((0.4)*r11);
IkReal x2552=(cj10*sj10);
IkReal x2553=(r21*sj15);
IkReal x2554=((0.4)*r01);
IkReal x2555=((0.4)*cj14);
IkReal x2556=((9.9e-7)*cj10);
IkReal x2557=(cj13*cj14);
IkReal x2558=((0.4)*sj10);
IkReal x2559=(sj10*sj15);
IkReal x2560=(cj15*r10);
IkReal x2561=((0.4)*sj13*sj15);
IkReal x2562=(sj10*x2555);
IkReal x2563=((9.9e-7)*cj15*sj10);
IkReal x2564=((0.4)*x2541);
IkReal x2565=((9.9e-7)*r01*sj15);
IkReal x2566=((1.93e-6)*x2539);
IkReal x2567=((1.93e-6)*x2541);
IkReal x2568=(x2552*x2566);
IkReal x2569=(sj10*x2541*x2548);
evalcond[0]=((((-0.4)*x2539))+((r22*x2555))+(((9.9e-7)*x2545))+(((-1.0)*x2567))+(((-1.0)*pz))+(((-1.0)*x2545*x2546))+(((-9.9e-7)*x2553))+((x2546*x2553)));
evalcond[1]=((((-1.0)*r11*x2546*x2559))+(((-9.9e-7)*sj10*x2560))+(((-1.0)*x2540*x2564))+((py*sj10))+((sj10*x2546*x2560))+(((-1.0)*r12*x2562))+((x2544*x2559))+((x2540*x2566)));
evalcond[2]=(((cj10*x2546*x2547))+((x2542*x2566))+((cj10*px))+(((-1.0)*x2542*x2564))+(((9.9e-7)*r01*x2543))+(((-1.0)*cj14*r02*x2548))+(((-1.0)*x2547*x2556))+(((-1.0)*r01*x2543*x2546)));
evalcond[3]=((((-9.9e-7)*sj10*x2545))+((x2539*x2558))+((sj10*x2567))+((sj15*x2551*x2557))+((pz*sj10))+((x2549*x2551))+((r10*x2561))+(((-1.0)*cj13*r12*x2546))+(((-1.0)*cj13*x2555*x2560))+(((9.9e-7)*sj10*x2553)));
evalcond[4]=(((cj10*x2567))+(((9.9e-7)*r21*x2543))+((r00*x2561))+((cj10*pz))+((x2539*x2548))+((x2549*x2554))+((sj15*x2554*x2557))+(((-1.0)*cj13*r02*x2546))+(((-1.0)*x2545*x2556))+(((-1.0)*cj13*x2547*x2555)));
evalcond[5]=(((cj13*x2545*x2562))+((sj15*x2544))+((sj10*x2546*x2550))+((sj10*x2566))+(((-1.0)*cj13*x2553*x2562))+(((-1.0)*r21*x2549*x2558))+(((-1.0)*r20*sj13*sj15*x2558))+py+(((-9.9e-7)*x2560))+(((-1.0)*x2541*x2558)));
evalcond[6]=(((cj10*x2566))+(((-1.0)*x2541*x2548))+x2565+(((-1.0)*cj13*r21*x2543*x2555))+((cj10*x2546*x2550))+(((-1.0)*r21*x2548*x2549))+((x2545*x2548*x2557))+px+(((-9.9e-7)*x2547))+(((-0.4)*r20*sj13*x2543)));
evalcond[7]=(x2568+((px*sj10))+(((-9.9e-7)*sj10*x2547))+(((9.9e-7)*r01*x2559))+(((-1.0)*x2569))+((cj10*x2546*x2560))+(((-1.0)*cj14*r12*x2548))+(((-1.0)*r11*x2543*x2546)));
evalcond[8]=(x2568+((cj10*py))+(((-1.0)*r01*x2546*x2559))+((sj10*x2546*x2547))+(((-1.0)*x2556*x2560))+((x2543*x2544))+(((-1.0)*r02*x2562))+(((-1.0)*x2569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[2];
j12eval[0]=cj10;
j12eval[1]=IKsign(cj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
j12eval[0]=sj10;
j12eval[1]=IKsign(sj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2570=(cj15*r00);
IkReal x2571=(cj14*r22);
IkReal x2572=(r21*sj15);
IkReal x2573=(cj11*sj14);
IkReal x2574=(sj11*sj14);
IkReal x2575=(cj15*r20);
IkReal x2576=(r01*sj15);
IkReal x2577=(cj14*r02);
IkReal x2578=((1.0)*x2574);
if( IKabs((((x2573*x2576))+(((-1.0)*x2570*x2573))+((x2574*x2575))+((cj11*x2577))+(((-1.0)*x2572*x2578))+(((-1.0)*sj11*x2571)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2573*x2575))+((x2574*x2576))+((cj11*x2571))+(((-1.0)*x2570*x2578))+((x2572*x2573))+((sj11*x2577)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2573*x2576))+(((-1.0)*x2570*x2573))+((x2574*x2575))+((cj11*x2577))+(((-1.0)*x2572*x2578))+(((-1.0)*sj11*x2571))))+IKsqr(((((-1.0)*x2573*x2575))+((x2574*x2576))+((cj11*x2571))+(((-1.0)*x2570*x2578))+((x2572*x2573))+((sj11*x2577))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((x2573*x2576))+(((-1.0)*x2570*x2573))+((x2574*x2575))+((cj11*x2577))+(((-1.0)*x2572*x2578))+(((-1.0)*sj11*x2571))), ((((-1.0)*x2573*x2575))+((x2574*x2576))+((cj11*x2571))+(((-1.0)*x2570*x2578))+((x2572*x2573))+((sj11*x2577))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2579=IKcos(j12);
IkReal x2580=IKsin(j12);
IkReal x2581=(cj13*cj14);
IkReal x2582=(r01*sj15);
IkReal x2583=((0.4)*cj11);
IkReal x2584=(cj15*r20);
IkReal x2585=((1.0)*r22);
IkReal x2586=(sj13*sj15);
IkReal x2587=(cj15*r00);
IkReal x2588=(cj13*sj14);
IkReal x2589=((1.0)*r02);
IkReal x2590=((1.0)*sj14);
IkReal x2591=(cj15*sj13);
IkReal x2592=(r21*sj15);
IkReal x2593=(cj11*x2579);
IkReal x2594=(sj11*x2579);
IkReal x2595=(sj11*x2580);
IkReal x2596=(cj11*x2580);
IkReal x2597=((1.0)*x2595);
evalcond[0]=(x2594+x2596+((sj14*x2587))+(((-1.0)*cj14*x2589))+(((-1.0)*x2582*x2590)));
evalcond[1]=(x2593+(((-1.0)*x2590*x2592))+((sj14*x2584))+(((-1.0)*x2597))+(((-1.0)*cj14*x2585)));
evalcond[2]=((((-1.0)*pz))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+(((-9.9e-7)*x2592))+(((-0.4)*x2595))+((x2579*x2583))+(((9.9e-7)*x2584)));
evalcond[3]=(x2583+(((0.4)*x2594))+(((-1.93e-6)*sj11))+((x2580*x2583))+(((-1.0)*px))+(((-9.9e-7)*x2582))+(((9.9e-7)*x2587)));
evalcond[4]=(x2593+((r01*x2591))+((r00*x2586))+(((-1.0)*x2588*x2589))+((x2581*x2582))+(((-1.0)*x2597))+(((-1.0)*x2581*x2587)));
evalcond[5]=((((-1.0)*x2585*x2588))+(((-1.0)*x2596))+(((-1.0)*x2594))+((r20*x2586))+((x2581*x2592))+(((-1.0)*x2581*x2584))+((r21*x2591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2598=(sj11*sj14);
IkReal x2599=(r21*sj15);
IkReal x2600=(cj15*r20);
IkReal x2601=(cj11*sj14);
IkReal x2602=(cj15*r00);
IkReal x2603=((1.0)*cj14);
IkReal x2604=((1.0)*r01*sj14*sj15);
if( IKabs(((((-1.0)*cj11*r02*x2603))+((x2598*x2600))+(((-1.0)*r01*sj15*x2601))+((x2601*x2602))+(((-1.0)*r22*sj11*x2603))+(((-1.0)*x2598*x2599)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*cj14*r22))+(((-1.0)*r01*sj15*x2598))+(((-1.0)*r02*sj11*x2603))+(((-1.0)*x2600*x2601))+((x2598*x2602))+((x2599*x2601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj11*r02*x2603))+((x2598*x2600))+(((-1.0)*r01*sj15*x2601))+((x2601*x2602))+(((-1.0)*r22*sj11*x2603))+(((-1.0)*x2598*x2599))))+IKsqr((((cj11*cj14*r22))+(((-1.0)*r01*sj15*x2598))+(((-1.0)*r02*sj11*x2603))+(((-1.0)*x2600*x2601))+((x2598*x2602))+((x2599*x2601))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*cj11*r02*x2603))+((x2598*x2600))+(((-1.0)*r01*sj15*x2601))+((x2601*x2602))+(((-1.0)*r22*sj11*x2603))+(((-1.0)*x2598*x2599))), (((cj11*cj14*r22))+(((-1.0)*r01*sj15*x2598))+(((-1.0)*r02*sj11*x2603))+(((-1.0)*x2600*x2601))+((x2598*x2602))+((x2599*x2601))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2605=IKsin(j12);
IkReal x2606=IKcos(j12);
IkReal x2607=(cj13*cj14);
IkReal x2608=(r01*sj15);
IkReal x2609=((0.4)*cj11);
IkReal x2610=(cj15*r20);
IkReal x2611=((1.0)*r22);
IkReal x2612=((0.4)*sj11);
IkReal x2613=(sj13*sj15);
IkReal x2614=(cj15*r00);
IkReal x2615=(cj13*sj14);
IkReal x2616=((1.0)*sj14);
IkReal x2617=(r21*sj15);
IkReal x2618=((1.0)*r02);
IkReal x2619=(cj15*sj13);
IkReal x2620=(sj11*x2605);
IkReal x2621=(cj11*x2606);
IkReal x2622=((1.0)*cj11*x2605);
IkReal x2623=((1.0)*sj11*x2606);
IkReal x2624=(x2622+x2623);
evalcond[0]=((((-1.0)*x2620))+(((-1.0)*cj14*x2611))+(((-1.0)*x2616*x2617))+((sj14*x2610))+x2621);
evalcond[1]=((((-1.0)*x2608*x2616))+(((-1.0)*cj14*x2618))+(((-1.0)*x2624))+((sj14*x2614)));
evalcond[2]=(((x2606*x2609))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((-9.9e-7)*x2617))+(((9.9e-7)*x2610))+(((-1.0)*x2605*x2612))+(((-1.0)*x2612)));
evalcond[3]=((((-1.0)*x2606*x2612))+(((1.93e-6)*sj11))+(((-1.0)*px))+(((-9.9e-7)*x2608))+(((9.9e-7)*x2614))+(((-1.0)*x2609))+(((-1.0)*x2605*x2609)));
evalcond[4]=(((r00*x2613))+((x2607*x2608))+((r01*x2619))+(((-1.0)*x2621))+(((-1.0)*x2607*x2614))+(((-1.0)*x2615*x2618))+x2620);
evalcond[5]=((((-1.0)*x2611*x2615))+((r20*x2613))+(((-1.0)*x2607*x2610))+(((-1.0)*x2624))+((r21*x2619))+((x2607*x2617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2625=(sj11*sj14);
IkReal x2626=(r11*sj15);
IkReal x2627=((1.0)*cj15);
IkReal x2628=(cj14*r12);
IkReal x2629=(cj11*sj14);
IkReal x2630=(r21*sj15);
IkReal x2631=(cj14*r22);
if( IKabs((((cj11*x2628))+((x2626*x2629))+((cj15*r20*x2625))+(((-1.0)*r10*x2627*x2629))+(((-1.0)*x2625*x2630))+(((-1.0)*sj11*x2631)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x2627*x2629))+(((-1.0)*r10*x2625*x2627))+((cj11*x2631))+((sj11*x2628))+((x2625*x2626))+((x2629*x2630)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj11*x2628))+((x2626*x2629))+((cj15*r20*x2625))+(((-1.0)*r10*x2627*x2629))+(((-1.0)*x2625*x2630))+(((-1.0)*sj11*x2631))))+IKsqr(((((-1.0)*r20*x2627*x2629))+(((-1.0)*r10*x2625*x2627))+((cj11*x2631))+((sj11*x2628))+((x2625*x2626))+((x2629*x2630))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((cj11*x2628))+((x2626*x2629))+((cj15*r20*x2625))+(((-1.0)*r10*x2627*x2629))+(((-1.0)*x2625*x2630))+(((-1.0)*sj11*x2631))), ((((-1.0)*r20*x2627*x2629))+(((-1.0)*r10*x2625*x2627))+((cj11*x2631))+((sj11*x2628))+((x2625*x2626))+((x2629*x2630))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2632=IKcos(j12);
IkReal x2633=IKsin(j12);
IkReal x2634=(cj15*r10);
IkReal x2635=((0.4)*cj11);
IkReal x2636=((1.0)*sj14);
IkReal x2637=(r11*sj15);
IkReal x2638=((1.0)*cj14);
IkReal x2639=(cj15*r20);
IkReal x2640=(cj13*cj14);
IkReal x2641=(sj13*sj15);
IkReal x2642=(cj15*sj13);
IkReal x2643=(r21*sj15);
IkReal x2644=(cj11*x2632);
IkReal x2645=(sj11*x2632);
IkReal x2646=(sj11*x2633);
IkReal x2647=(cj11*x2633);
IkReal x2648=((1.0)*x2646);
evalcond[0]=(((sj14*x2634))+(((-1.0)*r12*x2638))+(((-1.0)*x2636*x2637))+x2645+x2647);
evalcond[1]=(((sj14*x2639))+(((-1.0)*x2648))+(((-1.0)*x2636*x2643))+(((-1.0)*r22*x2638))+x2644);
evalcond[2]=((((9.9e-7)*x2639))+(((-0.4)*x2646))+(((-1.0)*pz))+(((-9.9e-7)*x2643))+((x2632*x2635))+(((-0.4)*sj11))+(((-1.93e-6)*cj11)));
evalcond[3]=((((-9.9e-7)*x2637))+(((9.9e-7)*x2634))+(((0.4)*x2645))+(((-1.93e-6)*sj11))+(((-1.0)*py))+((x2633*x2635))+x2635);
evalcond[4]=(((r11*x2642))+(((-1.0)*cj13*r12*x2636))+((r10*x2641))+(((-1.0)*cj13*x2634*x2638))+(((-1.0)*x2648))+((x2637*x2640))+x2644);
evalcond[5]=(((r21*x2642))+(((-1.0)*cj13*r22*x2636))+((x2640*x2643))+(((-1.0)*x2645))+(((-1.0)*x2647))+(((-1.0)*cj13*x2638*x2639))+((r20*x2641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2649=((1.0)*cj11);
IkReal x2650=(sj14*sj15);
IkReal x2651=(cj14*r12);
IkReal x2652=((1.0)*sj11);
IkReal x2653=(cj14*r22);
IkReal x2654=(cj15*r20*sj14);
IkReal x2655=(cj15*r10*sj14);
if( IKabs(((((-1.0)*x2652*x2653))+((sj11*x2654))+(((-1.0)*r11*x2649*x2650))+(((-1.0)*r21*x2650*x2652))+(((-1.0)*x2649*x2651))+((cj11*x2655)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2651*x2652))+(((-1.0)*r11*x2650*x2652))+((sj11*x2655))+((cj11*r21*x2650))+(((-1.0)*x2649*x2654))+((cj11*x2653)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2652*x2653))+((sj11*x2654))+(((-1.0)*r11*x2649*x2650))+(((-1.0)*r21*x2650*x2652))+(((-1.0)*x2649*x2651))+((cj11*x2655))))+IKsqr(((((-1.0)*x2651*x2652))+(((-1.0)*r11*x2650*x2652))+((sj11*x2655))+((cj11*r21*x2650))+(((-1.0)*x2649*x2654))+((cj11*x2653))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*x2652*x2653))+((sj11*x2654))+(((-1.0)*r11*x2649*x2650))+(((-1.0)*r21*x2650*x2652))+(((-1.0)*x2649*x2651))+((cj11*x2655))), ((((-1.0)*x2651*x2652))+(((-1.0)*r11*x2650*x2652))+((sj11*x2655))+((cj11*r21*x2650))+(((-1.0)*x2649*x2654))+((cj11*x2653))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2656=IKsin(j12);
IkReal x2657=IKcos(j12);
IkReal x2658=(cj15*r10);
IkReal x2659=((0.4)*cj11);
IkReal x2660=((1.0)*sj14);
IkReal x2661=(r11*sj15);
IkReal x2662=((1.0)*cj14);
IkReal x2663=((0.4)*sj11);
IkReal x2664=(cj15*r20);
IkReal x2665=(cj13*cj14);
IkReal x2666=(r21*sj15);
IkReal x2667=(sj13*sj15);
IkReal x2668=(cj15*sj13);
IkReal x2669=(sj11*x2656);
IkReal x2670=(cj11*x2657);
IkReal x2671=((1.0)*cj11*x2656);
IkReal x2672=((1.0)*sj11*x2657);
IkReal x2673=(x2671+x2672);
evalcond[0]=((((-1.0)*x2669))+(((-1.0)*x2660*x2666))+((sj14*x2664))+(((-1.0)*r22*x2662))+x2670);
evalcond[1]=((((-1.0)*r12*x2662))+((sj14*x2658))+(((-1.0)*x2660*x2661))+(((-1.0)*x2673)));
evalcond[2]=((((9.9e-7)*x2664))+((x2657*x2659))+(((-9.9e-7)*x2666))+(((-1.0)*pz))+(((-1.0)*x2663))+(((-1.93e-6)*cj11))+(((-1.0)*x2656*x2663)));
evalcond[3]=((((9.9e-7)*x2658))+(((1.93e-6)*sj11))+(((-9.9e-7)*x2661))+(((-1.0)*py))+(((-1.0)*x2657*x2663))+(((-1.0)*x2659))+(((-1.0)*x2656*x2659)));
evalcond[4]=((((-1.0)*x2670))+((x2661*x2665))+(((-1.0)*cj13*r12*x2660))+((r10*x2667))+(((-1.0)*cj13*x2658*x2662))+((r11*x2668))+x2669);
evalcond[5]=((((-1.0)*cj13*x2662*x2664))+((r21*x2668))+(((-1.0)*x2673))+(((-1.0)*cj13*r22*x2660))+((r20*x2667))+((x2665*x2666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2674=(sj11*sj14);
IkReal x2675=(r11*sj15);
IkReal x2676=((1.0)*cj15);
IkReal x2677=(cj14*sj11);
IkReal x2678=(cj11*sj14);
IkReal x2679=(r20*sj10);
IkReal x2680=(r22*sj10);
IkReal x2681=(cj11*cj14);
IkReal x2682=(r21*sj10*sj15);
CheckValue<IkReal> x2683=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x2683.valid){
continue;
}
CheckValue<IkReal> x2684 = IKatan2WithCheck(IkReal(((((-1.0)*x2674*x2682))+((cj15*x2674*x2679))+(((-1.0)*x2677*x2680))+((x2675*x2678))+(((-1.0)*r10*x2676*x2678))+((r12*x2681)))),IkReal((((r12*x2677))+(((-1.0)*x2676*x2678*x2679))+((x2678*x2682))+((x2680*x2681))+((x2674*x2675))+(((-1.0)*r10*x2674*x2676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2684.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2683.value)))+(x2684.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x2685=IKsin(j12);
IkReal x2686=IKcos(j12);
IkReal x2687=(cj15*sj14);
IkReal x2688=((1.0)*sj11);
IkReal x2689=((1.0)*sj14);
IkReal x2690=(r11*sj15);
IkReal x2691=((1.0)*cj14);
IkReal x2692=(cj15*r20);
IkReal x2693=(sj13*sj15);
IkReal x2694=(r01*sj15);
IkReal x2695=(r21*sj15);
IkReal x2696=(cj13*cj14);
IkReal x2697=((0.4)*sj11);
IkReal x2698=(cj15*r10);
IkReal x2699=((0.4)*cj11);
IkReal x2700=(cj15*sj13);
IkReal x2701=((1.93e-6)*sj11);
IkReal x2702=(cj15*r00);
IkReal x2703=(sj10*x2685);
IkReal x2704=(cj11*x2686);
IkReal x2705=(cj10*x2685);
IkReal x2706=(cj10*x2686);
IkReal x2707=(sj10*x2686);
evalcond[0]=(x2704+(((-1.0)*x2685*x2688))+(((-1.0)*r22*x2691))+(((-1.0)*x2689*x2695))+((r20*x2687)));
evalcond[1]=((((-1.0)*r02*x2691))+((r00*x2687))+(((-1.0)*x2689*x2694))+((sj11*x2706))+((cj11*x2705)));
evalcond[2]=(((r10*x2687))+(((-1.0)*x2689*x2690))+((sj11*x2707))+(((-1.0)*r12*x2691))+((cj11*x2703)));
evalcond[3]=((((-9.9e-7)*x2695))+(((9.9e-7)*x2692))+(((-1.0)*pz))+(((-1.0)*x2697))+((x2686*x2699))+(((-1.93e-6)*cj11))+(((-1.0)*x2685*x2697)));
evalcond[4]=((((-9.9e-7)*x2694))+(((9.9e-7)*x2702))+((cj10*x2699))+((x2699*x2705))+((x2697*x2706))+(((-1.0)*px))+(((-1.0)*cj10*x2701)));
evalcond[5]=((((-9.9e-7)*x2690))+(((9.9e-7)*x2698))+((x2699*x2703))+((x2697*x2707))+(((-1.0)*py))+((sj10*x2699))+(((-1.0)*sj10*x2701)));
evalcond[6]=((((-1.0)*cj13*r22*x2689))+(((-1.0)*cj13*x2691*x2692))+((r21*x2700))+((x2695*x2696))+(((-1.0)*x2686*x2688))+((r20*x2693))+(((-1.0)*cj11*x2685)));
evalcond[7]=((((-1.0)*cj13*x2691*x2702))+(((-1.0)*x2688*x2705))+((r01*x2700))+((cj10*x2704))+((r00*x2693))+(((-1.0)*cj13*r02*x2689))+((x2694*x2696)));
evalcond[8]=((((-1.0)*x2688*x2703))+((r11*x2700))+((r10*x2693))+((sj10*x2704))+(((-1.0)*cj13*x2691*x2698))+(((-1.0)*cj13*r12*x2689))+((x2690*x2696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2708=(cj10*cj11);
IkReal x2709=(cj14*r22);
IkReal x2710=(sj14*sj15);
IkReal x2711=(cj14*r02);
IkReal x2712=(cj10*sj11);
IkReal x2713=((1.0)*cj15*sj14);
CheckValue<IkReal> x2714 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*r00*x2713))+(((-1.0)*x2709*x2712))+((cj11*r01*x2710))+((cj15*r20*sj14*x2712))+((cj11*x2711))+(((-1.0)*r21*x2710*x2712)))),IkReal((((r01*sj11*x2710))+((sj11*x2711))+(((-1.0)*r20*x2708*x2713))+(((-1.0)*r00*sj11*x2713))+((x2708*x2709))+((r21*x2708*x2710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2714.valid){
continue;
}
CheckValue<IkReal> x2715=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x2715.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x2714.value)+(((1.5707963267949)*(x2715.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x2716=IKsin(j12);
IkReal x2717=IKcos(j12);
IkReal x2718=(cj15*sj14);
IkReal x2719=((1.0)*sj11);
IkReal x2720=((1.0)*sj14);
IkReal x2721=(r11*sj15);
IkReal x2722=((1.0)*cj14);
IkReal x2723=(cj15*r20);
IkReal x2724=(sj13*sj15);
IkReal x2725=(r01*sj15);
IkReal x2726=(r21*sj15);
IkReal x2727=(cj13*cj14);
IkReal x2728=((0.4)*sj11);
IkReal x2729=(cj15*r10);
IkReal x2730=((0.4)*cj11);
IkReal x2731=(cj15*sj13);
IkReal x2732=((1.93e-6)*sj11);
IkReal x2733=(cj15*r00);
IkReal x2734=(sj10*x2716);
IkReal x2735=(cj11*x2717);
IkReal x2736=(cj10*x2716);
IkReal x2737=(cj10*x2717);
IkReal x2738=(sj10*x2717);
evalcond[0]=(x2735+(((-1.0)*x2720*x2726))+(((-1.0)*r22*x2722))+(((-1.0)*x2716*x2719))+((r20*x2718)));
evalcond[1]=(((sj11*x2737))+(((-1.0)*x2720*x2725))+((cj11*x2736))+(((-1.0)*r02*x2722))+((r00*x2718)));
evalcond[2]=(((sj11*x2738))+(((-1.0)*x2720*x2721))+(((-1.0)*r12*x2722))+((r10*x2718))+((cj11*x2734)));
evalcond[3]=((((-9.9e-7)*x2726))+((x2717*x2730))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((9.9e-7)*x2723))+(((-1.0)*x2716*x2728))+(((-1.0)*x2728)));
evalcond[4]=((((-9.9e-7)*x2725))+(((-1.0)*cj10*x2732))+(((-1.0)*px))+((x2728*x2737))+((x2730*x2736))+((cj10*x2730))+(((9.9e-7)*x2733)));
evalcond[5]=((((-9.9e-7)*x2721))+(((-1.0)*sj10*x2732))+(((-1.0)*py))+((sj10*x2730))+((x2728*x2738))+(((9.9e-7)*x2729))+((x2730*x2734)));
evalcond[6]=(((r21*x2731))+(((-1.0)*cj13*r22*x2720))+(((-1.0)*cj11*x2716))+(((-1.0)*cj13*x2722*x2723))+((x2726*x2727))+(((-1.0)*x2717*x2719))+((r20*x2724)));
evalcond[7]=((((-1.0)*cj13*x2722*x2733))+(((-1.0)*cj13*r02*x2720))+(((-1.0)*x2719*x2736))+((r01*x2731))+((x2725*x2727))+((r00*x2724))+((cj10*x2735)));
evalcond[8]=((((-1.0)*x2719*x2734))+(((-1.0)*cj13*x2722*x2729))+((x2721*x2727))+(((-1.0)*cj13*r12*x2720))+((sj10*x2735))+((r10*x2724))+((r11*x2731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2739=sj10*sj10;
IkReal x2740=(sj10*sj14);
IkReal x2741=(r11*sj15);
IkReal x2742=(cj15*r10);
IkReal x2743=((0.4)*sj14);
IkReal x2744=(r21*sj15);
IkReal x2745=(cj15*r20);
IkReal x2746=((0.00019107)*sj10);
IkReal x2747=(py*sj10);
IkReal x2748=(cj14*r12*sj10);
IkReal x2749=((((-1.0)*x2743*x2745))+(((0.4)*cj14*r22))+((x2743*x2744))+(((9.9e-7)*x2745))+(((-1.0)*pz))+(((-9.9e-7)*x2744)));
IkReal x2750=(x2739*x2749);
CheckValue<IkReal> x2751 = IKatan2WithCheck(IkReal(((((-77.2)*x2748))+(((193.0)*x2747))+(((-77.2)*x2740*x2741))+((x2741*x2746))+(((-40000000.0)*x2750))+(((77.2)*x2740*x2742))+(((-1.0)*x2742*x2746)))),IkReal(((((16000000.0)*x2748))+(((16000000.0)*x2740*x2741))+(((-193.0)*x2750))+(((-40000000.0)*x2747))+(((-39.6)*sj10*x2741))+(((-16000000.0)*x2740*x2742))+(((39.6)*sj10*x2742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2751.valid){
continue;
}
CheckValue<IkReal> x2752=IKPowWithIntegerCheck(IKsign(x2739),-1);
if(!x2752.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2751.value)+(((-1.5707963267949)*(x2752.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x2753=IKsin(j11);
IkReal x2754=sj10*sj10;
IkReal x2755=IKcos(j11);
IkReal x2756=cj10*cj10;
IkReal x2757=(cj10*sj15);
IkReal x2758=((9.9e-7)*r11);
IkReal x2759=(cj15*r20);
IkReal x2760=((0.4)*sj14);
IkReal x2761=(cj15*r00);
IkReal x2762=((0.4)*cj10);
IkReal x2763=(cj15*sj13);
IkReal x2764=(cj13*r22);
IkReal x2765=((0.4)*r11);
IkReal x2766=(cj10*sj10);
IkReal x2767=(r21*sj15);
IkReal x2768=((0.4)*r01);
IkReal x2769=((0.4)*cj14);
IkReal x2770=((9.9e-7)*cj10);
IkReal x2771=(cj13*cj14);
IkReal x2772=((0.4)*sj10);
IkReal x2773=(sj10*sj15);
IkReal x2774=(cj15*r10);
IkReal x2775=((0.4)*sj13*sj15);
IkReal x2776=(sj10*x2769);
IkReal x2777=((9.9e-7)*cj15*sj10);
IkReal x2778=((0.4)*x2755);
IkReal x2779=((9.9e-7)*r01*sj15);
IkReal x2780=((1.93e-6)*x2753);
IkReal x2781=((1.93e-6)*x2755);
IkReal x2782=(x2766*x2780);
IkReal x2783=(sj10*x2755*x2762);
evalcond[0]=((((-1.0)*x2781))+(((9.9e-7)*x2759))+(((-1.0)*x2759*x2760))+(((-1.0)*pz))+((x2760*x2767))+(((-9.9e-7)*x2767))+(((-0.4)*x2753))+((r22*x2769)));
evalcond[1]=(((x2758*x2773))+((sj10*x2760*x2774))+(((-1.0)*r12*x2776))+((py*sj10))+((x2754*x2780))+(((-1.0)*r11*x2760*x2773))+(((-1.0)*x2754*x2778))+(((-9.9e-7)*sj10*x2774)));
evalcond[2]=(((cj10*px))+(((-1.0)*r01*x2757*x2760))+(((-1.0)*cj14*r02*x2762))+(((-1.0)*x2761*x2770))+(((-1.0)*x2756*x2778))+(((9.9e-7)*r01*x2757))+((x2756*x2780))+((cj10*x2760*x2761)));
evalcond[3]=((((9.9e-7)*sj10*x2767))+(((-1.0)*cj13*r12*x2760))+((pz*sj10))+((r10*x2775))+(((-9.9e-7)*sj10*x2759))+(((-1.0)*cj13*x2769*x2774))+((sj10*x2781))+((x2753*x2772))+((x2763*x2765))+((sj15*x2765*x2771)));
evalcond[4]=(((cj10*pz))+((cj10*x2781))+((r00*x2775))+(((-1.0)*x2759*x2770))+(((-1.0)*cj13*r02*x2760))+(((9.9e-7)*r21*x2757))+(((-1.0)*cj13*x2761*x2769))+((sj15*x2768*x2771))+((x2753*x2762))+((x2763*x2768)));
evalcond[5]=(((sj10*x2760*x2764))+(((-1.0)*cj13*x2767*x2776))+(((-1.0)*r21*x2763*x2772))+((cj13*x2759*x2776))+py+((sj10*x2780))+(((-1.0)*r20*sj13*sj15*x2772))+(((-9.9e-7)*x2774))+(((-1.0)*x2755*x2772))+((sj15*x2758)));
evalcond[6]=(x2779+(((-1.0)*x2755*x2762))+((cj10*x2780))+(((-0.4)*r20*sj13*x2757))+px+(((-1.0)*cj13*r21*x2757*x2769))+(((-1.0)*r21*x2762*x2763))+(((-9.9e-7)*x2761))+((x2759*x2762*x2771))+((cj10*x2760*x2764)));
evalcond[7]=((((-1.0)*x2783))+x2782+(((-9.9e-7)*sj10*x2761))+((px*sj10))+(((-1.0)*cj14*r12*x2762))+(((9.9e-7)*r01*x2773))+((cj10*x2760*x2774))+(((-1.0)*r11*x2757*x2760)));
evalcond[8]=((((-1.0)*x2783))+x2782+((cj10*py))+(((-1.0)*r02*x2776))+((x2757*x2758))+(((-1.0)*x2770*x2774))+((sj10*x2760*x2761))+(((-1.0)*r01*x2760*x2773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[2];
j12eval[0]=cj10;
j12eval[1]=IKsign(cj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
j12eval[0]=sj10;
j12eval[1]=IKsign(sj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2784=(cj15*r00);
IkReal x2785=(cj14*r22);
IkReal x2786=(r21*sj15);
IkReal x2787=(cj11*sj14);
IkReal x2788=(sj11*sj14);
IkReal x2789=(cj15*r20);
IkReal x2790=(r01*sj15);
IkReal x2791=(cj14*r02);
IkReal x2792=((1.0)*x2788);
if( IKabs(((((-1.0)*x2786*x2792))+((x2787*x2790))+((cj11*x2791))+(((-1.0)*x2784*x2787))+((x2788*x2789))+(((-1.0)*sj11*x2785)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2784*x2792))+((sj11*x2791))+((cj11*x2785))+(((-1.0)*x2787*x2789))+((x2788*x2790))+((x2786*x2787)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2786*x2792))+((x2787*x2790))+((cj11*x2791))+(((-1.0)*x2784*x2787))+((x2788*x2789))+(((-1.0)*sj11*x2785))))+IKsqr(((((-1.0)*x2784*x2792))+((sj11*x2791))+((cj11*x2785))+(((-1.0)*x2787*x2789))+((x2788*x2790))+((x2786*x2787))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*x2786*x2792))+((x2787*x2790))+((cj11*x2791))+(((-1.0)*x2784*x2787))+((x2788*x2789))+(((-1.0)*sj11*x2785))), ((((-1.0)*x2784*x2792))+((sj11*x2791))+((cj11*x2785))+(((-1.0)*x2787*x2789))+((x2788*x2790))+((x2786*x2787))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2793=IKcos(j12);
IkReal x2794=IKsin(j12);
IkReal x2795=(cj13*cj14);
IkReal x2796=(r01*sj15);
IkReal x2797=((0.4)*cj11);
IkReal x2798=(cj15*r20);
IkReal x2799=((1.0)*r22);
IkReal x2800=(sj13*sj15);
IkReal x2801=(cj15*r00);
IkReal x2802=(cj13*sj14);
IkReal x2803=((1.0)*r02);
IkReal x2804=((1.0)*sj14);
IkReal x2805=(cj15*sj13);
IkReal x2806=(r21*sj15);
IkReal x2807=(cj11*x2793);
IkReal x2808=(sj11*x2793);
IkReal x2809=(sj11*x2794);
IkReal x2810=(cj11*x2794);
IkReal x2811=((1.0)*x2809);
evalcond[0]=((((-1.0)*cj14*x2803))+(((-1.0)*x2796*x2804))+x2808+x2810+((sj14*x2801)));
evalcond[1]=((((-1.0)*x2811))+(((-1.0)*x2804*x2806))+(((-1.0)*cj14*x2799))+x2807+((sj14*x2798)));
evalcond[2]=((((-9.9e-7)*x2806))+(((-1.0)*pz))+(((-0.4)*x2809))+((x2793*x2797))+(((9.9e-7)*x2798))+(((-0.4)*sj11))+(((-1.93e-6)*cj11)));
evalcond[3]=(x2797+(((0.4)*x2808))+((x2794*x2797))+(((-1.93e-6)*sj11))+(((-9.9e-7)*x2796))+(((-1.0)*px))+(((9.9e-7)*x2801)));
evalcond[4]=((((-1.0)*x2795*x2801))+((x2795*x2796))+(((-1.0)*x2802*x2803))+(((-1.0)*x2811))+x2807+((r01*x2805))+((r00*x2800)));
evalcond[5]=((((-1.0)*x2808))+(((-1.0)*x2810))+((r20*x2800))+(((-1.0)*x2799*x2802))+((r21*x2805))+((x2795*x2806))+(((-1.0)*x2795*x2798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2812=(sj11*sj14);
IkReal x2813=(r21*sj15);
IkReal x2814=(cj15*r20);
IkReal x2815=(cj11*sj14);
IkReal x2816=(cj15*r00);
IkReal x2817=((1.0)*cj14);
IkReal x2818=((1.0)*r01*sj14*sj15);
if( IKabs(((((-1.0)*r01*sj15*x2815))+((x2812*x2814))+(((-1.0)*cj11*r02*x2817))+((x2815*x2816))+(((-1.0)*r22*sj11*x2817))+(((-1.0)*x2812*x2813)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj15*x2812))+((x2813*x2815))+((x2812*x2816))+(((-1.0)*x2814*x2815))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x2817)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj15*x2815))+((x2812*x2814))+(((-1.0)*cj11*r02*x2817))+((x2815*x2816))+(((-1.0)*r22*sj11*x2817))+(((-1.0)*x2812*x2813))))+IKsqr(((((-1.0)*r01*sj15*x2812))+((x2813*x2815))+((x2812*x2816))+(((-1.0)*x2814*x2815))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x2817))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r01*sj15*x2815))+((x2812*x2814))+(((-1.0)*cj11*r02*x2817))+((x2815*x2816))+(((-1.0)*r22*sj11*x2817))+(((-1.0)*x2812*x2813))), ((((-1.0)*r01*sj15*x2812))+((x2813*x2815))+((x2812*x2816))+(((-1.0)*x2814*x2815))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x2817))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2819=IKsin(j12);
IkReal x2820=IKcos(j12);
IkReal x2821=(cj13*cj14);
IkReal x2822=(r01*sj15);
IkReal x2823=((0.4)*cj11);
IkReal x2824=(cj15*r20);
IkReal x2825=((1.0)*r22);
IkReal x2826=((0.4)*sj11);
IkReal x2827=(sj13*sj15);
IkReal x2828=(cj15*r00);
IkReal x2829=(cj13*sj14);
IkReal x2830=((1.0)*sj14);
IkReal x2831=(r21*sj15);
IkReal x2832=((1.0)*r02);
IkReal x2833=(cj15*sj13);
IkReal x2834=(sj11*x2819);
IkReal x2835=(cj11*x2820);
IkReal x2836=((1.0)*cj11*x2819);
IkReal x2837=((1.0)*sj11*x2820);
IkReal x2838=(x2837+x2836);
evalcond[0]=((((-1.0)*x2834))+(((-1.0)*cj14*x2825))+((sj14*x2824))+x2835+(((-1.0)*x2830*x2831)));
evalcond[1]=((((-1.0)*x2838))+(((-1.0)*cj14*x2832))+(((-1.0)*x2822*x2830))+((sj14*x2828)));
evalcond[2]=((((9.9e-7)*x2824))+(((-9.9e-7)*x2831))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((-1.0)*x2819*x2826))+(((-1.0)*x2826))+((x2820*x2823)));
evalcond[3]=((((-1.0)*x2820*x2826))+(((9.9e-7)*x2828))+(((1.93e-6)*sj11))+(((-9.9e-7)*x2822))+(((-1.0)*px))+(((-1.0)*x2819*x2823))+(((-1.0)*x2823)));
evalcond[4]=(((x2821*x2822))+(((-1.0)*x2835))+(((-1.0)*x2821*x2828))+((r00*x2827))+x2834+(((-1.0)*x2829*x2832))+((r01*x2833)));
evalcond[5]=(((r20*x2827))+(((-1.0)*x2838))+((x2821*x2831))+(((-1.0)*x2821*x2824))+(((-1.0)*x2825*x2829))+((r21*x2833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2839=(sj11*sj14);
IkReal x2840=(r11*sj15);
IkReal x2841=((1.0)*cj15);
IkReal x2842=(cj14*r12);
IkReal x2843=(cj11*sj14);
IkReal x2844=(r21*sj15);
IkReal x2845=(cj14*r22);
if( IKabs((((cj15*r20*x2839))+(((-1.0)*sj11*x2845))+(((-1.0)*r10*x2841*x2843))+((x2840*x2843))+((cj11*x2842))+(((-1.0)*x2839*x2844)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj11*x2842))+(((-1.0)*r20*x2841*x2843))+((x2843*x2844))+(((-1.0)*r10*x2839*x2841))+((cj11*x2845))+((x2839*x2840)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r20*x2839))+(((-1.0)*sj11*x2845))+(((-1.0)*r10*x2841*x2843))+((x2840*x2843))+((cj11*x2842))+(((-1.0)*x2839*x2844))))+IKsqr((((sj11*x2842))+(((-1.0)*r20*x2841*x2843))+((x2843*x2844))+(((-1.0)*r10*x2839*x2841))+((cj11*x2845))+((x2839*x2840))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((cj15*r20*x2839))+(((-1.0)*sj11*x2845))+(((-1.0)*r10*x2841*x2843))+((x2840*x2843))+((cj11*x2842))+(((-1.0)*x2839*x2844))), (((sj11*x2842))+(((-1.0)*r20*x2841*x2843))+((x2843*x2844))+(((-1.0)*r10*x2839*x2841))+((cj11*x2845))+((x2839*x2840))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2846=IKcos(j12);
IkReal x2847=IKsin(j12);
IkReal x2848=(cj15*r10);
IkReal x2849=((0.4)*cj11);
IkReal x2850=((1.0)*sj14);
IkReal x2851=(r11*sj15);
IkReal x2852=((1.0)*cj14);
IkReal x2853=(cj15*r20);
IkReal x2854=(cj13*cj14);
IkReal x2855=(sj13*sj15);
IkReal x2856=(cj15*sj13);
IkReal x2857=(r21*sj15);
IkReal x2858=(cj11*x2846);
IkReal x2859=(sj11*x2846);
IkReal x2860=(sj11*x2847);
IkReal x2861=(cj11*x2847);
IkReal x2862=((1.0)*x2860);
evalcond[0]=(((sj14*x2848))+(((-1.0)*r12*x2852))+(((-1.0)*x2850*x2851))+x2859+x2861);
evalcond[1]=(((sj14*x2853))+(((-1.0)*x2850*x2857))+(((-1.0)*x2862))+(((-1.0)*r22*x2852))+x2858);
evalcond[2]=((((-9.9e-7)*x2857))+(((-0.4)*x2860))+((x2846*x2849))+(((-1.0)*pz))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+(((9.9e-7)*x2853)));
evalcond[3]=(((x2847*x2849))+(((-9.9e-7)*x2851))+(((-1.93e-6)*sj11))+(((0.4)*x2859))+(((-1.0)*py))+(((9.9e-7)*x2848))+x2849);
evalcond[4]=((((-1.0)*cj13*r12*x2850))+((r11*x2856))+(((-1.0)*cj13*x2848*x2852))+(((-1.0)*x2862))+((x2851*x2854))+x2858+((r10*x2855)));
evalcond[5]=((((-1.0)*cj13*r22*x2850))+((r21*x2856))+((r20*x2855))+(((-1.0)*x2861))+(((-1.0)*cj13*x2852*x2853))+(((-1.0)*x2859))+((x2854*x2857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2863=((1.0)*cj11);
IkReal x2864=(sj14*sj15);
IkReal x2865=(cj14*r12);
IkReal x2866=((1.0)*sj11);
IkReal x2867=(cj14*r22);
IkReal x2868=(cj15*r20*sj14);
IkReal x2869=(cj15*r10*sj14);
if( IKabs(((((-1.0)*r11*x2863*x2864))+(((-1.0)*r21*x2864*x2866))+((cj11*x2869))+((sj11*x2868))+(((-1.0)*x2863*x2865))+(((-1.0)*x2866*x2867)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*r21*x2864))+(((-1.0)*x2865*x2866))+((cj11*x2867))+((sj11*x2869))+(((-1.0)*x2863*x2868))+(((-1.0)*r11*x2864*x2866)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x2863*x2864))+(((-1.0)*r21*x2864*x2866))+((cj11*x2869))+((sj11*x2868))+(((-1.0)*x2863*x2865))+(((-1.0)*x2866*x2867))))+IKsqr((((cj11*r21*x2864))+(((-1.0)*x2865*x2866))+((cj11*x2867))+((sj11*x2869))+(((-1.0)*x2863*x2868))+(((-1.0)*r11*x2864*x2866))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r11*x2863*x2864))+(((-1.0)*r21*x2864*x2866))+((cj11*x2869))+((sj11*x2868))+(((-1.0)*x2863*x2865))+(((-1.0)*x2866*x2867))), (((cj11*r21*x2864))+(((-1.0)*x2865*x2866))+((cj11*x2867))+((sj11*x2869))+(((-1.0)*x2863*x2868))+(((-1.0)*r11*x2864*x2866))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2870=IKsin(j12);
IkReal x2871=IKcos(j12);
IkReal x2872=(cj15*r10);
IkReal x2873=((0.4)*cj11);
IkReal x2874=((1.0)*sj14);
IkReal x2875=(r11*sj15);
IkReal x2876=((1.0)*cj14);
IkReal x2877=((0.4)*sj11);
IkReal x2878=(cj15*r20);
IkReal x2879=(cj13*cj14);
IkReal x2880=(r21*sj15);
IkReal x2881=(sj13*sj15);
IkReal x2882=(cj15*sj13);
IkReal x2883=(sj11*x2870);
IkReal x2884=(cj11*x2871);
IkReal x2885=((1.0)*cj11*x2870);
IkReal x2886=((1.0)*sj11*x2871);
IkReal x2887=(x2886+x2885);
evalcond[0]=((((-1.0)*x2874*x2880))+(((-1.0)*r22*x2876))+(((-1.0)*x2883))+((sj14*x2878))+x2884);
evalcond[1]=((((-1.0)*x2874*x2875))+((sj14*x2872))+(((-1.0)*x2887))+(((-1.0)*r12*x2876)));
evalcond[2]=((((-9.9e-7)*x2880))+(((9.9e-7)*x2878))+(((-1.0)*x2877))+(((-1.0)*x2870*x2877))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+((x2871*x2873)));
evalcond[3]=((((1.93e-6)*sj11))+(((9.9e-7)*x2872))+(((-1.0)*x2871*x2877))+(((-1.0)*x2873))+(((-1.0)*x2870*x2873))+(((-1.0)*py))+(((-9.9e-7)*x2875)));
evalcond[4]=(((r11*x2882))+(((-1.0)*cj13*r12*x2874))+(((-1.0)*x2884))+((x2875*x2879))+((r10*x2881))+(((-1.0)*cj13*x2872*x2876))+x2883);
evalcond[5]=(((r20*x2881))+((r21*x2882))+(((-1.0)*cj13*x2876*x2878))+((x2879*x2880))+(((-1.0)*cj13*r22*x2874))+(((-1.0)*x2887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2888=(sj11*sj14);
IkReal x2889=(r11*sj15);
IkReal x2890=((1.0)*cj15);
IkReal x2891=(cj14*sj11);
IkReal x2892=(cj11*sj14);
IkReal x2893=(r20*sj10);
IkReal x2894=(r22*sj10);
IkReal x2895=(cj11*cj14);
IkReal x2896=(r21*sj10*sj15);
CheckValue<IkReal> x2897=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x2897.valid){
continue;
}
CheckValue<IkReal> x2898 = IKatan2WithCheck(IkReal(((((-1.0)*x2888*x2896))+(((-1.0)*r10*x2890*x2892))+((x2889*x2892))+((r12*x2895))+((cj15*x2888*x2893))+(((-1.0)*x2891*x2894)))),IkReal(((((-1.0)*x2890*x2892*x2893))+((x2892*x2896))+((x2888*x2889))+((r12*x2891))+((x2894*x2895))+(((-1.0)*r10*x2888*x2890)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2898.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2897.value)))+(x2898.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x2899=IKsin(j12);
IkReal x2900=IKcos(j12);
IkReal x2901=(cj15*sj14);
IkReal x2902=((1.0)*sj11);
IkReal x2903=((1.0)*sj14);
IkReal x2904=(r11*sj15);
IkReal x2905=((1.0)*cj14);
IkReal x2906=(cj15*r20);
IkReal x2907=(sj13*sj15);
IkReal x2908=(r01*sj15);
IkReal x2909=(r21*sj15);
IkReal x2910=(cj13*cj14);
IkReal x2911=((0.4)*sj11);
IkReal x2912=(cj15*r10);
IkReal x2913=((0.4)*cj11);
IkReal x2914=(cj15*sj13);
IkReal x2915=((1.93e-6)*sj11);
IkReal x2916=(cj15*r00);
IkReal x2917=(sj10*x2899);
IkReal x2918=(cj11*x2900);
IkReal x2919=(cj10*x2899);
IkReal x2920=(cj10*x2900);
IkReal x2921=(sj10*x2900);
evalcond[0]=((((-1.0)*x2903*x2909))+(((-1.0)*x2899*x2902))+((r20*x2901))+x2918+(((-1.0)*r22*x2905)));
evalcond[1]=((((-1.0)*r02*x2905))+((cj11*x2919))+((r00*x2901))+((sj11*x2920))+(((-1.0)*x2903*x2908)));
evalcond[2]=(((r10*x2901))+((cj11*x2917))+((sj11*x2921))+(((-1.0)*x2903*x2904))+(((-1.0)*r12*x2905)));
evalcond[3]=((((-1.0)*x2899*x2911))+(((-9.9e-7)*x2909))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((9.9e-7)*x2906))+((x2900*x2913))+(((-1.0)*x2911)));
evalcond[4]=((((-1.0)*cj10*x2915))+(((-9.9e-7)*x2908))+(((-1.0)*px))+((x2913*x2919))+(((9.9e-7)*x2916))+((x2911*x2920))+((cj10*x2913)));
evalcond[5]=((((-9.9e-7)*x2904))+((sj10*x2913))+(((-1.0)*py))+((x2913*x2917))+(((-1.0)*sj10*x2915))+(((9.9e-7)*x2912))+((x2911*x2921)));
evalcond[6]=((((-1.0)*x2900*x2902))+((x2909*x2910))+(((-1.0)*cj11*x2899))+(((-1.0)*cj13*x2905*x2906))+((r21*x2914))+((r20*x2907))+(((-1.0)*cj13*r22*x2903)));
evalcond[7]=((((-1.0)*cj13*x2905*x2916))+((r01*x2914))+((r00*x2907))+(((-1.0)*cj13*r02*x2903))+(((-1.0)*x2902*x2919))+((x2908*x2910))+((cj10*x2918)));
evalcond[8]=(((r11*x2914))+((r10*x2907))+(((-1.0)*cj13*x2905*x2912))+((sj10*x2918))+((x2904*x2910))+(((-1.0)*cj13*r12*x2903))+(((-1.0)*x2902*x2917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2922=(cj10*cj11);
IkReal x2923=(cj14*r22);
IkReal x2924=(sj14*sj15);
IkReal x2925=(cj14*r02);
IkReal x2926=(cj10*sj11);
IkReal x2927=((1.0)*cj15*sj14);
CheckValue<IkReal> x2928 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*r00*x2927))+((cj15*r20*sj14*x2926))+(((-1.0)*x2923*x2926))+((cj11*r01*x2924))+((cj11*x2925))+(((-1.0)*r21*x2924*x2926)))),IkReal(((((-1.0)*r00*sj11*x2927))+((r21*x2922*x2924))+(((-1.0)*r20*x2922*x2927))+((sj11*x2925))+((x2922*x2923))+((r01*sj11*x2924)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2928.valid){
continue;
}
CheckValue<IkReal> x2929=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x2929.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x2928.value)+(((1.5707963267949)*(x2929.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x2930=IKsin(j12);
IkReal x2931=IKcos(j12);
IkReal x2932=(cj15*sj14);
IkReal x2933=((1.0)*sj11);
IkReal x2934=((1.0)*sj14);
IkReal x2935=(r11*sj15);
IkReal x2936=((1.0)*cj14);
IkReal x2937=(cj15*r20);
IkReal x2938=(sj13*sj15);
IkReal x2939=(r01*sj15);
IkReal x2940=(r21*sj15);
IkReal x2941=(cj13*cj14);
IkReal x2942=((0.4)*sj11);
IkReal x2943=(cj15*r10);
IkReal x2944=((0.4)*cj11);
IkReal x2945=(cj15*sj13);
IkReal x2946=((1.93e-6)*sj11);
IkReal x2947=(cj15*r00);
IkReal x2948=(sj10*x2930);
IkReal x2949=(cj11*x2931);
IkReal x2950=(cj10*x2930);
IkReal x2951=(cj10*x2931);
IkReal x2952=(sj10*x2931);
evalcond[0]=((((-1.0)*x2930*x2933))+(((-1.0)*x2934*x2940))+((r20*x2932))+(((-1.0)*r22*x2936))+x2949);
evalcond[1]=(((sj11*x2951))+((r00*x2932))+((cj11*x2950))+(((-1.0)*x2934*x2939))+(((-1.0)*r02*x2936)));
evalcond[2]=(((r10*x2932))+((sj11*x2952))+((cj11*x2948))+(((-1.0)*r12*x2936))+(((-1.0)*x2934*x2935)));
evalcond[3]=((((-9.9e-7)*x2940))+(((-1.0)*pz))+(((-1.0)*x2942))+(((-1.93e-6)*cj11))+(((9.9e-7)*x2937))+((x2931*x2944))+(((-1.0)*x2930*x2942)));
evalcond[4]=((((-1.0)*cj10*x2946))+(((-9.9e-7)*x2939))+((x2942*x2951))+((cj10*x2944))+(((-1.0)*px))+((x2944*x2950))+(((9.9e-7)*x2947)));
evalcond[5]=((((-9.9e-7)*x2935))+(((-1.0)*sj10*x2946))+((x2942*x2952))+(((-1.0)*py))+(((9.9e-7)*x2943))+((x2944*x2948))+((sj10*x2944)));
evalcond[6]=(((r21*x2945))+(((-1.0)*x2931*x2933))+((x2940*x2941))+(((-1.0)*cj13*x2936*x2937))+((r20*x2938))+(((-1.0)*cj13*r22*x2934))+(((-1.0)*cj11*x2930)));
evalcond[7]=(((x2939*x2941))+((r00*x2938))+((cj10*x2949))+((r01*x2945))+(((-1.0)*cj13*r02*x2934))+(((-1.0)*cj13*x2936*x2947))+(((-1.0)*x2933*x2950)));
evalcond[8]=(((x2935*x2941))+((r10*x2938))+((r11*x2945))+(((-1.0)*cj13*r12*x2934))+((sj10*x2949))+(((-1.0)*cj13*x2936*x2943))+(((-1.0)*x2933*x2948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x2953=(cj10*cj15);
IkReal x2954=((1.0)*cj10*sj15);
CheckValue<IkReal> x2955 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x2954))+(((-1.0)*r21*x2953)))),IkReal((((cj14*r20*x2953))+(((-1.0)*cj14*r21*x2954))+((cj10*r22*sj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2955.valid){
continue;
}
CheckValue<IkReal> x2956=IKPowWithIntegerCheck(IKsign((((cj15*r00*sj14))+(((-1.0)*cj14*r02))+(((-1.0)*r01*sj14*sj15)))),-1);
if(!x2956.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x2955.value)+(((1.5707963267949)*(x2956.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[3];
IkReal x2957=IKsin(j13);
IkReal x2958=IKcos(j13);
IkReal x2959=((1.0)*r20);
IkReal x2960=((1.0)*cj15);
IkReal x2961=(cj14*x2957);
IkReal x2962=(sj15*x2958);
IkReal x2963=((1.0)*sj14*x2957);
evalcond[0]=((((-1.0)*r21*x2958*x2960))+(((-1.0)*x2959*x2962))+((r21*sj15*x2961))+(((-1.0)*r22*x2963))+(((-1.0)*cj15*x2959*x2961)));
evalcond[1]=(((r11*sj15*x2961))+cj10+(((-1.0)*r10*x2960*x2961))+(((-1.0)*r11*x2958*x2960))+(((-1.0)*r10*x2962))+(((-1.0)*r12*x2963)));
evalcond[2]=((((-1.0)*r00*x2960*x2961))+(((-1.0)*r02*x2963))+(((-1.0)*r00*x2962))+(((-1.0)*sj10))+((r01*sj15*x2961))+(((-1.0)*r01*x2958*x2960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[2];
IkReal x2964=sj10*sj10;
j11eval[0]=x2964;
j11eval[1]=IKsign(x2964);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x2965=cj10*cj10;
j11eval[0]=x2965;
j11eval[1]=IKsign(x2965);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
j11eval[0]=sj10;
j11eval[1]=IKsign(sj10);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2966=(cj15*r20);
IkReal x2967=((0.999999999976719)*sj14);
IkReal x2968=(cj15*r00);
IkReal x2969=(r21*sj15);
IkReal x2970=(cj14*r22);
IkReal x2971=((4.82499999988767e-6)*sj14);
IkReal x2972=(r01*sj15);
IkReal x2973=(cj14*r02);
if( IKabs(((((-1.1941874999722e-11)*x2972))+((x2971*x2972))+(((0.999999999976719)*x2970))+(((-1.0)*x2968*x2971))+(((-1.20624999997192e-5)*px))+(((-1.0)*x2966*x2967))+(((2.47499999994238e-6)*x2966))+(((1.1941874999722e-11)*x2968))+(((-2.47499999994238e-6)*x2969))+(((-2.4999999999418)*pz))+((x2967*x2969))+(((4.82499999988767e-6)*x2973)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.4999999999418)*px))+(((-0.999999999976719)*x2973))+((x2969*x2971))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x2972))+(((-1.0)*x2967*x2972))+(((1.1941874999722e-11)*x2966))+(((-2.47499999994238e-6)*x2968))+(((-1.1941874999722e-11)*x2969))+((x2967*x2968))+(((-1.0)*x2966*x2971))+(((4.82499999988767e-6)*x2970)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.1941874999722e-11)*x2972))+((x2971*x2972))+(((0.999999999976719)*x2970))+(((-1.0)*x2968*x2971))+(((-1.20624999997192e-5)*px))+(((-1.0)*x2966*x2967))+(((2.47499999994238e-6)*x2966))+(((1.1941874999722e-11)*x2968))+(((-2.47499999994238e-6)*x2969))+(((-2.4999999999418)*pz))+((x2967*x2969))+(((4.82499999988767e-6)*x2973))))+IKsqr(((((2.4999999999418)*px))+(((-0.999999999976719)*x2973))+((x2969*x2971))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x2972))+(((-1.0)*x2967*x2972))+(((1.1941874999722e-11)*x2966))+(((-2.47499999994238e-6)*x2968))+(((-1.1941874999722e-11)*x2969))+((x2967*x2968))+(((-1.0)*x2966*x2971))+(((4.82499999988767e-6)*x2970))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.1941874999722e-11)*x2972))+((x2971*x2972))+(((0.999999999976719)*x2970))+(((-1.0)*x2968*x2971))+(((-1.20624999997192e-5)*px))+(((-1.0)*x2966*x2967))+(((2.47499999994238e-6)*x2966))+(((1.1941874999722e-11)*x2968))+(((-2.47499999994238e-6)*x2969))+(((-2.4999999999418)*pz))+((x2967*x2969))+(((4.82499999988767e-6)*x2973))), ((((2.4999999999418)*px))+(((-0.999999999976719)*x2973))+((x2969*x2971))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x2972))+(((-1.0)*x2967*x2972))+(((1.1941874999722e-11)*x2966))+(((-2.47499999994238e-6)*x2968))+(((-1.1941874999722e-11)*x2969))+((x2967*x2968))+(((-1.0)*x2966*x2971))+(((4.82499999988767e-6)*x2970))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x2974=IKsin(j11);
IkReal x2975=IKcos(j11);
IkReal x2976=((0.4)*sj14);
IkReal x2977=(cj15*r20);
IkReal x2978=(r01*sj15);
IkReal x2979=((0.4)*sj13);
IkReal x2980=(r21*sj15);
IkReal x2981=((0.4)*cj14);
IkReal x2982=(cj15*r00);
IkReal x2983=((9.9e-7)*x2978);
IkReal x2984=((1.93e-6)*x2974);
IkReal x2985=((9.9e-7)*x2982);
IkReal x2986=((0.4)*x2975);
IkReal x2987=((0.4)*x2974);
IkReal x2988=((1.93e-6)*x2975);
IkReal x2989=((9.9e-7)*x2980);
IkReal x2990=((9.9e-7)*x2977);
IkReal x2991=(x2986+x2985);
IkReal x2992=(px+x2983+x2984);
IkReal x2993=(x2989+x2988+x2987);
evalcond[0]=((((-1.0)*x2991))+((x2976*x2982))+(((-1.0)*x2976*x2978))+(((-1.0)*r02*x2981))+x2992);
evalcond[1]=((((-1.0)*x2993))+((x2976*x2980))+(((-1.0)*x2976*x2977))+(((-1.0)*pz))+((r22*x2981))+x2990);
evalcond[2]=((((-1.0)*x2991))+(((-1.0)*cj13*x2980*x2981))+((cj13*r22*x2976))+((cj13*x2977*x2981))+(((-1.0)*r20*sj15*x2979))+(((-1.0)*cj15*r21*x2979))+x2992);
evalcond[3]=((((-1.0)*x2990))+(((-1.0)*cj13*r02*x2976))+(((-1.0)*cj13*x2981*x2982))+pz+((r00*sj15*x2979))+((cj15*r01*x2979))+x2993+((cj13*x2978*x2981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2994=(cj15*r00);
IkReal x2995=(cj14*r22);
IkReal x2996=(r21*sj15);
IkReal x2997=(cj11*sj14);
IkReal x2998=(sj11*sj14);
IkReal x2999=(cj15*r20);
IkReal x3000=(r01*sj15);
IkReal x3001=(cj14*r02);
IkReal x3002=((1.0)*x2998);
if( IKabs(((((-1.0)*x2994*x2997))+((cj11*x3001))+(((-1.0)*x2996*x3002))+((x2998*x2999))+((x2997*x3000))+(((-1.0)*sj11*x2995)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj11*x3001))+((x2996*x2997))+((cj11*x2995))+((x2998*x3000))+(((-1.0)*x2997*x2999))+(((-1.0)*x2994*x3002)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2994*x2997))+((cj11*x3001))+(((-1.0)*x2996*x3002))+((x2998*x2999))+((x2997*x3000))+(((-1.0)*sj11*x2995))))+IKsqr((((sj11*x3001))+((x2996*x2997))+((cj11*x2995))+((x2998*x3000))+(((-1.0)*x2997*x2999))+(((-1.0)*x2994*x3002))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*x2994*x2997))+((cj11*x3001))+(((-1.0)*x2996*x3002))+((x2998*x2999))+((x2997*x3000))+(((-1.0)*sj11*x2995))), (((sj11*x3001))+((x2996*x2997))+((cj11*x2995))+((x2998*x3000))+(((-1.0)*x2997*x2999))+(((-1.0)*x2994*x3002))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x3003=IKcos(j12);
IkReal x3004=IKsin(j12);
IkReal x3005=(cj13*cj14);
IkReal x3006=(r01*sj15);
IkReal x3007=((0.4)*cj11);
IkReal x3008=(cj15*r20);
IkReal x3009=((1.0)*r22);
IkReal x3010=(sj13*sj15);
IkReal x3011=(cj15*r00);
IkReal x3012=(cj13*sj14);
IkReal x3013=((1.0)*r02);
IkReal x3014=((1.0)*sj14);
IkReal x3015=(cj15*sj13);
IkReal x3016=(r21*sj15);
IkReal x3017=(cj11*x3003);
IkReal x3018=(sj11*x3003);
IkReal x3019=(sj11*x3004);
IkReal x3020=(cj11*x3004);
IkReal x3021=((1.0)*x3019);
evalcond[0]=((((-1.0)*cj14*x3013))+x3018+x3020+(((-1.0)*x3006*x3014))+((sj14*x3011)));
evalcond[1]=(((sj14*x3008))+(((-1.0)*cj14*x3009))+x3017+(((-1.0)*x3021))+(((-1.0)*x3014*x3016)));
evalcond[2]=((((-9.9e-7)*x3016))+((x3003*x3007))+(((-0.4)*x3019))+(((-1.0)*pz))+(((9.9e-7)*x3008))+(((-0.4)*sj11))+(((-1.93e-6)*cj11)));
evalcond[3]=((((-9.9e-7)*x3006))+x3007+(((-1.93e-6)*sj11))+(((0.4)*x3018))+(((-1.0)*px))+(((9.9e-7)*x3011))+((x3004*x3007)));
evalcond[4]=(((r00*x3010))+((r01*x3015))+x3017+(((-1.0)*x3021))+((x3005*x3006))+(((-1.0)*x3005*x3011))+(((-1.0)*x3012*x3013)));
evalcond[5]=((((-1.0)*x3020))+((r20*x3010))+(((-1.0)*x3005*x3008))+((x3005*x3016))+((r21*x3015))+(((-1.0)*x3018))+(((-1.0)*x3009*x3012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3022=(cj15*r20);
IkReal x3023=((0.999999999976719)*sj14);
IkReal x3024=(cj15*r00);
IkReal x3025=(r21*sj15);
IkReal x3026=(cj14*r22);
IkReal x3027=((4.82499999988767e-6)*sj14);
IkReal x3028=(r01*sj15);
IkReal x3029=(cj14*r02);
if( IKabs(((((-2.47499999994238e-6)*x3025))+(((-1.0)*x3027*x3028))+(((0.999999999976719)*x3026))+(((1.20624999997192e-5)*px))+(((-1.1941874999722e-11)*x3024))+(((-4.82499999988767e-6)*x3029))+(((-1.0)*x3022*x3023))+((x3024*x3027))+((x3023*x3025))+(((2.47499999994238e-6)*x3022))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x3028)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.47499999994238e-6)*x3028))+(((0.999999999976719)*x3029))+(((-1.20624999997192e-5)*pz))+(((-1.1941874999722e-11)*x3025))+((x3025*x3027))+(((-1.0)*x3023*x3024))+(((-1.0)*x3022*x3027))+((x3023*x3028))+(((2.47499999994238e-6)*x3024))+(((-2.4999999999418)*px))+(((4.82499999988767e-6)*x3026))+(((1.1941874999722e-11)*x3022)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.47499999994238e-6)*x3025))+(((-1.0)*x3027*x3028))+(((0.999999999976719)*x3026))+(((1.20624999997192e-5)*px))+(((-1.1941874999722e-11)*x3024))+(((-4.82499999988767e-6)*x3029))+(((-1.0)*x3022*x3023))+((x3024*x3027))+((x3023*x3025))+(((2.47499999994238e-6)*x3022))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x3028))))+IKsqr(((((-2.47499999994238e-6)*x3028))+(((0.999999999976719)*x3029))+(((-1.20624999997192e-5)*pz))+(((-1.1941874999722e-11)*x3025))+((x3025*x3027))+(((-1.0)*x3023*x3024))+(((-1.0)*x3022*x3027))+((x3023*x3028))+(((2.47499999994238e-6)*x3024))+(((-2.4999999999418)*px))+(((4.82499999988767e-6)*x3026))+(((1.1941874999722e-11)*x3022))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-2.47499999994238e-6)*x3025))+(((-1.0)*x3027*x3028))+(((0.999999999976719)*x3026))+(((1.20624999997192e-5)*px))+(((-1.1941874999722e-11)*x3024))+(((-4.82499999988767e-6)*x3029))+(((-1.0)*x3022*x3023))+((x3024*x3027))+((x3023*x3025))+(((2.47499999994238e-6)*x3022))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x3028))), ((((-2.47499999994238e-6)*x3028))+(((0.999999999976719)*x3029))+(((-1.20624999997192e-5)*pz))+(((-1.1941874999722e-11)*x3025))+((x3025*x3027))+(((-1.0)*x3023*x3024))+(((-1.0)*x3022*x3027))+((x3023*x3028))+(((2.47499999994238e-6)*x3024))+(((-2.4999999999418)*px))+(((4.82499999988767e-6)*x3026))+(((1.1941874999722e-11)*x3022))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x3030=IKsin(j11);
IkReal x3031=IKcos(j11);
IkReal x3032=((1.0)*pz);
IkReal x3033=((0.4)*sj14);
IkReal x3034=(cj15*r20);
IkReal x3035=(r01*sj15);
IkReal x3036=((0.4)*cj14);
IkReal x3037=(r21*sj15);
IkReal x3038=(cj15*r00);
IkReal x3039=((9.9e-7)*x3035);
IkReal x3040=((0.4)*x3031);
IkReal x3041=((9.9e-7)*x3038);
IkReal x3042=((1.93e-6)*x3030);
IkReal x3043=((9.9e-7)*x3034);
IkReal x3044=((0.4)*x3030);
IkReal x3045=((1.93e-6)*x3031);
IkReal x3046=((9.9e-7)*x3037);
IkReal x3047=((0.4)*cj15*sj13);
IkReal x3048=((0.4)*sj13*sj15);
IkReal x3049=(x3041+x3042);
IkReal x3050=(x3040+x3039);
IkReal x3051=(x3045+x3044+x3046+x3032);
evalcond[0]=(((r02*x3036))+x3049+(((-1.0)*px))+(((-1.0)*x3033*x3038))+((x3033*x3035))+(((-1.0)*x3050)));
evalcond[1]=(x3043+((r22*x3036))+(((-1.0)*x3033*x3034))+((x3033*x3037))+(((-1.0)*x3051)));
evalcond[2]=(((r21*x3047))+x3050+((cj13*x3036*x3037))+(((-1.0)*x3049))+((r20*x3048))+px+(((-1.0)*cj13*r22*x3033))+(((-1.0)*cj13*x3034*x3036)));
evalcond[3]=((((-1.0)*cj13*x3036*x3038))+x3043+((cj13*x3035*x3036))+(((-1.0)*cj13*r02*x3033))+(((-1.0)*x3051))+((r00*x3048))+((r01*x3047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3052=(sj11*sj14);
IkReal x3053=(r21*sj15);
IkReal x3054=(cj15*r20);
IkReal x3055=(cj11*sj14);
IkReal x3056=(cj15*r00);
IkReal x3057=((1.0)*cj14);
IkReal x3058=((1.0)*r01*sj14*sj15);
if( IKabs((((x3052*x3054))+(((-1.0)*r01*sj15*x3055))+(((-1.0)*cj11*r02*x3057))+(((-1.0)*x3052*x3053))+((x3055*x3056))+(((-1.0)*r22*sj11*x3057)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*cj14*r22))+(((-1.0)*r02*sj11*x3057))+((x3052*x3056))+(((-1.0)*r01*sj15*x3052))+((x3053*x3055))+(((-1.0)*x3054*x3055)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3052*x3054))+(((-1.0)*r01*sj15*x3055))+(((-1.0)*cj11*r02*x3057))+(((-1.0)*x3052*x3053))+((x3055*x3056))+(((-1.0)*r22*sj11*x3057))))+IKsqr((((cj11*cj14*r22))+(((-1.0)*r02*sj11*x3057))+((x3052*x3056))+(((-1.0)*r01*sj15*x3052))+((x3053*x3055))+(((-1.0)*x3054*x3055))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((x3052*x3054))+(((-1.0)*r01*sj15*x3055))+(((-1.0)*cj11*r02*x3057))+(((-1.0)*x3052*x3053))+((x3055*x3056))+(((-1.0)*r22*sj11*x3057))), (((cj11*cj14*r22))+(((-1.0)*r02*sj11*x3057))+((x3052*x3056))+(((-1.0)*r01*sj15*x3052))+((x3053*x3055))+(((-1.0)*x3054*x3055))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x3059=IKsin(j12);
IkReal x3060=IKcos(j12);
IkReal x3061=(cj13*cj14);
IkReal x3062=(r01*sj15);
IkReal x3063=((0.4)*cj11);
IkReal x3064=(cj15*r20);
IkReal x3065=((1.0)*r22);
IkReal x3066=((0.4)*sj11);
IkReal x3067=(sj13*sj15);
IkReal x3068=(cj15*r00);
IkReal x3069=(cj13*sj14);
IkReal x3070=((1.0)*sj14);
IkReal x3071=(r21*sj15);
IkReal x3072=((1.0)*r02);
IkReal x3073=(cj15*sj13);
IkReal x3074=(sj11*x3059);
IkReal x3075=(cj11*x3060);
IkReal x3076=((1.0)*cj11*x3059);
IkReal x3077=((1.0)*sj11*x3060);
IkReal x3078=(x3076+x3077);
evalcond[0]=((((-1.0)*x3074))+((sj14*x3064))+x3075+(((-1.0)*cj14*x3065))+(((-1.0)*x3070*x3071)));
evalcond[1]=(((sj14*x3068))+(((-1.0)*cj14*x3072))+(((-1.0)*x3062*x3070))+(((-1.0)*x3078)));
evalcond[2]=((((-9.9e-7)*x3071))+(((9.9e-7)*x3064))+(((-1.0)*x3066))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+((x3060*x3063))+(((-1.0)*x3059*x3066)));
evalcond[3]=((((-1.0)*x3060*x3066))+(((-9.9e-7)*x3062))+(((1.93e-6)*sj11))+(((9.9e-7)*x3068))+(((-1.0)*x3063))+(((-1.0)*px))+(((-1.0)*x3059*x3063)));
evalcond[4]=((((-1.0)*x3075))+((r01*x3073))+x3074+((r00*x3067))+(((-1.0)*x3061*x3068))+(((-1.0)*x3069*x3072))+((x3061*x3062)));
evalcond[5]=((((-1.0)*x3061*x3064))+(((-1.0)*x3078))+((r20*x3067))+((x3061*x3071))+(((-1.0)*x3065*x3069))+((r21*x3073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3079=(cj14*r12);
IkReal x3080=(cj15*r20);
IkReal x3081=((0.999999999976719)*sj14);
IkReal x3082=(r21*sj15);
IkReal x3083=(cj15*r10);
IkReal x3084=((4.82499999988767e-6)*sj14);
IkReal x3085=(cj14*r22);
IkReal x3086=(r11*sj15);
if( IKabs(((((-1.0)*x3080*x3081))+((x3081*x3082))+(((-2.47499999994238e-6)*x3082))+(((0.999999999976719)*x3085))+(((-1.0)*x3083*x3084))+(((-1.1941874999722e-11)*x3086))+(((-1.20624999997192e-5)*py))+(((4.82499999988767e-6)*x3079))+(((2.47499999994238e-6)*x3080))+((x3084*x3086))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x3083)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((4.82499999988767e-6)*x3085))+(((-1.0)*x3080*x3084))+((x3081*x3083))+(((-2.47499999994238e-6)*x3083))+(((2.4999999999418)*py))+((x3082*x3084))+(((-1.1941874999722e-11)*x3082))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x3086))+(((1.1941874999722e-11)*x3080))+(((-0.999999999976719)*x3079))+(((-1.0)*x3081*x3086)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3080*x3081))+((x3081*x3082))+(((-2.47499999994238e-6)*x3082))+(((0.999999999976719)*x3085))+(((-1.0)*x3083*x3084))+(((-1.1941874999722e-11)*x3086))+(((-1.20624999997192e-5)*py))+(((4.82499999988767e-6)*x3079))+(((2.47499999994238e-6)*x3080))+((x3084*x3086))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x3083))))+IKsqr(((((4.82499999988767e-6)*x3085))+(((-1.0)*x3080*x3084))+((x3081*x3083))+(((-2.47499999994238e-6)*x3083))+(((2.4999999999418)*py))+((x3082*x3084))+(((-1.1941874999722e-11)*x3082))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x3086))+(((1.1941874999722e-11)*x3080))+(((-0.999999999976719)*x3079))+(((-1.0)*x3081*x3086))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*x3080*x3081))+((x3081*x3082))+(((-2.47499999994238e-6)*x3082))+(((0.999999999976719)*x3085))+(((-1.0)*x3083*x3084))+(((-1.1941874999722e-11)*x3086))+(((-1.20624999997192e-5)*py))+(((4.82499999988767e-6)*x3079))+(((2.47499999994238e-6)*x3080))+((x3084*x3086))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x3083))), ((((4.82499999988767e-6)*x3085))+(((-1.0)*x3080*x3084))+((x3081*x3083))+(((-2.47499999994238e-6)*x3083))+(((2.4999999999418)*py))+((x3082*x3084))+(((-1.1941874999722e-11)*x3082))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x3086))+(((1.1941874999722e-11)*x3080))+(((-0.999999999976719)*x3079))+(((-1.0)*x3081*x3086))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x3087=IKsin(j11);
IkReal x3088=IKcos(j11);
IkReal x3089=((0.4)*sj13);
IkReal x3090=((0.4)*sj14);
IkReal x3091=(cj15*r20);
IkReal x3092=((0.4)*cj14);
IkReal x3093=(r21*sj15);
IkReal x3094=(cj15*r10);
IkReal x3095=(r11*sj15);
IkReal x3096=((9.9e-7)*x3095);
IkReal x3097=((1.93e-6)*x3087);
IkReal x3098=((9.9e-7)*x3094);
IkReal x3099=((0.4)*x3088);
IkReal x3100=((0.4)*x3087);
IkReal x3101=((1.93e-6)*x3088);
IkReal x3102=((9.9e-7)*x3093);
IkReal x3103=((9.9e-7)*x3091);
IkReal x3104=(x3098+x3099);
IkReal x3105=(x3096+x3097+py);
IkReal x3106=(x3100+x3101+x3102);
evalcond[0]=(x3105+(((-1.0)*r12*x3092))+(((-1.0)*x3104))+((x3090*x3094))+(((-1.0)*x3090*x3095)));
evalcond[1]=(x3103+(((-1.0)*x3106))+(((-1.0)*pz))+((x3090*x3093))+(((-1.0)*x3090*x3091))+((r22*x3092)));
evalcond[2]=(x3105+((cj13*r22*x3090))+(((-1.0)*x3104))+((cj13*x3091*x3092))+(((-1.0)*cj13*x3092*x3093))+(((-1.0)*r20*sj15*x3089))+(((-1.0)*cj15*r21*x3089)));
evalcond[3]=(((r10*sj15*x3089))+x3106+(((-1.0)*x3103))+((cj15*r11*x3089))+(((-1.0)*cj13*r12*x3090))+pz+(((-1.0)*cj13*x3092*x3094))+((cj13*x3092*x3095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3107=(sj11*sj14);
IkReal x3108=(r11*sj15);
IkReal x3109=((1.0)*cj15);
IkReal x3110=(cj14*r12);
IkReal x3111=(cj11*sj14);
IkReal x3112=(r21*sj15);
IkReal x3113=(cj14*r22);
if( IKabs(((((-1.0)*r10*x3109*x3111))+((cj15*r20*x3107))+((x3108*x3111))+(((-1.0)*x3107*x3112))+((cj11*x3110))+(((-1.0)*sj11*x3113)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj11*x3110))+((x3107*x3108))+((x3111*x3112))+(((-1.0)*r10*x3107*x3109))+(((-1.0)*r20*x3109*x3111))+((cj11*x3113)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x3109*x3111))+((cj15*r20*x3107))+((x3108*x3111))+(((-1.0)*x3107*x3112))+((cj11*x3110))+(((-1.0)*sj11*x3113))))+IKsqr((((sj11*x3110))+((x3107*x3108))+((x3111*x3112))+(((-1.0)*r10*x3107*x3109))+(((-1.0)*r20*x3109*x3111))+((cj11*x3113))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r10*x3109*x3111))+((cj15*r20*x3107))+((x3108*x3111))+(((-1.0)*x3107*x3112))+((cj11*x3110))+(((-1.0)*sj11*x3113))), (((sj11*x3110))+((x3107*x3108))+((x3111*x3112))+(((-1.0)*r10*x3107*x3109))+(((-1.0)*r20*x3109*x3111))+((cj11*x3113))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x3114=IKcos(j12);
IkReal x3115=IKsin(j12);
IkReal x3116=(cj15*r10);
IkReal x3117=((0.4)*cj11);
IkReal x3118=((1.0)*sj14);
IkReal x3119=(r11*sj15);
IkReal x3120=((1.0)*cj14);
IkReal x3121=(cj15*r20);
IkReal x3122=(cj13*cj14);
IkReal x3123=(sj13*sj15);
IkReal x3124=(cj15*sj13);
IkReal x3125=(r21*sj15);
IkReal x3126=(cj11*x3114);
IkReal x3127=(sj11*x3114);
IkReal x3128=(sj11*x3115);
IkReal x3129=(cj11*x3115);
IkReal x3130=((1.0)*x3128);
evalcond[0]=(x3129+x3127+((sj14*x3116))+(((-1.0)*x3118*x3119))+(((-1.0)*r12*x3120)));
evalcond[1]=(x3126+((sj14*x3121))+(((-1.0)*r22*x3120))+(((-1.0)*x3118*x3125))+(((-1.0)*x3130)));
evalcond[2]=((((9.9e-7)*x3121))+(((-0.4)*x3128))+(((-9.9e-7)*x3125))+((x3114*x3117))+(((-1.0)*pz))+(((-0.4)*sj11))+(((-1.93e-6)*cj11)));
evalcond[3]=((((9.9e-7)*x3116))+x3117+(((-1.93e-6)*sj11))+(((0.4)*x3127))+(((-1.0)*py))+((x3115*x3117))+(((-9.9e-7)*x3119)));
evalcond[4]=(x3126+(((-1.0)*cj13*x3116*x3120))+((x3119*x3122))+(((-1.0)*cj13*r12*x3118))+((r10*x3123))+((r11*x3124))+(((-1.0)*x3130)));
evalcond[5]=((((-1.0)*cj13*r22*x3118))+((r20*x3123))+(((-1.0)*x3129))+(((-1.0)*x3127))+((r21*x3124))+((x3122*x3125))+(((-1.0)*cj13*x3120*x3121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3131=(cj14*r12);
IkReal x3132=(cj15*r20);
IkReal x3133=((0.999999999976719)*sj14);
IkReal x3134=(r21*sj15);
IkReal x3135=(cj15*r10);
IkReal x3136=((4.82499999988767e-6)*sj14);
IkReal x3137=(cj14*r22);
IkReal x3138=(r11*sj15);
if( IKabs(((((-1.1941874999722e-11)*x3135))+(((0.999999999976719)*x3137))+(((-4.82499999988767e-6)*x3131))+((x3133*x3134))+(((-1.0)*x3132*x3133))+(((-1.0)*x3136*x3138))+(((1.20624999997192e-5)*py))+(((-2.47499999994238e-6)*x3134))+((x3135*x3136))+(((2.47499999994238e-6)*x3132))+(((1.1941874999722e-11)*x3138))+(((-2.4999999999418)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.1941874999722e-11)*x3134))+(((0.999999999976719)*x3131))+((x3133*x3138))+(((-1.0)*x3132*x3136))+(((-1.0)*x3133*x3135))+((x3134*x3136))+(((-1.20624999997192e-5)*pz))+(((4.82499999988767e-6)*x3137))+(((-2.47499999994238e-6)*x3138))+(((2.47499999994238e-6)*x3135))+(((1.1941874999722e-11)*x3132))+(((-2.4999999999418)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.1941874999722e-11)*x3135))+(((0.999999999976719)*x3137))+(((-4.82499999988767e-6)*x3131))+((x3133*x3134))+(((-1.0)*x3132*x3133))+(((-1.0)*x3136*x3138))+(((1.20624999997192e-5)*py))+(((-2.47499999994238e-6)*x3134))+((x3135*x3136))+(((2.47499999994238e-6)*x3132))+(((1.1941874999722e-11)*x3138))+(((-2.4999999999418)*pz))))+IKsqr(((((-1.1941874999722e-11)*x3134))+(((0.999999999976719)*x3131))+((x3133*x3138))+(((-1.0)*x3132*x3136))+(((-1.0)*x3133*x3135))+((x3134*x3136))+(((-1.20624999997192e-5)*pz))+(((4.82499999988767e-6)*x3137))+(((-2.47499999994238e-6)*x3138))+(((2.47499999994238e-6)*x3135))+(((1.1941874999722e-11)*x3132))+(((-2.4999999999418)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.1941874999722e-11)*x3135))+(((0.999999999976719)*x3137))+(((-4.82499999988767e-6)*x3131))+((x3133*x3134))+(((-1.0)*x3132*x3133))+(((-1.0)*x3136*x3138))+(((1.20624999997192e-5)*py))+(((-2.47499999994238e-6)*x3134))+((x3135*x3136))+(((2.47499999994238e-6)*x3132))+(((1.1941874999722e-11)*x3138))+(((-2.4999999999418)*pz))), ((((-1.1941874999722e-11)*x3134))+(((0.999999999976719)*x3131))+((x3133*x3138))+(((-1.0)*x3132*x3136))+(((-1.0)*x3133*x3135))+((x3134*x3136))+(((-1.20624999997192e-5)*pz))+(((4.82499999988767e-6)*x3137))+(((-2.47499999994238e-6)*x3138))+(((2.47499999994238e-6)*x3135))+(((1.1941874999722e-11)*x3132))+(((-2.4999999999418)*py))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x3139=IKsin(j11);
IkReal x3140=IKcos(j11);
IkReal x3141=((1.0)*pz);
IkReal x3142=((0.4)*sj14);
IkReal x3143=(cj15*r20);
IkReal x3144=((0.4)*cj14);
IkReal x3145=(r21*sj15);
IkReal x3146=(cj15*r10);
IkReal x3147=(r11*sj15);
IkReal x3148=((9.9e-7)*x3147);
IkReal x3149=((0.4)*x3140);
IkReal x3150=((9.9e-7)*x3146);
IkReal x3151=((1.93e-6)*x3139);
IkReal x3152=((9.9e-7)*x3143);
IkReal x3153=((0.4)*x3139);
IkReal x3154=((1.93e-6)*x3140);
IkReal x3155=((9.9e-7)*x3145);
IkReal x3156=((0.4)*sj13*sj15);
IkReal x3157=((0.4)*cj15*sj13);
IkReal x3158=(x3151+x3150);
IkReal x3159=(x3148+x3149);
IkReal x3160=(x3141+x3153+x3155+x3154);
evalcond[0]=((((-1.0)*x3159))+x3158+((x3142*x3147))+(((-1.0)*x3142*x3146))+((r12*x3144))+(((-1.0)*py)));
evalcond[1]=(x3152+((x3142*x3145))+(((-1.0)*x3142*x3143))+((r22*x3144))+(((-1.0)*x3160)));
evalcond[2]=((((-1.0)*x3158))+x3159+(((-1.0)*cj13*x3143*x3144))+((r20*x3156))+py+((cj13*x3144*x3145))+(((-1.0)*cj13*r22*x3142))+((r21*x3157)));
evalcond[3]=(x3152+((r10*x3156))+((r11*x3157))+(((-1.0)*cj13*x3144*x3146))+((cj13*x3144*x3147))+(((-1.0)*cj13*r12*x3142))+(((-1.0)*x3160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3161=((1.0)*cj11);
IkReal x3162=(sj14*sj15);
IkReal x3163=(cj14*r12);
IkReal x3164=((1.0)*sj11);
IkReal x3165=(cj14*r22);
IkReal x3166=(cj15*r20*sj14);
IkReal x3167=(cj15*r10*sj14);
if( IKabs(((((-1.0)*r11*x3161*x3162))+(((-1.0)*x3161*x3163))+((sj11*x3166))+(((-1.0)*x3164*x3165))+(((-1.0)*r21*x3162*x3164))+((cj11*x3167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3161*x3166))+(((-1.0)*x3163*x3164))+((sj11*x3167))+(((-1.0)*r11*x3162*x3164))+((cj11*r21*x3162))+((cj11*x3165)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x3161*x3162))+(((-1.0)*x3161*x3163))+((sj11*x3166))+(((-1.0)*x3164*x3165))+(((-1.0)*r21*x3162*x3164))+((cj11*x3167))))+IKsqr(((((-1.0)*x3161*x3166))+(((-1.0)*x3163*x3164))+((sj11*x3167))+(((-1.0)*r11*x3162*x3164))+((cj11*r21*x3162))+((cj11*x3165))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r11*x3161*x3162))+(((-1.0)*x3161*x3163))+((sj11*x3166))+(((-1.0)*x3164*x3165))+(((-1.0)*r21*x3162*x3164))+((cj11*x3167))), ((((-1.0)*x3161*x3166))+(((-1.0)*x3163*x3164))+((sj11*x3167))+(((-1.0)*r11*x3162*x3164))+((cj11*r21*x3162))+((cj11*x3165))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x3168=IKsin(j12);
IkReal x3169=IKcos(j12);
IkReal x3170=(cj15*r10);
IkReal x3171=((0.4)*cj11);
IkReal x3172=((1.0)*sj14);
IkReal x3173=(r11*sj15);
IkReal x3174=((1.0)*cj14);
IkReal x3175=((0.4)*sj11);
IkReal x3176=(cj15*r20);
IkReal x3177=(cj13*cj14);
IkReal x3178=(r21*sj15);
IkReal x3179=(sj13*sj15);
IkReal x3180=(cj15*sj13);
IkReal x3181=(sj11*x3168);
IkReal x3182=(cj11*x3169);
IkReal x3183=((1.0)*cj11*x3168);
IkReal x3184=((1.0)*sj11*x3169);
IkReal x3185=(x3184+x3183);
evalcond[0]=(((sj14*x3176))+x3182+(((-1.0)*x3172*x3178))+(((-1.0)*x3181))+(((-1.0)*r22*x3174)));
evalcond[1]=(((sj14*x3170))+(((-1.0)*r12*x3174))+(((-1.0)*x3172*x3173))+(((-1.0)*x3185)));
evalcond[2]=((((-9.9e-7)*x3178))+(((9.9e-7)*x3176))+(((-1.0)*x3175))+(((-1.0)*pz))+(((-1.0)*x3168*x3175))+(((-1.93e-6)*cj11))+((x3169*x3171)));
evalcond[3]=((((-1.0)*x3169*x3175))+(((-9.9e-7)*x3173))+(((9.9e-7)*x3170))+(((1.93e-6)*sj11))+(((-1.0)*x3171))+(((-1.0)*py))+(((-1.0)*x3168*x3171)));
evalcond[4]=(x3181+((r10*x3179))+(((-1.0)*cj13*r12*x3172))+(((-1.0)*cj13*x3170*x3174))+((x3173*x3177))+((r11*x3180))+(((-1.0)*x3182)));
evalcond[5]=(((x3177*x3178))+(((-1.0)*cj13*r22*x3172))+(((-1.0)*cj13*x3174*x3176))+((r20*x3179))+(((-1.0)*x3185))+((r21*x3180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11, j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3186=(r21*sj10);
IkReal x3187=(cj15*sj13);
IkReal x3188=((0.4)*sj14);
IkReal x3189=(cj15*r20);
IkReal x3190=(r21*sj15);
IkReal x3191=(cj15*r10);
IkReal x3192=(r22*sj14);
IkReal x3193=(r11*sj15);
IkReal x3194=(cj13*cj14*sj15);
IkReal x3195=((1.6e+15)*cj13*sj10);
IkReal x3196=((7720000000.0)*cj13*sj10);
IkReal x3197=(r20*sj10*sj13*sj15);
IkReal x3198=((((0.4)*cj14*r22))+(((-1.0)*x3188*x3189))+(((-1.0)*pz))+(((-9.9e-7)*x3190))+((x3188*x3190))+(((9.9e-7)*x3189)));
IkReal x3199=(sj10*x3198);
CheckValue<IkReal> x3200=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x3200.valid){
continue;
}
CheckValue<IkReal> x3201 = IKatan2WithCheck(IkReal(((((19107.0)*x3191))+(((7720000000.0)*x3186*x3194))+(((4.0e+15)*x3199))+(((-19107.0)*x3193))+(((7720000000.0)*x3197))+(((7720000000.0)*x3186*x3187))+(((-1.0)*cj14*x3189*x3196))+(((-1.0)*x3192*x3196))+(((-19300000000.0)*py)))),IkReal((((cj14*x3189*x3195))+(((-1.6e+15)*x3186*x3194))+(((19300000000.0)*x3199))+(((-1.6e+15)*x3197))+(((4.0e+15)*py))+((x3192*x3195))+(((-3960000000.0)*x3191))+(((-1.6e+15)*x3186*x3187))+(((3960000000.0)*x3193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3201.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3200.value)))+(x3201.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x3202=IKsin(j11);
IkReal x3203=sj10*sj10;
IkReal x3204=IKcos(j11);
IkReal x3205=cj10*cj10;
IkReal x3206=(cj10*sj15);
IkReal x3207=((9.9e-7)*r11);
IkReal x3208=(cj15*r20);
IkReal x3209=((0.4)*sj14);
IkReal x3210=(cj15*r00);
IkReal x3211=((0.4)*cj10);
IkReal x3212=(cj15*sj13);
IkReal x3213=(cj13*r22);
IkReal x3214=((0.4)*r11);
IkReal x3215=(cj10*sj10);
IkReal x3216=(r21*sj15);
IkReal x3217=((0.4)*r01);
IkReal x3218=((0.4)*cj14);
IkReal x3219=((9.9e-7)*cj10);
IkReal x3220=(cj13*cj14);
IkReal x3221=((0.4)*sj10);
IkReal x3222=(sj10*sj15);
IkReal x3223=(cj15*r10);
IkReal x3224=((0.4)*sj13*sj15);
IkReal x3225=(sj10*x3218);
IkReal x3226=((9.9e-7)*cj15*sj10);
IkReal x3227=((0.4)*x3204);
IkReal x3228=((9.9e-7)*r01*sj15);
IkReal x3229=((1.93e-6)*x3202);
IkReal x3230=((1.93e-6)*x3204);
IkReal x3231=(x3215*x3229);
IkReal x3232=(sj10*x3204*x3211);
evalcond[0]=((((-0.4)*x3202))+(((-9.9e-7)*x3216))+((r22*x3218))+((x3209*x3216))+(((-1.0)*pz))+(((-1.0)*x3230))+(((-1.0)*x3208*x3209))+(((9.9e-7)*x3208)));
evalcond[1]=(((x3207*x3222))+(((-1.0)*x3203*x3227))+((py*sj10))+((x3203*x3229))+((sj10*x3209*x3223))+(((-9.9e-7)*sj10*x3223))+(((-1.0)*r12*x3225))+(((-1.0)*r11*x3209*x3222)));
evalcond[2]=(((cj10*px))+(((-1.0)*cj14*r02*x3211))+(((-1.0)*r01*x3206*x3209))+(((-1.0)*x3205*x3227))+(((-1.0)*x3210*x3219))+((x3205*x3229))+(((9.9e-7)*r01*x3206))+((cj10*x3209*x3210)));
evalcond[3]=(((x3212*x3214))+((r10*x3224))+((sj10*x3230))+(((-1.0)*cj13*x3218*x3223))+(((-9.9e-7)*sj10*x3208))+((pz*sj10))+(((-1.0)*cj13*r12*x3209))+(((9.9e-7)*sj10*x3216))+((sj15*x3214*x3220))+((x3202*x3221)));
evalcond[4]=(((x3212*x3217))+((cj10*pz))+((x3202*x3211))+((cj10*x3230))+((r00*x3224))+(((9.9e-7)*r21*x3206))+(((-1.0)*x3208*x3219))+((sj15*x3217*x3220))+(((-1.0)*cj13*r02*x3209))+(((-1.0)*cj13*x3210*x3218)));
evalcond[5]=(((sj10*x3209*x3213))+((cj13*x3208*x3225))+(((-1.0)*cj13*x3216*x3225))+((sj10*x3229))+((sj15*x3207))+(((-1.0)*r21*x3212*x3221))+(((-9.9e-7)*x3223))+(((-1.0)*x3204*x3221))+py+(((-1.0)*r20*sj13*sj15*x3221)));
evalcond[6]=((((-1.0)*r21*x3211*x3212))+(((-0.4)*r20*sj13*x3206))+(((-1.0)*x3204*x3211))+(((-9.9e-7)*x3210))+x3228+(((-1.0)*cj13*r21*x3206*x3218))+((cj10*x3229))+px+((x3208*x3211*x3220))+((cj10*x3209*x3213)));
evalcond[7]=((((9.9e-7)*r01*x3222))+(((-9.9e-7)*sj10*x3210))+((px*sj10))+x3231+(((-1.0)*cj14*r12*x3211))+((cj10*x3209*x3223))+(((-1.0)*x3232))+(((-1.0)*r11*x3206*x3209)));
evalcond[8]=(((sj10*x3209*x3210))+((cj10*py))+(((-1.0)*r02*x3225))+((x3206*x3207))+x3231+(((-1.0)*r01*x3209*x3222))+(((-1.0)*x3232))+(((-1.0)*x3219*x3223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[2];
j12eval[0]=cj10;
j12eval[1]=IKsign(cj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
j12eval[0]=sj10;
j12eval[1]=IKsign(sj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3233=(cj15*r00);
IkReal x3234=(cj14*r22);
IkReal x3235=(r21*sj15);
IkReal x3236=(cj11*sj14);
IkReal x3237=(sj11*sj14);
IkReal x3238=(cj15*r20);
IkReal x3239=(r01*sj15);
IkReal x3240=(cj14*r02);
IkReal x3241=((1.0)*x3237);
if( IKabs(((((-1.0)*x3233*x3236))+(((-1.0)*x3235*x3241))+((x3237*x3238))+((x3236*x3239))+((cj11*x3240))+(((-1.0)*sj11*x3234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3235*x3236))+((x3237*x3239))+((cj11*x3234))+((sj11*x3240))+(((-1.0)*x3236*x3238))+(((-1.0)*x3233*x3241)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3233*x3236))+(((-1.0)*x3235*x3241))+((x3237*x3238))+((x3236*x3239))+((cj11*x3240))+(((-1.0)*sj11*x3234))))+IKsqr((((x3235*x3236))+((x3237*x3239))+((cj11*x3234))+((sj11*x3240))+(((-1.0)*x3236*x3238))+(((-1.0)*x3233*x3241))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*x3233*x3236))+(((-1.0)*x3235*x3241))+((x3237*x3238))+((x3236*x3239))+((cj11*x3240))+(((-1.0)*sj11*x3234))), (((x3235*x3236))+((x3237*x3239))+((cj11*x3234))+((sj11*x3240))+(((-1.0)*x3236*x3238))+(((-1.0)*x3233*x3241))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x3242=IKcos(j12);
IkReal x3243=IKsin(j12);
IkReal x3244=(cj13*cj14);
IkReal x3245=(r01*sj15);
IkReal x3246=((0.4)*cj11);
IkReal x3247=(cj15*r20);
IkReal x3248=((1.0)*r22);
IkReal x3249=(sj13*sj15);
IkReal x3250=(cj15*r00);
IkReal x3251=(cj13*sj14);
IkReal x3252=((1.0)*r02);
IkReal x3253=((1.0)*sj14);
IkReal x3254=(cj15*sj13);
IkReal x3255=(r21*sj15);
IkReal x3256=(cj11*x3242);
IkReal x3257=(sj11*x3242);
IkReal x3258=(sj11*x3243);
IkReal x3259=(cj11*x3243);
IkReal x3260=((1.0)*x3258);
evalcond[0]=((((-1.0)*x3245*x3253))+x3259+x3257+(((-1.0)*cj14*x3252))+((sj14*x3250)));
evalcond[1]=((((-1.0)*cj14*x3248))+x3256+(((-1.0)*x3253*x3255))+(((-1.0)*x3260))+((sj14*x3247)));
evalcond[2]=((((9.9e-7)*x3247))+(((-0.4)*x3258))+(((-1.0)*pz))+(((-9.9e-7)*x3255))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+((x3242*x3246)));
evalcond[3]=((((-9.9e-7)*x3245))+(((0.4)*x3257))+(((-1.93e-6)*sj11))+x3246+(((-1.0)*px))+(((9.9e-7)*x3250))+((x3243*x3246)));
evalcond[4]=(((r00*x3249))+x3256+(((-1.0)*x3260))+((r01*x3254))+(((-1.0)*x3251*x3252))+((x3244*x3245))+(((-1.0)*x3244*x3250)));
evalcond[5]=((((-1.0)*x3244*x3247))+((x3244*x3255))+((r20*x3249))+((r21*x3254))+(((-1.0)*x3248*x3251))+(((-1.0)*x3259))+(((-1.0)*x3257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3261=(sj11*sj14);
IkReal x3262=(r21*sj15);
IkReal x3263=(cj15*r20);
IkReal x3264=(cj11*sj14);
IkReal x3265=(cj15*r00);
IkReal x3266=((1.0)*cj14);
IkReal x3267=((1.0)*r01*sj14*sj15);
if( IKabs(((((-1.0)*r01*sj15*x3264))+(((-1.0)*r22*sj11*x3266))+(((-1.0)*cj11*r02*x3266))+(((-1.0)*x3261*x3262))+((x3261*x3263))+((x3264*x3265)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3262*x3264))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x3266))+(((-1.0)*r01*sj15*x3261))+(((-1.0)*x3263*x3264))+((x3261*x3265)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj15*x3264))+(((-1.0)*r22*sj11*x3266))+(((-1.0)*cj11*r02*x3266))+(((-1.0)*x3261*x3262))+((x3261*x3263))+((x3264*x3265))))+IKsqr((((x3262*x3264))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x3266))+(((-1.0)*r01*sj15*x3261))+(((-1.0)*x3263*x3264))+((x3261*x3265))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r01*sj15*x3264))+(((-1.0)*r22*sj11*x3266))+(((-1.0)*cj11*r02*x3266))+(((-1.0)*x3261*x3262))+((x3261*x3263))+((x3264*x3265))), (((x3262*x3264))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x3266))+(((-1.0)*r01*sj15*x3261))+(((-1.0)*x3263*x3264))+((x3261*x3265))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x3268=IKsin(j12);
IkReal x3269=IKcos(j12);
IkReal x3270=(cj13*cj14);
IkReal x3271=(r01*sj15);
IkReal x3272=((0.4)*cj11);
IkReal x3273=(cj15*r20);
IkReal x3274=((1.0)*r22);
IkReal x3275=((0.4)*sj11);
IkReal x3276=(sj13*sj15);
IkReal x3277=(cj15*r00);
IkReal x3278=(cj13*sj14);
IkReal x3279=((1.0)*sj14);
IkReal x3280=(r21*sj15);
IkReal x3281=((1.0)*r02);
IkReal x3282=(cj15*sj13);
IkReal x3283=(sj11*x3268);
IkReal x3284=(cj11*x3269);
IkReal x3285=((1.0)*cj11*x3268);
IkReal x3286=((1.0)*sj11*x3269);
IkReal x3287=(x3286+x3285);
evalcond[0]=((((-1.0)*x3279*x3280))+x3284+(((-1.0)*cj14*x3274))+((sj14*x3273))+(((-1.0)*x3283)));
evalcond[1]=((((-1.0)*x3287))+((sj14*x3277))+(((-1.0)*x3271*x3279))+(((-1.0)*cj14*x3281)));
evalcond[2]=((((-1.0)*x3268*x3275))+(((-1.0)*x3275))+(((-1.0)*pz))+(((-9.9e-7)*x3280))+(((-1.93e-6)*cj11))+((x3269*x3272))+(((9.9e-7)*x3273)));
evalcond[3]=((((-9.9e-7)*x3271))+(((-1.0)*x3268*x3272))+(((1.93e-6)*sj11))+(((-1.0)*x3272))+(((-1.0)*px))+(((-1.0)*x3269*x3275))+(((9.9e-7)*x3277)));
evalcond[4]=(((r00*x3276))+x3283+(((-1.0)*x3284))+(((-1.0)*x3278*x3281))+((x3270*x3271))+((r01*x3282))+(((-1.0)*x3270*x3277)));
evalcond[5]=((((-1.0)*x3287))+((r20*x3276))+((x3270*x3280))+(((-1.0)*x3274*x3278))+((r21*x3282))+(((-1.0)*x3270*x3273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3288=(sj11*sj14);
IkReal x3289=(r11*sj15);
IkReal x3290=((1.0)*cj15);
IkReal x3291=(cj14*r12);
IkReal x3292=(cj11*sj14);
IkReal x3293=(r21*sj15);
IkReal x3294=(cj14*r22);
if( IKabs(((((-1.0)*sj11*x3294))+(((-1.0)*r10*x3290*x3292))+((x3289*x3292))+((cj15*r20*x3288))+(((-1.0)*x3288*x3293))+((cj11*x3291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x3288*x3290))+((x3288*x3289))+((x3292*x3293))+(((-1.0)*r20*x3290*x3292))+((sj11*x3291))+((cj11*x3294)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj11*x3294))+(((-1.0)*r10*x3290*x3292))+((x3289*x3292))+((cj15*r20*x3288))+(((-1.0)*x3288*x3293))+((cj11*x3291))))+IKsqr(((((-1.0)*r10*x3288*x3290))+((x3288*x3289))+((x3292*x3293))+(((-1.0)*r20*x3290*x3292))+((sj11*x3291))+((cj11*x3294))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*sj11*x3294))+(((-1.0)*r10*x3290*x3292))+((x3289*x3292))+((cj15*r20*x3288))+(((-1.0)*x3288*x3293))+((cj11*x3291))), ((((-1.0)*r10*x3288*x3290))+((x3288*x3289))+((x3292*x3293))+(((-1.0)*r20*x3290*x3292))+((sj11*x3291))+((cj11*x3294))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x3295=IKcos(j12);
IkReal x3296=IKsin(j12);
IkReal x3297=(cj15*r10);
IkReal x3298=((0.4)*cj11);
IkReal x3299=((1.0)*sj14);
IkReal x3300=(r11*sj15);
IkReal x3301=((1.0)*cj14);
IkReal x3302=(cj15*r20);
IkReal x3303=(cj13*cj14);
IkReal x3304=(sj13*sj15);
IkReal x3305=(cj15*sj13);
IkReal x3306=(r21*sj15);
IkReal x3307=(cj11*x3295);
IkReal x3308=(sj11*x3295);
IkReal x3309=(sj11*x3296);
IkReal x3310=(cj11*x3296);
IkReal x3311=((1.0)*x3309);
evalcond[0]=(x3308+x3310+(((-1.0)*r12*x3301))+((sj14*x3297))+(((-1.0)*x3299*x3300)));
evalcond[1]=(x3307+((sj14*x3302))+(((-1.0)*x3311))+(((-1.0)*r22*x3301))+(((-1.0)*x3299*x3306)));
evalcond[2]=((((9.9e-7)*x3302))+(((-0.4)*x3309))+((x3295*x3298))+(((-1.0)*pz))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+(((-9.9e-7)*x3306)));
evalcond[3]=((((0.4)*x3308))+(((-1.93e-6)*sj11))+x3298+((x3296*x3298))+(((9.9e-7)*x3297))+(((-1.0)*py))+(((-9.9e-7)*x3300)));
evalcond[4]=(((x3300*x3303))+(((-1.0)*cj13*x3297*x3301))+x3307+(((-1.0)*cj13*r12*x3299))+((r10*x3304))+(((-1.0)*x3311))+((r11*x3305)));
evalcond[5]=((((-1.0)*cj13*r22*x3299))+((x3303*x3306))+(((-1.0)*cj13*x3301*x3302))+((r21*x3305))+(((-1.0)*x3308))+(((-1.0)*x3310))+((r20*x3304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3312=((1.0)*cj11);
IkReal x3313=(sj14*sj15);
IkReal x3314=(cj14*r12);
IkReal x3315=((1.0)*sj11);
IkReal x3316=(cj14*r22);
IkReal x3317=(cj15*r20*sj14);
IkReal x3318=(cj15*r10*sj14);
if( IKabs(((((-1.0)*r21*x3313*x3315))+(((-1.0)*r11*x3312*x3313))+((sj11*x3317))+(((-1.0)*x3312*x3314))+(((-1.0)*x3315*x3316))+((cj11*x3318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x3313*x3315))+((sj11*x3318))+(((-1.0)*x3314*x3315))+(((-1.0)*x3312*x3317))+((cj11*x3316))+((cj11*r21*x3313)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x3313*x3315))+(((-1.0)*r11*x3312*x3313))+((sj11*x3317))+(((-1.0)*x3312*x3314))+(((-1.0)*x3315*x3316))+((cj11*x3318))))+IKsqr(((((-1.0)*r11*x3313*x3315))+((sj11*x3318))+(((-1.0)*x3314*x3315))+(((-1.0)*x3312*x3317))+((cj11*x3316))+((cj11*r21*x3313))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r21*x3313*x3315))+(((-1.0)*r11*x3312*x3313))+((sj11*x3317))+(((-1.0)*x3312*x3314))+(((-1.0)*x3315*x3316))+((cj11*x3318))), ((((-1.0)*r11*x3313*x3315))+((sj11*x3318))+(((-1.0)*x3314*x3315))+(((-1.0)*x3312*x3317))+((cj11*x3316))+((cj11*r21*x3313))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x3319=IKsin(j12);
IkReal x3320=IKcos(j12);
IkReal x3321=(cj15*r10);
IkReal x3322=((0.4)*cj11);
IkReal x3323=((1.0)*sj14);
IkReal x3324=(r11*sj15);
IkReal x3325=((1.0)*cj14);
IkReal x3326=((0.4)*sj11);
IkReal x3327=(cj15*r20);
IkReal x3328=(cj13*cj14);
IkReal x3329=(r21*sj15);
IkReal x3330=(sj13*sj15);
IkReal x3331=(cj15*sj13);
IkReal x3332=(sj11*x3319);
IkReal x3333=(cj11*x3320);
IkReal x3334=((1.0)*cj11*x3319);
IkReal x3335=((1.0)*sj11*x3320);
IkReal x3336=(x3335+x3334);
evalcond[0]=(x3333+(((-1.0)*x3332))+((sj14*x3327))+(((-1.0)*x3323*x3329))+(((-1.0)*r22*x3325)));
evalcond[1]=((((-1.0)*x3336))+((sj14*x3321))+(((-1.0)*x3323*x3324))+(((-1.0)*r12*x3325)));
evalcond[2]=((((-1.0)*x3326))+(((-9.9e-7)*x3329))+(((-1.0)*x3319*x3326))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+((x3320*x3322))+(((9.9e-7)*x3327)));
evalcond[3]=((((-1.0)*x3322))+(((1.93e-6)*sj11))+(((-9.9e-7)*x3324))+(((-1.0)*x3319*x3322))+(((-1.0)*py))+(((-1.0)*x3320*x3326))+(((9.9e-7)*x3321)));
evalcond[4]=(x3332+((r10*x3330))+((x3324*x3328))+(((-1.0)*cj13*x3321*x3325))+(((-1.0)*cj13*r12*x3323))+(((-1.0)*x3333))+((r11*x3331)));
evalcond[5]=(((r21*x3331))+((x3328*x3329))+(((-1.0)*x3336))+(((-1.0)*cj13*r22*x3323))+((r20*x3330))+(((-1.0)*cj13*x3325*x3327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3337=(sj11*sj14);
IkReal x3338=(r11*sj15);
IkReal x3339=((1.0)*cj15);
IkReal x3340=(cj14*sj11);
IkReal x3341=(cj11*sj14);
IkReal x3342=(r20*sj10);
IkReal x3343=(r22*sj10);
IkReal x3344=(cj11*cj14);
IkReal x3345=(r21*sj10*sj15);
CheckValue<IkReal> x3346=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x3346.valid){
continue;
}
CheckValue<IkReal> x3347 = IKatan2WithCheck(IkReal((((cj15*x3337*x3342))+((x3338*x3341))+(((-1.0)*x3340*x3343))+(((-1.0)*x3337*x3345))+((r12*x3344))+(((-1.0)*r10*x3339*x3341)))),IkReal((((x3343*x3344))+((x3341*x3345))+(((-1.0)*r10*x3337*x3339))+(((-1.0)*x3339*x3341*x3342))+((x3337*x3338))+((r12*x3340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3347.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3346.value)))+(x3347.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x3348=IKsin(j12);
IkReal x3349=IKcos(j12);
IkReal x3350=(cj15*sj14);
IkReal x3351=((1.0)*sj11);
IkReal x3352=((1.0)*sj14);
IkReal x3353=(r11*sj15);
IkReal x3354=((1.0)*cj14);
IkReal x3355=(cj15*r20);
IkReal x3356=(sj13*sj15);
IkReal x3357=(r01*sj15);
IkReal x3358=(r21*sj15);
IkReal x3359=(cj13*cj14);
IkReal x3360=((0.4)*sj11);
IkReal x3361=(cj15*r10);
IkReal x3362=((0.4)*cj11);
IkReal x3363=(cj15*sj13);
IkReal x3364=((1.93e-6)*sj11);
IkReal x3365=(cj15*r00);
IkReal x3366=(sj10*x3348);
IkReal x3367=(cj11*x3349);
IkReal x3368=(cj10*x3348);
IkReal x3369=(cj10*x3349);
IkReal x3370=(sj10*x3349);
evalcond[0]=((((-1.0)*x3352*x3358))+(((-1.0)*x3348*x3351))+x3367+((r20*x3350))+(((-1.0)*r22*x3354)));
evalcond[1]=((((-1.0)*x3352*x3357))+((r00*x3350))+(((-1.0)*r02*x3354))+((sj11*x3369))+((cj11*x3368)));
evalcond[2]=((((-1.0)*x3352*x3353))+((sj11*x3370))+(((-1.0)*r12*x3354))+((r10*x3350))+((cj11*x3366)));
evalcond[3]=(((x3349*x3362))+(((-1.0)*x3360))+(((-9.9e-7)*x3358))+(((-1.0)*x3348*x3360))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((9.9e-7)*x3355)));
evalcond[4]=(((x3362*x3368))+((cj10*x3362))+(((-9.9e-7)*x3357))+((x3360*x3369))+(((-1.0)*px))+(((9.9e-7)*x3365))+(((-1.0)*cj10*x3364)));
evalcond[5]=(((x3362*x3366))+(((-1.0)*sj10*x3364))+((x3360*x3370))+(((-9.9e-7)*x3353))+(((-1.0)*py))+((sj10*x3362))+(((9.9e-7)*x3361)));
evalcond[6]=((((-1.0)*x3349*x3351))+((r21*x3363))+(((-1.0)*cj11*x3348))+(((-1.0)*cj13*x3354*x3355))+((r20*x3356))+((x3358*x3359))+(((-1.0)*cj13*r22*x3352)));
evalcond[7]=((((-1.0)*cj13*x3354*x3365))+((cj10*x3367))+((r00*x3356))+((r01*x3363))+(((-1.0)*cj13*r02*x3352))+((x3357*x3359))+(((-1.0)*x3351*x3368)));
evalcond[8]=((((-1.0)*cj13*x3354*x3361))+((sj10*x3367))+(((-1.0)*cj13*r12*x3352))+((r10*x3356))+(((-1.0)*x3351*x3366))+((x3353*x3359))+((r11*x3363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3371=(cj10*cj11);
IkReal x3372=(cj14*r22);
IkReal x3373=(sj14*sj15);
IkReal x3374=(cj14*r02);
IkReal x3375=(cj10*sj11);
IkReal x3376=((1.0)*cj15*sj14);
CheckValue<IkReal> x3377 = IKatan2WithCheck(IkReal((((cj11*x3374))+((cj11*r01*x3373))+(((-1.0)*cj11*r00*x3376))+(((-1.0)*r21*x3373*x3375))+(((-1.0)*x3372*x3375))+((cj15*r20*sj14*x3375)))),IkReal(((((-1.0)*r00*sj11*x3376))+((sj11*x3374))+((x3371*x3372))+((r01*sj11*x3373))+(((-1.0)*r20*x3371*x3376))+((r21*x3371*x3373)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3377.valid){
continue;
}
CheckValue<IkReal> x3378=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x3378.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x3377.value)+(((1.5707963267949)*(x3378.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x3379=IKsin(j12);
IkReal x3380=IKcos(j12);
IkReal x3381=(cj15*sj14);
IkReal x3382=((1.0)*sj11);
IkReal x3383=((1.0)*sj14);
IkReal x3384=(r11*sj15);
IkReal x3385=((1.0)*cj14);
IkReal x3386=(cj15*r20);
IkReal x3387=(sj13*sj15);
IkReal x3388=(r01*sj15);
IkReal x3389=(r21*sj15);
IkReal x3390=(cj13*cj14);
IkReal x3391=((0.4)*sj11);
IkReal x3392=(cj15*r10);
IkReal x3393=((0.4)*cj11);
IkReal x3394=(cj15*sj13);
IkReal x3395=((1.93e-6)*sj11);
IkReal x3396=(cj15*r00);
IkReal x3397=(sj10*x3379);
IkReal x3398=(cj11*x3380);
IkReal x3399=(cj10*x3379);
IkReal x3400=(cj10*x3380);
IkReal x3401=(sj10*x3380);
evalcond[0]=((((-1.0)*r22*x3385))+x3398+((r20*x3381))+(((-1.0)*x3383*x3389))+(((-1.0)*x3379*x3382)));
evalcond[1]=((((-1.0)*x3383*x3388))+((sj11*x3400))+(((-1.0)*r02*x3385))+((cj11*x3399))+((r00*x3381)));
evalcond[2]=((((-1.0)*x3383*x3384))+((r10*x3381))+((sj11*x3401))+(((-1.0)*r12*x3385))+((cj11*x3397)));
evalcond[3]=(((x3380*x3393))+(((-1.0)*x3379*x3391))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((-1.0)*x3391))+(((9.9e-7)*x3386))+(((-9.9e-7)*x3389)));
evalcond[4]=(((x3391*x3400))+((x3393*x3399))+(((-1.0)*px))+(((9.9e-7)*x3396))+((cj10*x3393))+(((-1.0)*cj10*x3395))+(((-9.9e-7)*x3388)));
evalcond[5]=(((x3391*x3401))+(((-1.0)*sj10*x3395))+((x3393*x3397))+(((-1.0)*py))+(((9.9e-7)*x3392))+((sj10*x3393))+(((-9.9e-7)*x3384)));
evalcond[6]=(((r20*x3387))+(((-1.0)*cj11*x3379))+(((-1.0)*cj13*x3385*x3386))+(((-1.0)*x3380*x3382))+((x3389*x3390))+((r21*x3394))+(((-1.0)*cj13*r22*x3383)));
evalcond[7]=(((r01*x3394))+(((-1.0)*cj13*r02*x3383))+(((-1.0)*cj13*x3385*x3396))+((x3388*x3390))+((cj10*x3398))+((r00*x3387))+(((-1.0)*x3382*x3399)));
evalcond[8]=(((r10*x3387))+(((-1.0)*cj13*x3385*x3392))+((x3384*x3390))+((r11*x3394))+(((-1.0)*cj13*r12*x3383))+((sj10*x3398))+(((-1.0)*x3382*x3397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3402=cj10*cj10;
IkReal x3403=((0.00019107)*cj10);
IkReal x3404=(r01*sj15);
IkReal x3405=((0.4)*sj14);
IkReal x3406=(r21*sj15);
IkReal x3407=(cj15*r00);
IkReal x3408=(cj10*sj14);
IkReal x3409=(cj15*r20);
IkReal x3410=(cj10*px);
IkReal x3411=(cj10*cj14*r02);
IkReal x3412=((((-9.9e-7)*x3406))+(((9.9e-7)*x3409))+(((-1.0)*x3405*x3409))+(((0.4)*cj14*r22))+(((-1.0)*pz))+((x3405*x3406)));
IkReal x3413=(x3402*x3412);
CheckValue<IkReal> x3414=IKPowWithIntegerCheck(IKsign(x3402),-1);
if(!x3414.valid){
continue;
}
CheckValue<IkReal> x3415 = IKatan2WithCheck(IkReal(((((-77.2)*x3404*x3408))+((x3403*x3404))+(((-77.2)*x3411))+(((77.2)*x3407*x3408))+(((193.0)*x3410))+(((-1.0)*x3403*x3407))+(((-40000000.0)*x3413)))),IkReal(((((-39.6)*cj10*x3404))+(((16000000.0)*x3411))+(((16000000.0)*x3404*x3408))+(((39.6)*cj10*x3407))+(((-193.0)*x3413))+(((-16000000.0)*x3407*x3408))+(((-40000000.0)*x3410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3415.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x3414.value)))+(x3415.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x3416=IKsin(j11);
IkReal x3417=sj10*sj10;
IkReal x3418=IKcos(j11);
IkReal x3419=cj10*cj10;
IkReal x3420=(cj10*sj15);
IkReal x3421=((9.9e-7)*r11);
IkReal x3422=(cj15*r20);
IkReal x3423=((0.4)*sj14);
IkReal x3424=(cj15*r00);
IkReal x3425=((0.4)*cj10);
IkReal x3426=(cj15*sj13);
IkReal x3427=(cj13*r22);
IkReal x3428=((0.4)*r11);
IkReal x3429=(cj10*sj10);
IkReal x3430=(r21*sj15);
IkReal x3431=((0.4)*r01);
IkReal x3432=((0.4)*cj14);
IkReal x3433=((9.9e-7)*cj10);
IkReal x3434=(cj13*cj14);
IkReal x3435=((0.4)*sj10);
IkReal x3436=(sj10*sj15);
IkReal x3437=(cj15*r10);
IkReal x3438=((0.4)*sj13*sj15);
IkReal x3439=(sj10*x3432);
IkReal x3440=((9.9e-7)*cj15*sj10);
IkReal x3441=((0.4)*x3418);
IkReal x3442=((9.9e-7)*r01*sj15);
IkReal x3443=((1.93e-6)*x3416);
IkReal x3444=((1.93e-6)*x3418);
IkReal x3445=(x3429*x3443);
IkReal x3446=(sj10*x3418*x3425);
evalcond[0]=((((-0.4)*x3416))+(((-1.0)*pz))+(((-9.9e-7)*x3430))+(((-1.0)*x3422*x3423))+((r22*x3432))+(((9.9e-7)*x3422))+(((-1.0)*x3444))+((x3423*x3430)));
evalcond[1]=((((-1.0)*r12*x3439))+(((-1.0)*r11*x3423*x3436))+(((-9.9e-7)*sj10*x3437))+((sj10*x3423*x3437))+((py*sj10))+((x3421*x3436))+(((-1.0)*x3417*x3441))+((x3417*x3443)));
evalcond[2]=(((cj10*px))+(((-1.0)*x3419*x3441))+((x3419*x3443))+(((-1.0)*x3424*x3433))+(((-1.0)*r01*x3420*x3423))+(((-1.0)*cj14*r02*x3425))+((cj10*x3423*x3424))+(((9.9e-7)*r01*x3420)));
evalcond[3]=(((sj15*x3428*x3434))+((r10*x3438))+(((-9.9e-7)*sj10*x3422))+(((-1.0)*cj13*r12*x3423))+((pz*sj10))+((x3426*x3428))+(((-1.0)*cj13*x3432*x3437))+(((9.9e-7)*sj10*x3430))+((sj10*x3444))+((x3416*x3435)));
evalcond[4]=(((cj10*x3444))+((cj10*pz))+(((-1.0)*cj13*x3424*x3432))+(((-1.0)*cj13*r02*x3423))+(((9.9e-7)*r21*x3420))+((sj15*x3431*x3434))+(((-1.0)*x3422*x3433))+((x3426*x3431))+((x3416*x3425))+((r00*x3438)));
evalcond[5]=((((-1.0)*r20*sj13*sj15*x3435))+((sj10*x3423*x3427))+(((-1.0)*cj13*x3430*x3439))+(((-1.0)*r21*x3426*x3435))+(((-1.0)*x3418*x3435))+py+(((-9.9e-7)*x3437))+((cj13*x3422*x3439))+((sj15*x3421))+((sj10*x3443)));
evalcond[6]=(((cj10*x3443))+(((-1.0)*cj13*r21*x3420*x3432))+x3442+(((-9.9e-7)*x3424))+px+(((-1.0)*r21*x3425*x3426))+(((-1.0)*x3418*x3425))+((cj10*x3423*x3427))+(((-0.4)*r20*sj13*x3420))+((x3422*x3425*x3434)));
evalcond[7]=((((-9.9e-7)*sj10*x3424))+(((-1.0)*cj14*r12*x3425))+((px*sj10))+(((-1.0)*r11*x3420*x3423))+x3445+((cj10*x3423*x3437))+(((9.9e-7)*r01*x3436))+(((-1.0)*x3446)));
evalcond[8]=(((cj10*py))+((sj10*x3423*x3424))+((x3420*x3421))+(((-1.0)*x3433*x3437))+x3445+(((-1.0)*r01*x3423*x3436))+(((-1.0)*x3446))+(((-1.0)*r02*x3439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[2];
j12eval[0]=cj10;
j12eval[1]=IKsign(cj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
j12eval[0]=sj10;
j12eval[1]=IKsign(sj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3447=(cj15*r00);
IkReal x3448=(cj14*r22);
IkReal x3449=(r21*sj15);
IkReal x3450=(cj11*sj14);
IkReal x3451=(sj11*sj14);
IkReal x3452=(cj15*r20);
IkReal x3453=(r01*sj15);
IkReal x3454=(cj14*r02);
IkReal x3455=((1.0)*x3451);
if( IKabs((((cj11*x3454))+(((-1.0)*sj11*x3448))+(((-1.0)*x3447*x3450))+(((-1.0)*x3449*x3455))+((x3451*x3452))+((x3450*x3453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3447*x3455))+((sj11*x3454))+((cj11*x3448))+(((-1.0)*x3450*x3452))+((x3449*x3450))+((x3451*x3453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj11*x3454))+(((-1.0)*sj11*x3448))+(((-1.0)*x3447*x3450))+(((-1.0)*x3449*x3455))+((x3451*x3452))+((x3450*x3453))))+IKsqr(((((-1.0)*x3447*x3455))+((sj11*x3454))+((cj11*x3448))+(((-1.0)*x3450*x3452))+((x3449*x3450))+((x3451*x3453))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((cj11*x3454))+(((-1.0)*sj11*x3448))+(((-1.0)*x3447*x3450))+(((-1.0)*x3449*x3455))+((x3451*x3452))+((x3450*x3453))), ((((-1.0)*x3447*x3455))+((sj11*x3454))+((cj11*x3448))+(((-1.0)*x3450*x3452))+((x3449*x3450))+((x3451*x3453))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x3456=IKcos(j12);
IkReal x3457=IKsin(j12);
IkReal x3458=(cj13*cj14);
IkReal x3459=(r01*sj15);
IkReal x3460=((0.4)*cj11);
IkReal x3461=(cj15*r20);
IkReal x3462=((1.0)*r22);
IkReal x3463=(sj13*sj15);
IkReal x3464=(cj15*r00);
IkReal x3465=(cj13*sj14);
IkReal x3466=((1.0)*r02);
IkReal x3467=((1.0)*sj14);
IkReal x3468=(cj15*sj13);
IkReal x3469=(r21*sj15);
IkReal x3470=(cj11*x3456);
IkReal x3471=(sj11*x3456);
IkReal x3472=(sj11*x3457);
IkReal x3473=(cj11*x3457);
IkReal x3474=((1.0)*x3472);
evalcond[0]=((((-1.0)*cj14*x3466))+x3471+x3473+((sj14*x3464))+(((-1.0)*x3459*x3467)));
evalcond[1]=((((-1.0)*cj14*x3462))+(((-1.0)*x3467*x3469))+x3470+((sj14*x3461))+(((-1.0)*x3474)));
evalcond[2]=((((-1.0)*pz))+((x3456*x3460))+(((-0.4)*x3472))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+(((9.9e-7)*x3461))+(((-9.9e-7)*x3469)));
evalcond[3]=((((-9.9e-7)*x3459))+(((-1.93e-6)*sj11))+x3460+((x3457*x3460))+(((-1.0)*px))+(((0.4)*x3471))+(((9.9e-7)*x3464)));
evalcond[4]=((((-1.0)*x3458*x3464))+(((-1.0)*x3465*x3466))+((r01*x3468))+x3470+((r00*x3463))+((x3458*x3459))+(((-1.0)*x3474)));
evalcond[5]=((((-1.0)*x3458*x3461))+(((-1.0)*x3462*x3465))+((r20*x3463))+((r21*x3468))+(((-1.0)*x3473))+(((-1.0)*x3471))+((x3458*x3469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3475=(sj11*sj14);
IkReal x3476=(r21*sj15);
IkReal x3477=(cj15*r20);
IkReal x3478=(cj11*sj14);
IkReal x3479=(cj15*r00);
IkReal x3480=((1.0)*cj14);
IkReal x3481=((1.0)*r01*sj14*sj15);
if( IKabs((((x3475*x3477))+(((-1.0)*cj11*r02*x3480))+(((-1.0)*r22*sj11*x3480))+(((-1.0)*x3475*x3476))+(((-1.0)*r01*sj15*x3478))+((x3478*x3479)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3475*x3479))+((x3476*x3478))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x3480))+(((-1.0)*r01*sj15*x3475))+(((-1.0)*x3477*x3478)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3475*x3477))+(((-1.0)*cj11*r02*x3480))+(((-1.0)*r22*sj11*x3480))+(((-1.0)*x3475*x3476))+(((-1.0)*r01*sj15*x3478))+((x3478*x3479))))+IKsqr((((x3475*x3479))+((x3476*x3478))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x3480))+(((-1.0)*r01*sj15*x3475))+(((-1.0)*x3477*x3478))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((x3475*x3477))+(((-1.0)*cj11*r02*x3480))+(((-1.0)*r22*sj11*x3480))+(((-1.0)*x3475*x3476))+(((-1.0)*r01*sj15*x3478))+((x3478*x3479))), (((x3475*x3479))+((x3476*x3478))+((cj11*cj14*r22))+(((-1.0)*r02*sj11*x3480))+(((-1.0)*r01*sj15*x3475))+(((-1.0)*x3477*x3478))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x3482=IKsin(j12);
IkReal x3483=IKcos(j12);
IkReal x3484=(cj13*cj14);
IkReal x3485=(r01*sj15);
IkReal x3486=((0.4)*cj11);
IkReal x3487=(cj15*r20);
IkReal x3488=((1.0)*r22);
IkReal x3489=((0.4)*sj11);
IkReal x3490=(sj13*sj15);
IkReal x3491=(cj15*r00);
IkReal x3492=(cj13*sj14);
IkReal x3493=((1.0)*sj14);
IkReal x3494=(r21*sj15);
IkReal x3495=((1.0)*r02);
IkReal x3496=(cj15*sj13);
IkReal x3497=(sj11*x3482);
IkReal x3498=(cj11*x3483);
IkReal x3499=((1.0)*cj11*x3482);
IkReal x3500=((1.0)*sj11*x3483);
IkReal x3501=(x3500+x3499);
evalcond[0]=((((-1.0)*cj14*x3488))+((sj14*x3487))+x3498+(((-1.0)*x3493*x3494))+(((-1.0)*x3497)));
evalcond[1]=((((-1.0)*cj14*x3495))+(((-1.0)*x3501))+((sj14*x3491))+(((-1.0)*x3485*x3493)));
evalcond[2]=((((-1.0)*x3482*x3489))+(((-9.9e-7)*x3494))+((x3483*x3486))+(((-1.0)*pz))+(((9.9e-7)*x3487))+(((-1.93e-6)*cj11))+(((-1.0)*x3489)));
evalcond[3]=((((-1.0)*x3483*x3489))+(((-1.0)*x3482*x3486))+(((1.93e-6)*sj11))+(((-1.0)*px))+(((9.9e-7)*x3491))+(((-9.9e-7)*x3485))+(((-1.0)*x3486)));
evalcond[4]=(((x3484*x3485))+((r01*x3496))+((r00*x3490))+(((-1.0)*x3484*x3491))+x3497+(((-1.0)*x3492*x3495))+(((-1.0)*x3498)));
evalcond[5]=(((r20*x3490))+(((-1.0)*x3488*x3492))+(((-1.0)*x3501))+(((-1.0)*x3484*x3487))+((r21*x3496))+((x3484*x3494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3502=(sj11*sj14);
IkReal x3503=(r11*sj15);
IkReal x3504=((1.0)*cj15);
IkReal x3505=(cj14*r12);
IkReal x3506=(cj11*sj14);
IkReal x3507=(r21*sj15);
IkReal x3508=(cj14*r22);
if( IKabs(((((-1.0)*x3502*x3507))+((cj15*r20*x3502))+(((-1.0)*sj11*x3508))+((cj11*x3505))+((x3503*x3506))+(((-1.0)*r10*x3504*x3506)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3506*x3507))+(((-1.0)*r10*x3502*x3504))+(((-1.0)*r20*x3504*x3506))+((cj11*x3508))+((x3502*x3503))+((sj11*x3505)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3502*x3507))+((cj15*r20*x3502))+(((-1.0)*sj11*x3508))+((cj11*x3505))+((x3503*x3506))+(((-1.0)*r10*x3504*x3506))))+IKsqr((((x3506*x3507))+(((-1.0)*r10*x3502*x3504))+(((-1.0)*r20*x3504*x3506))+((cj11*x3508))+((x3502*x3503))+((sj11*x3505))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*x3502*x3507))+((cj15*r20*x3502))+(((-1.0)*sj11*x3508))+((cj11*x3505))+((x3503*x3506))+(((-1.0)*r10*x3504*x3506))), (((x3506*x3507))+(((-1.0)*r10*x3502*x3504))+(((-1.0)*r20*x3504*x3506))+((cj11*x3508))+((x3502*x3503))+((sj11*x3505))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x3509=IKcos(j12);
IkReal x3510=IKsin(j12);
IkReal x3511=(cj15*r10);
IkReal x3512=((0.4)*cj11);
IkReal x3513=((1.0)*sj14);
IkReal x3514=(r11*sj15);
IkReal x3515=((1.0)*cj14);
IkReal x3516=(cj15*r20);
IkReal x3517=(cj13*cj14);
IkReal x3518=(sj13*sj15);
IkReal x3519=(cj15*sj13);
IkReal x3520=(r21*sj15);
IkReal x3521=(cj11*x3509);
IkReal x3522=(sj11*x3509);
IkReal x3523=(sj11*x3510);
IkReal x3524=(cj11*x3510);
IkReal x3525=((1.0)*x3523);
evalcond[0]=((((-1.0)*x3513*x3514))+x3524+x3522+(((-1.0)*r12*x3515))+((sj14*x3511)));
evalcond[1]=((((-1.0)*x3513*x3520))+(((-1.0)*x3525))+x3521+(((-1.0)*r22*x3515))+((sj14*x3516)));
evalcond[2]=((((-9.9e-7)*x3520))+(((-0.4)*x3523))+(((-1.0)*pz))+((x3509*x3512))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+(((9.9e-7)*x3516)));
evalcond[3]=(((x3510*x3512))+(((-9.9e-7)*x3514))+(((-1.93e-6)*sj11))+x3512+(((0.4)*x3522))+(((-1.0)*py))+(((9.9e-7)*x3511)));
evalcond[4]=(((r10*x3518))+(((-1.0)*x3525))+(((-1.0)*cj13*r12*x3513))+x3521+((r11*x3519))+(((-1.0)*cj13*x3511*x3515))+((x3514*x3517)));
evalcond[5]=((((-1.0)*x3522))+(((-1.0)*x3524))+((r21*x3519))+(((-1.0)*cj13*r22*x3513))+((x3517*x3520))+(((-1.0)*cj13*x3515*x3516))+((r20*x3518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3526=((1.0)*cj11);
IkReal x3527=(sj14*sj15);
IkReal x3528=(cj14*r12);
IkReal x3529=((1.0)*sj11);
IkReal x3530=(cj14*r22);
IkReal x3531=(cj15*r20*sj14);
IkReal x3532=(cj15*r10*sj14);
if( IKabs(((((-1.0)*r21*x3527*x3529))+(((-1.0)*x3526*x3528))+((cj11*x3532))+((sj11*x3531))+(((-1.0)*x3529*x3530))+(((-1.0)*r11*x3526*x3527)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*r21*x3527))+((cj11*x3530))+(((-1.0)*r11*x3527*x3529))+((sj11*x3532))+(((-1.0)*x3526*x3531))+(((-1.0)*x3528*x3529)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x3527*x3529))+(((-1.0)*x3526*x3528))+((cj11*x3532))+((sj11*x3531))+(((-1.0)*x3529*x3530))+(((-1.0)*r11*x3526*x3527))))+IKsqr((((cj11*r21*x3527))+((cj11*x3530))+(((-1.0)*r11*x3527*x3529))+((sj11*x3532))+(((-1.0)*x3526*x3531))+(((-1.0)*x3528*x3529))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r21*x3527*x3529))+(((-1.0)*x3526*x3528))+((cj11*x3532))+((sj11*x3531))+(((-1.0)*x3529*x3530))+(((-1.0)*r11*x3526*x3527))), (((cj11*r21*x3527))+((cj11*x3530))+(((-1.0)*r11*x3527*x3529))+((sj11*x3532))+(((-1.0)*x3526*x3531))+(((-1.0)*x3528*x3529))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x3533=IKsin(j12);
IkReal x3534=IKcos(j12);
IkReal x3535=(cj15*r10);
IkReal x3536=((0.4)*cj11);
IkReal x3537=((1.0)*sj14);
IkReal x3538=(r11*sj15);
IkReal x3539=((1.0)*cj14);
IkReal x3540=((0.4)*sj11);
IkReal x3541=(cj15*r20);
IkReal x3542=(cj13*cj14);
IkReal x3543=(r21*sj15);
IkReal x3544=(sj13*sj15);
IkReal x3545=(cj15*sj13);
IkReal x3546=(sj11*x3533);
IkReal x3547=(cj11*x3534);
IkReal x3548=((1.0)*cj11*x3533);
IkReal x3549=((1.0)*sj11*x3534);
IkReal x3550=(x3548+x3549);
evalcond[0]=(((sj14*x3541))+x3547+(((-1.0)*x3546))+(((-1.0)*x3537*x3543))+(((-1.0)*r22*x3539)));
evalcond[1]=((((-1.0)*r12*x3539))+((sj14*x3535))+(((-1.0)*x3550))+(((-1.0)*x3537*x3538)));
evalcond[2]=(((x3534*x3536))+(((-9.9e-7)*x3543))+(((-1.0)*x3533*x3540))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((9.9e-7)*x3541))+(((-1.0)*x3540)));
evalcond[3]=((((1.93e-6)*sj11))+(((9.9e-7)*x3535))+(((-1.0)*py))+(((-1.0)*x3534*x3540))+(((-1.0)*x3536))+(((-1.0)*x3533*x3536))+(((-9.9e-7)*x3538)));
evalcond[4]=((((-1.0)*cj13*r12*x3537))+x3546+((x3538*x3542))+(((-1.0)*cj13*x3535*x3539))+(((-1.0)*x3547))+((r11*x3545))+((r10*x3544)));
evalcond[5]=(((r20*x3544))+((x3542*x3543))+(((-1.0)*cj13*r22*x3537))+((r21*x3545))+(((-1.0)*x3550))+(((-1.0)*cj13*x3539*x3541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3551=(sj11*sj14);
IkReal x3552=(r11*sj15);
IkReal x3553=((1.0)*cj15);
IkReal x3554=(cj14*sj11);
IkReal x3555=(cj11*sj14);
IkReal x3556=(r20*sj10);
IkReal x3557=(r22*sj10);
IkReal x3558=(cj11*cj14);
IkReal x3559=(r21*sj10*sj15);
CheckValue<IkReal> x3560=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x3560.valid){
continue;
}
CheckValue<IkReal> x3561 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3553*x3555))+((r12*x3558))+((x3552*x3555))+(((-1.0)*x3554*x3557))+((cj15*x3551*x3556))+(((-1.0)*x3551*x3559)))),IkReal(((((-1.0)*x3553*x3555*x3556))+((r12*x3554))+(((-1.0)*r10*x3551*x3553))+((x3551*x3552))+((x3557*x3558))+((x3555*x3559)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3561.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3560.value)))+(x3561.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x3562=IKsin(j12);
IkReal x3563=IKcos(j12);
IkReal x3564=(cj15*sj14);
IkReal x3565=((1.0)*sj11);
IkReal x3566=((1.0)*sj14);
IkReal x3567=(r11*sj15);
IkReal x3568=((1.0)*cj14);
IkReal x3569=(cj15*r20);
IkReal x3570=(sj13*sj15);
IkReal x3571=(r01*sj15);
IkReal x3572=(r21*sj15);
IkReal x3573=(cj13*cj14);
IkReal x3574=((0.4)*sj11);
IkReal x3575=(cj15*r10);
IkReal x3576=((0.4)*cj11);
IkReal x3577=(cj15*sj13);
IkReal x3578=((1.93e-6)*sj11);
IkReal x3579=(cj15*r00);
IkReal x3580=(sj10*x3562);
IkReal x3581=(cj11*x3563);
IkReal x3582=(cj10*x3562);
IkReal x3583=(cj10*x3563);
IkReal x3584=(sj10*x3563);
evalcond[0]=((((-1.0)*x3566*x3572))+x3581+(((-1.0)*r22*x3568))+(((-1.0)*x3562*x3565))+((r20*x3564)));
evalcond[1]=((((-1.0)*r02*x3568))+((sj11*x3583))+(((-1.0)*x3566*x3571))+((r00*x3564))+((cj11*x3582)));
evalcond[2]=(((r10*x3564))+((sj11*x3584))+(((-1.0)*x3566*x3567))+(((-1.0)*r12*x3568))+((cj11*x3580)));
evalcond[3]=(((x3563*x3576))+(((-9.9e-7)*x3572))+(((-1.0)*x3574))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((9.9e-7)*x3569))+(((-1.0)*x3562*x3574)));
evalcond[4]=((((-9.9e-7)*x3571))+(((-1.0)*px))+(((-1.0)*cj10*x3578))+((x3574*x3583))+((cj10*x3576))+(((9.9e-7)*x3579))+((x3576*x3582)));
evalcond[5]=(((sj10*x3576))+(((-9.9e-7)*x3567))+(((-1.0)*py))+((x3574*x3584))+(((9.9e-7)*x3575))+((x3576*x3580))+(((-1.0)*sj10*x3578)));
evalcond[6]=(((r21*x3577))+(((-1.0)*cj13*x3568*x3569))+(((-1.0)*cj11*x3562))+(((-1.0)*x3563*x3565))+((r20*x3570))+((x3572*x3573))+(((-1.0)*cj13*r22*x3566)));
evalcond[7]=(((r00*x3570))+((r01*x3577))+(((-1.0)*cj13*r02*x3566))+((x3571*x3573))+(((-1.0)*cj13*x3568*x3579))+((cj10*x3581))+(((-1.0)*x3565*x3582)));
evalcond[8]=(((r10*x3570))+((x3567*x3573))+(((-1.0)*cj13*r12*x3566))+((sj10*x3581))+(((-1.0)*cj13*x3568*x3575))+((r11*x3577))+(((-1.0)*x3565*x3580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3585=(cj10*cj11);
IkReal x3586=(cj14*r22);
IkReal x3587=(sj14*sj15);
IkReal x3588=(cj14*r02);
IkReal x3589=(cj10*sj11);
IkReal x3590=((1.0)*cj15*sj14);
CheckValue<IkReal> x3591 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3587*x3589))+(((-1.0)*x3586*x3589))+((cj11*r01*x3587))+((cj11*x3588))+(((-1.0)*cj11*r00*x3590))+((cj15*r20*sj14*x3589)))),IkReal(((((-1.0)*r20*x3585*x3590))+((r01*sj11*x3587))+((sj11*x3588))+((x3585*x3586))+((r21*x3585*x3587))+(((-1.0)*r00*sj11*x3590)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3591.valid){
continue;
}
CheckValue<IkReal> x3592=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x3592.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x3591.value)+(((1.5707963267949)*(x3592.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x3593=IKsin(j12);
IkReal x3594=IKcos(j12);
IkReal x3595=(cj15*sj14);
IkReal x3596=((1.0)*sj11);
IkReal x3597=((1.0)*sj14);
IkReal x3598=(r11*sj15);
IkReal x3599=((1.0)*cj14);
IkReal x3600=(cj15*r20);
IkReal x3601=(sj13*sj15);
IkReal x3602=(r01*sj15);
IkReal x3603=(r21*sj15);
IkReal x3604=(cj13*cj14);
IkReal x3605=((0.4)*sj11);
IkReal x3606=(cj15*r10);
IkReal x3607=((0.4)*cj11);
IkReal x3608=(cj15*sj13);
IkReal x3609=((1.93e-6)*sj11);
IkReal x3610=(cj15*r00);
IkReal x3611=(sj10*x3593);
IkReal x3612=(cj11*x3594);
IkReal x3613=(cj10*x3593);
IkReal x3614=(cj10*x3594);
IkReal x3615=(sj10*x3594);
evalcond[0]=((((-1.0)*r22*x3599))+((r20*x3595))+x3612+(((-1.0)*x3593*x3596))+(((-1.0)*x3597*x3603)));
evalcond[1]=((((-1.0)*r02*x3599))+((cj11*x3613))+((r00*x3595))+((sj11*x3614))+(((-1.0)*x3597*x3602)));
evalcond[2]=(((r10*x3595))+((cj11*x3611))+(((-1.0)*r12*x3599))+(((-1.0)*x3597*x3598))+((sj11*x3615)));
evalcond[3]=((((-9.9e-7)*x3603))+(((9.9e-7)*x3600))+(((-1.0)*pz))+(((-1.0)*x3593*x3605))+(((-1.93e-6)*cj11))+(((-1.0)*x3605))+((x3594*x3607)));
evalcond[4]=(((x3605*x3614))+(((-9.9e-7)*x3602))+(((9.9e-7)*x3610))+((x3607*x3613))+(((-1.0)*px))+(((-1.0)*cj10*x3609))+((cj10*x3607)));
evalcond[5]=(((x3605*x3615))+(((9.9e-7)*x3606))+((x3607*x3611))+(((-1.0)*sj10*x3609))+(((-9.9e-7)*x3598))+(((-1.0)*py))+((sj10*x3607)));
evalcond[6]=((((-1.0)*x3594*x3596))+(((-1.0)*cj13*r22*x3597))+(((-1.0)*cj13*x3599*x3600))+((r21*x3608))+((x3603*x3604))+((r20*x3601))+(((-1.0)*cj11*x3593)));
evalcond[7]=((((-1.0)*cj13*x3599*x3610))+((r01*x3608))+((cj10*x3612))+((r00*x3601))+((x3602*x3604))+(((-1.0)*cj13*r02*x3597))+(((-1.0)*x3596*x3613)));
evalcond[8]=(((r11*x3608))+((x3598*x3604))+(((-1.0)*cj13*x3599*x3606))+((r10*x3601))+(((-1.0)*cj13*r12*x3597))+((sj10*x3612))+(((-1.0)*x3596*x3611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3616=sj10*sj10;
IkReal x3617=(sj10*sj14);
IkReal x3618=(r11*sj15);
IkReal x3619=(cj15*r10);
IkReal x3620=((0.4)*sj14);
IkReal x3621=(r21*sj15);
IkReal x3622=(cj15*r20);
IkReal x3623=((0.00019107)*sj10);
IkReal x3624=(py*sj10);
IkReal x3625=(cj14*r12*sj10);
IkReal x3626=((((0.4)*cj14*r22))+((x3620*x3621))+(((-1.0)*pz))+(((-9.9e-7)*x3621))+(((9.9e-7)*x3622))+(((-1.0)*x3620*x3622)));
IkReal x3627=(x3616*x3626);
CheckValue<IkReal> x3628=IKPowWithIntegerCheck(IKsign(x3616),-1);
if(!x3628.valid){
continue;
}
CheckValue<IkReal> x3629 = IKatan2WithCheck(IkReal(((((-40000000.0)*x3627))+(((77.2)*x3617*x3619))+((x3618*x3623))+(((-77.2)*x3617*x3618))+(((-77.2)*x3625))+(((193.0)*x3624))+(((-1.0)*x3619*x3623)))),IkReal(((((-40000000.0)*x3624))+(((-16000000.0)*x3617*x3619))+(((-193.0)*x3627))+(((16000000.0)*x3625))+(((16000000.0)*x3617*x3618))+(((-39.6)*sj10*x3618))+(((39.6)*sj10*x3619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3629.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x3628.value)))+(x3629.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x3630=IKsin(j11);
IkReal x3631=sj10*sj10;
IkReal x3632=IKcos(j11);
IkReal x3633=cj10*cj10;
IkReal x3634=(cj10*sj15);
IkReal x3635=((9.9e-7)*r11);
IkReal x3636=(cj15*r20);
IkReal x3637=((0.4)*sj14);
IkReal x3638=(cj15*r00);
IkReal x3639=((0.4)*cj10);
IkReal x3640=(cj15*sj13);
IkReal x3641=(cj13*r22);
IkReal x3642=((0.4)*r11);
IkReal x3643=(cj10*sj10);
IkReal x3644=(r21*sj15);
IkReal x3645=((0.4)*r01);
IkReal x3646=((0.4)*cj14);
IkReal x3647=((9.9e-7)*cj10);
IkReal x3648=(cj13*cj14);
IkReal x3649=((0.4)*sj10);
IkReal x3650=(sj10*sj15);
IkReal x3651=(cj15*r10);
IkReal x3652=((0.4)*sj13*sj15);
IkReal x3653=(sj10*x3646);
IkReal x3654=((9.9e-7)*cj15*sj10);
IkReal x3655=((0.4)*x3632);
IkReal x3656=((9.9e-7)*r01*sj15);
IkReal x3657=((1.93e-6)*x3630);
IkReal x3658=((1.93e-6)*x3632);
IkReal x3659=(x3643*x3657);
IkReal x3660=(sj10*x3632*x3639);
evalcond[0]=((((-0.4)*x3630))+(((9.9e-7)*x3636))+((x3637*x3644))+(((-1.0)*pz))+(((-9.9e-7)*x3644))+((r22*x3646))+(((-1.0)*x3636*x3637))+(((-1.0)*x3658)));
evalcond[1]=((((-1.0)*r11*x3637*x3650))+((x3631*x3657))+(((-1.0)*x3631*x3655))+((py*sj10))+((x3635*x3650))+(((-1.0)*r12*x3653))+((sj10*x3637*x3651))+(((-9.9e-7)*sj10*x3651)));
evalcond[2]=((((-1.0)*r01*x3634*x3637))+((x3633*x3657))+((cj10*px))+(((9.9e-7)*r01*x3634))+(((-1.0)*x3633*x3655))+(((-1.0)*cj14*r02*x3639))+(((-1.0)*x3638*x3647))+((cj10*x3637*x3638)));
evalcond[3]=((((-1.0)*cj13*r12*x3637))+((x3630*x3649))+(((-9.9e-7)*sj10*x3636))+(((-1.0)*cj13*x3646*x3651))+((pz*sj10))+((sj15*x3642*x3648))+((r10*x3652))+(((9.9e-7)*sj10*x3644))+((sj10*x3658))+((x3640*x3642)));
evalcond[4]=(((r00*x3652))+(((-1.0)*cj13*r02*x3637))+((cj10*pz))+((sj15*x3645*x3648))+((cj10*x3658))+(((-1.0)*x3636*x3647))+(((9.9e-7)*r21*x3634))+((x3630*x3639))+(((-1.0)*cj13*x3638*x3646))+((x3640*x3645)));
evalcond[5]=(((cj13*x3636*x3653))+(((-1.0)*cj13*x3644*x3653))+((sj15*x3635))+((sj10*x3637*x3641))+((sj10*x3657))+py+(((-1.0)*r20*sj13*sj15*x3649))+(((-1.0)*x3632*x3649))+(((-9.9e-7)*x3651))+(((-1.0)*r21*x3640*x3649)));
evalcond[6]=(((x3636*x3639*x3648))+(((-9.9e-7)*x3638))+(((-0.4)*r20*sj13*x3634))+(((-1.0)*cj13*r21*x3634*x3646))+((cj10*x3657))+((cj10*x3637*x3641))+x3656+px+(((-1.0)*r21*x3639*x3640))+(((-1.0)*x3632*x3639)));
evalcond[7]=((((-9.9e-7)*sj10*x3638))+(((-1.0)*x3660))+((px*sj10))+(((9.9e-7)*r01*x3650))+x3659+((cj10*x3637*x3651))+(((-1.0)*cj14*r12*x3639))+(((-1.0)*r11*x3634*x3637)));
evalcond[8]=(((cj10*py))+(((-1.0)*x3660))+x3659+((x3634*x3635))+((sj10*x3637*x3638))+(((-1.0)*r02*x3653))+(((-1.0)*x3647*x3651))+(((-1.0)*r01*x3637*x3650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[2];
j12eval[0]=cj10;
j12eval[1]=IKsign(cj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
j12eval[0]=sj10;
j12eval[1]=IKsign(sj10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3661=(cj15*r00);
IkReal x3662=(cj14*r22);
IkReal x3663=(r21*sj15);
IkReal x3664=(cj11*sj14);
IkReal x3665=(sj11*sj14);
IkReal x3666=(cj15*r20);
IkReal x3667=(r01*sj15);
IkReal x3668=(cj14*r02);
IkReal x3669=((1.0)*x3665);
if( IKabs(((((-1.0)*x3661*x3664))+(((-1.0)*x3663*x3669))+(((-1.0)*sj11*x3662))+((x3664*x3667))+((cj11*x3668))+((x3665*x3666)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3661*x3669))+(((-1.0)*x3664*x3666))+((cj11*x3662))+((x3663*x3664))+((sj11*x3668))+((x3665*x3667)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3661*x3664))+(((-1.0)*x3663*x3669))+(((-1.0)*sj11*x3662))+((x3664*x3667))+((cj11*x3668))+((x3665*x3666))))+IKsqr(((((-1.0)*x3661*x3669))+(((-1.0)*x3664*x3666))+((cj11*x3662))+((x3663*x3664))+((sj11*x3668))+((x3665*x3667))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*x3661*x3664))+(((-1.0)*x3663*x3669))+(((-1.0)*sj11*x3662))+((x3664*x3667))+((cj11*x3668))+((x3665*x3666))), ((((-1.0)*x3661*x3669))+(((-1.0)*x3664*x3666))+((cj11*x3662))+((x3663*x3664))+((sj11*x3668))+((x3665*x3667))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x3670=IKcos(j12);
IkReal x3671=IKsin(j12);
IkReal x3672=(cj13*cj14);
IkReal x3673=(r01*sj15);
IkReal x3674=((0.4)*cj11);
IkReal x3675=(cj15*r20);
IkReal x3676=((1.0)*r22);
IkReal x3677=(sj13*sj15);
IkReal x3678=(cj15*r00);
IkReal x3679=(cj13*sj14);
IkReal x3680=((1.0)*r02);
IkReal x3681=((1.0)*sj14);
IkReal x3682=(cj15*sj13);
IkReal x3683=(r21*sj15);
IkReal x3684=(cj11*x3670);
IkReal x3685=(sj11*x3670);
IkReal x3686=(sj11*x3671);
IkReal x3687=(cj11*x3671);
IkReal x3688=((1.0)*x3686);
evalcond[0]=((((-1.0)*cj14*x3680))+x3687+x3685+(((-1.0)*x3673*x3681))+((sj14*x3678)));
evalcond[1]=((((-1.0)*x3688))+x3684+(((-1.0)*x3681*x3683))+(((-1.0)*cj14*x3676))+((sj14*x3675)));
evalcond[2]=((((9.9e-7)*x3675))+(((-1.0)*pz))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+(((-0.4)*x3686))+((x3670*x3674))+(((-9.9e-7)*x3683)));
evalcond[3]=((((9.9e-7)*x3678))+(((0.4)*x3685))+(((-1.93e-6)*sj11))+x3674+(((-1.0)*px))+(((-9.9e-7)*x3673))+((x3671*x3674)));
evalcond[4]=(((r00*x3677))+((r01*x3682))+(((-1.0)*x3688))+(((-1.0)*x3672*x3678))+x3684+(((-1.0)*x3679*x3680))+((x3672*x3673)));
evalcond[5]=(((x3672*x3683))+(((-1.0)*x3676*x3679))+((r21*x3682))+((r20*x3677))+(((-1.0)*x3672*x3675))+(((-1.0)*x3685))+(((-1.0)*x3687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3689=(sj11*sj14);
IkReal x3690=(r21*sj15);
IkReal x3691=(cj15*r20);
IkReal x3692=(cj11*sj14);
IkReal x3693=(cj15*r00);
IkReal x3694=((1.0)*cj14);
IkReal x3695=((1.0)*r01*sj14*sj15);
if( IKabs(((((-1.0)*x3689*x3690))+(((-1.0)*r01*sj15*x3692))+((x3689*x3691))+((x3692*x3693))+(((-1.0)*cj11*r02*x3694))+(((-1.0)*r22*sj11*x3694)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj15*x3689))+((cj11*cj14*r22))+((x3689*x3693))+(((-1.0)*r02*sj11*x3694))+((x3690*x3692))+(((-1.0)*x3691*x3692)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3689*x3690))+(((-1.0)*r01*sj15*x3692))+((x3689*x3691))+((x3692*x3693))+(((-1.0)*cj11*r02*x3694))+(((-1.0)*r22*sj11*x3694))))+IKsqr(((((-1.0)*r01*sj15*x3689))+((cj11*cj14*r22))+((x3689*x3693))+(((-1.0)*r02*sj11*x3694))+((x3690*x3692))+(((-1.0)*x3691*x3692))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*x3689*x3690))+(((-1.0)*r01*sj15*x3692))+((x3689*x3691))+((x3692*x3693))+(((-1.0)*cj11*r02*x3694))+(((-1.0)*r22*sj11*x3694))), ((((-1.0)*r01*sj15*x3689))+((cj11*cj14*r22))+((x3689*x3693))+(((-1.0)*r02*sj11*x3694))+((x3690*x3692))+(((-1.0)*x3691*x3692))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x3696=IKsin(j12);
IkReal x3697=IKcos(j12);
IkReal x3698=(cj13*cj14);
IkReal x3699=(r01*sj15);
IkReal x3700=((0.4)*cj11);
IkReal x3701=(cj15*r20);
IkReal x3702=((1.0)*r22);
IkReal x3703=((0.4)*sj11);
IkReal x3704=(sj13*sj15);
IkReal x3705=(cj15*r00);
IkReal x3706=(cj13*sj14);
IkReal x3707=((1.0)*sj14);
IkReal x3708=(r21*sj15);
IkReal x3709=((1.0)*r02);
IkReal x3710=(cj15*sj13);
IkReal x3711=(sj11*x3696);
IkReal x3712=(cj11*x3697);
IkReal x3713=((1.0)*cj11*x3696);
IkReal x3714=((1.0)*sj11*x3697);
IkReal x3715=(x3714+x3713);
evalcond[0]=((((-1.0)*x3707*x3708))+(((-1.0)*cj14*x3702))+((sj14*x3701))+x3712+(((-1.0)*x3711)));
evalcond[1]=((((-1.0)*x3699*x3707))+(((-1.0)*cj14*x3709))+((sj14*x3705))+(((-1.0)*x3715)));
evalcond[2]=(((x3697*x3700))+(((-1.0)*x3703))+(((-9.9e-7)*x3708))+(((-1.0)*pz))+(((9.9e-7)*x3701))+(((-1.93e-6)*cj11))+(((-1.0)*x3696*x3703)));
evalcond[3]=((((-1.0)*x3697*x3703))+(((1.93e-6)*sj11))+(((-9.9e-7)*x3699))+(((-1.0)*x3700))+(((-1.0)*px))+(((9.9e-7)*x3705))+(((-1.0)*x3696*x3700)));
evalcond[4]=(((x3698*x3699))+(((-1.0)*x3698*x3705))+((r00*x3704))+(((-1.0)*x3706*x3709))+((r01*x3710))+x3711+(((-1.0)*x3712)));
evalcond[5]=(((x3698*x3708))+(((-1.0)*x3698*x3701))+(((-1.0)*x3715))+((r20*x3704))+((r21*x3710))+(((-1.0)*x3702*x3706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3716=(sj11*sj14);
IkReal x3717=(r11*sj15);
IkReal x3718=((1.0)*cj15);
IkReal x3719=(cj14*r12);
IkReal x3720=(cj11*sj14);
IkReal x3721=(r21*sj15);
IkReal x3722=(cj14*r22);
if( IKabs(((((-1.0)*sj11*x3722))+((x3717*x3720))+(((-1.0)*r10*x3718*x3720))+((cj11*x3719))+(((-1.0)*x3716*x3721))+((cj15*r20*x3716)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x3716*x3718))+((sj11*x3719))+(((-1.0)*r20*x3718*x3720))+((x3720*x3721))+((cj11*x3722))+((x3716*x3717)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj11*x3722))+((x3717*x3720))+(((-1.0)*r10*x3718*x3720))+((cj11*x3719))+(((-1.0)*x3716*x3721))+((cj15*r20*x3716))))+IKsqr(((((-1.0)*r10*x3716*x3718))+((sj11*x3719))+(((-1.0)*r20*x3718*x3720))+((x3720*x3721))+((cj11*x3722))+((x3716*x3717))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*sj11*x3722))+((x3717*x3720))+(((-1.0)*r10*x3718*x3720))+((cj11*x3719))+(((-1.0)*x3716*x3721))+((cj15*r20*x3716))), ((((-1.0)*r10*x3716*x3718))+((sj11*x3719))+(((-1.0)*r20*x3718*x3720))+((x3720*x3721))+((cj11*x3722))+((x3716*x3717))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x3723=IKcos(j12);
IkReal x3724=IKsin(j12);
IkReal x3725=(cj15*r10);
IkReal x3726=((0.4)*cj11);
IkReal x3727=((1.0)*sj14);
IkReal x3728=(r11*sj15);
IkReal x3729=((1.0)*cj14);
IkReal x3730=(cj15*r20);
IkReal x3731=(cj13*cj14);
IkReal x3732=(sj13*sj15);
IkReal x3733=(cj15*sj13);
IkReal x3734=(r21*sj15);
IkReal x3735=(cj11*x3723);
IkReal x3736=(sj11*x3723);
IkReal x3737=(sj11*x3724);
IkReal x3738=(cj11*x3724);
IkReal x3739=((1.0)*x3737);
evalcond[0]=((((-1.0)*r12*x3729))+(((-1.0)*x3727*x3728))+x3738+x3736+((sj14*x3725)));
evalcond[1]=((((-1.0)*r22*x3729))+(((-1.0)*x3739))+(((-1.0)*x3727*x3734))+x3735+((sj14*x3730)));
evalcond[2]=((((-9.9e-7)*x3734))+(((-0.4)*x3737))+(((-1.0)*pz))+(((9.9e-7)*x3730))+(((-0.4)*sj11))+(((-1.93e-6)*cj11))+((x3723*x3726)));
evalcond[3]=((((-9.9e-7)*x3728))+(((-1.93e-6)*sj11))+(((0.4)*x3736))+((x3724*x3726))+x3726+(((-1.0)*py))+(((9.9e-7)*x3725)));
evalcond[4]=((((-1.0)*x3739))+(((-1.0)*cj13*x3725*x3729))+((r11*x3733))+(((-1.0)*cj13*r12*x3727))+x3735+((r10*x3732))+((x3728*x3731)));
evalcond[5]=(((x3731*x3734))+(((-1.0)*cj13*x3729*x3730))+(((-1.0)*cj13*r22*x3727))+(((-1.0)*x3738))+(((-1.0)*x3736))+((r21*x3733))+((r20*x3732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3740=((1.0)*cj11);
IkReal x3741=(sj14*sj15);
IkReal x3742=(cj14*r12);
IkReal x3743=((1.0)*sj11);
IkReal x3744=(cj14*r22);
IkReal x3745=(cj15*r20*sj14);
IkReal x3746=(cj15*r10*sj14);
if( IKabs(((((-1.0)*r11*x3740*x3741))+(((-1.0)*x3740*x3742))+(((-1.0)*x3743*x3744))+(((-1.0)*r21*x3741*x3743))+((sj11*x3745))+((cj11*x3746)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3740*x3745))+((cj11*r21*x3741))+(((-1.0)*r11*x3741*x3743))+((sj11*x3746))+(((-1.0)*x3742*x3743))+((cj11*x3744)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x3740*x3741))+(((-1.0)*x3740*x3742))+(((-1.0)*x3743*x3744))+(((-1.0)*r21*x3741*x3743))+((sj11*x3745))+((cj11*x3746))))+IKsqr(((((-1.0)*x3740*x3745))+((cj11*r21*x3741))+(((-1.0)*r11*x3741*x3743))+((sj11*x3746))+(((-1.0)*x3742*x3743))+((cj11*x3744))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r11*x3740*x3741))+(((-1.0)*x3740*x3742))+(((-1.0)*x3743*x3744))+(((-1.0)*r21*x3741*x3743))+((sj11*x3745))+((cj11*x3746))), ((((-1.0)*x3740*x3745))+((cj11*r21*x3741))+(((-1.0)*r11*x3741*x3743))+((sj11*x3746))+(((-1.0)*x3742*x3743))+((cj11*x3744))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x3747=IKsin(j12);
IkReal x3748=IKcos(j12);
IkReal x3749=(cj15*r10);
IkReal x3750=((0.4)*cj11);
IkReal x3751=((1.0)*sj14);
IkReal x3752=(r11*sj15);
IkReal x3753=((1.0)*cj14);
IkReal x3754=((0.4)*sj11);
IkReal x3755=(cj15*r20);
IkReal x3756=(cj13*cj14);
IkReal x3757=(r21*sj15);
IkReal x3758=(sj13*sj15);
IkReal x3759=(cj15*sj13);
IkReal x3760=(sj11*x3747);
IkReal x3761=(cj11*x3748);
IkReal x3762=((1.0)*cj11*x3747);
IkReal x3763=((1.0)*sj11*x3748);
IkReal x3764=(x3762+x3763);
evalcond[0]=((((-1.0)*r22*x3753))+(((-1.0)*x3760))+((sj14*x3755))+x3761+(((-1.0)*x3751*x3757)));
evalcond[1]=((((-1.0)*r12*x3753))+((sj14*x3749))+(((-1.0)*x3751*x3752))+(((-1.0)*x3764)));
evalcond[2]=((((-1.0)*x3754))+(((-9.9e-7)*x3757))+(((-1.0)*x3747*x3754))+((x3748*x3750))+(((-1.0)*pz))+(((9.9e-7)*x3755))+(((-1.93e-6)*cj11)));
evalcond[3]=((((-1.0)*x3748*x3754))+(((1.93e-6)*sj11))+(((-1.0)*x3750))+(((-9.9e-7)*x3752))+(((-1.0)*x3747*x3750))+(((-1.0)*py))+(((9.9e-7)*x3749)));
evalcond[4]=((((-1.0)*cj13*r12*x3751))+(((-1.0)*x3761))+((x3752*x3756))+((r11*x3759))+((r10*x3758))+x3760+(((-1.0)*cj13*x3749*x3753)));
evalcond[5]=((((-1.0)*cj13*x3753*x3755))+((r20*x3758))+((x3756*x3757))+(((-1.0)*cj13*r22*x3751))+((r21*x3759))+(((-1.0)*x3764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3765=(sj11*sj14);
IkReal x3766=(r11*sj15);
IkReal x3767=((1.0)*cj15);
IkReal x3768=(cj14*sj11);
IkReal x3769=(cj11*sj14);
IkReal x3770=(r20*sj10);
IkReal x3771=(r22*sj10);
IkReal x3772=(cj11*cj14);
IkReal x3773=(r21*sj10*sj15);
CheckValue<IkReal> x3774=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x3774.valid){
continue;
}
CheckValue<IkReal> x3775 = IKatan2WithCheck(IkReal(((((-1.0)*x3765*x3773))+(((-1.0)*r10*x3767*x3769))+(((-1.0)*x3768*x3771))+((x3766*x3769))+((r12*x3772))+((cj15*x3765*x3770)))),IkReal(((((-1.0)*r10*x3765*x3767))+((x3769*x3773))+(((-1.0)*x3767*x3769*x3770))+((x3771*x3772))+((r12*x3768))+((x3765*x3766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3775.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3774.value)))+(x3775.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x3776=IKsin(j12);
IkReal x3777=IKcos(j12);
IkReal x3778=(cj15*sj14);
IkReal x3779=((1.0)*sj11);
IkReal x3780=((1.0)*sj14);
IkReal x3781=(r11*sj15);
IkReal x3782=((1.0)*cj14);
IkReal x3783=(cj15*r20);
IkReal x3784=(sj13*sj15);
IkReal x3785=(r01*sj15);
IkReal x3786=(r21*sj15);
IkReal x3787=(cj13*cj14);
IkReal x3788=((0.4)*sj11);
IkReal x3789=(cj15*r10);
IkReal x3790=((0.4)*cj11);
IkReal x3791=(cj15*sj13);
IkReal x3792=((1.93e-6)*sj11);
IkReal x3793=(cj15*r00);
IkReal x3794=(sj10*x3776);
IkReal x3795=(cj11*x3777);
IkReal x3796=(cj10*x3776);
IkReal x3797=(cj10*x3777);
IkReal x3798=(sj10*x3777);
evalcond[0]=((((-1.0)*r22*x3782))+x3795+(((-1.0)*x3780*x3786))+((r20*x3778))+(((-1.0)*x3776*x3779)));
evalcond[1]=(((cj11*x3796))+(((-1.0)*r02*x3782))+(((-1.0)*x3780*x3785))+((sj11*x3797))+((r00*x3778)));
evalcond[2]=(((cj11*x3794))+((r10*x3778))+(((-1.0)*x3780*x3781))+(((-1.0)*r12*x3782))+((sj11*x3798)));
evalcond[3]=((((9.9e-7)*x3783))+(((-1.0)*x3788))+(((-1.0)*pz))+(((-1.93e-6)*cj11))+(((-9.9e-7)*x3786))+((x3777*x3790))+(((-1.0)*x3776*x3788)));
evalcond[4]=(((x3788*x3797))+(((-1.0)*px))+((cj10*x3790))+(((-9.9e-7)*x3785))+((x3790*x3796))+(((9.9e-7)*x3793))+(((-1.0)*cj10*x3792)));
evalcond[5]=((((9.9e-7)*x3789))+((x3788*x3798))+((sj10*x3790))+(((-1.0)*py))+(((-1.0)*sj10*x3792))+(((-9.9e-7)*x3781))+((x3790*x3794)));
evalcond[6]=(((r21*x3791))+(((-1.0)*x3777*x3779))+((r20*x3784))+(((-1.0)*cj13*x3782*x3783))+((x3786*x3787))+(((-1.0)*cj13*r22*x3780))+(((-1.0)*cj11*x3776)));
evalcond[7]=(((x3785*x3787))+(((-1.0)*x3779*x3796))+((r00*x3784))+(((-1.0)*cj13*r02*x3780))+((cj10*x3795))+(((-1.0)*cj13*x3782*x3793))+((r01*x3791)));
evalcond[8]=((((-1.0)*x3779*x3794))+((sj10*x3795))+(((-1.0)*cj13*r12*x3780))+(((-1.0)*cj13*x3782*x3789))+((r11*x3791))+((x3781*x3787))+((r10*x3784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3799=(cj10*cj11);
IkReal x3800=(cj14*r22);
IkReal x3801=(sj14*sj15);
IkReal x3802=(cj14*r02);
IkReal x3803=(cj10*sj11);
IkReal x3804=((1.0)*cj15*sj14);
CheckValue<IkReal> x3805 = IKatan2WithCheck(IkReal((((cj15*r20*sj14*x3803))+((cj11*x3802))+(((-1.0)*cj11*r00*x3804))+(((-1.0)*x3800*x3803))+(((-1.0)*r21*x3801*x3803))+((cj11*r01*x3801)))),IkReal((((x3799*x3800))+((r01*sj11*x3801))+(((-1.0)*r20*x3799*x3804))+((sj11*x3802))+((r21*x3799*x3801))+(((-1.0)*r00*sj11*x3804)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3805.valid){
continue;
}
CheckValue<IkReal> x3806=IKPowWithIntegerCheck(IKsign(cj10),-1);
if(!x3806.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x3805.value)+(((1.5707963267949)*(x3806.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[9];
IkReal x3807=IKsin(j12);
IkReal x3808=IKcos(j12);
IkReal x3809=(cj15*sj14);
IkReal x3810=((1.0)*sj11);
IkReal x3811=((1.0)*sj14);
IkReal x3812=(r11*sj15);
IkReal x3813=((1.0)*cj14);
IkReal x3814=(cj15*r20);
IkReal x3815=(sj13*sj15);
IkReal x3816=(r01*sj15);
IkReal x3817=(r21*sj15);
IkReal x3818=(cj13*cj14);
IkReal x3819=((0.4)*sj11);
IkReal x3820=(cj15*r10);
IkReal x3821=((0.4)*cj11);
IkReal x3822=(cj15*sj13);
IkReal x3823=((1.93e-6)*sj11);
IkReal x3824=(cj15*r00);
IkReal x3825=(sj10*x3807);
IkReal x3826=(cj11*x3808);
IkReal x3827=(cj10*x3807);
IkReal x3828=(cj10*x3808);
IkReal x3829=(sj10*x3808);
evalcond[0]=((((-1.0)*r22*x3813))+(((-1.0)*x3807*x3810))+(((-1.0)*x3811*x3817))+x3826+((r20*x3809)));
evalcond[1]=(((r00*x3809))+((cj11*x3827))+(((-1.0)*r02*x3813))+(((-1.0)*x3811*x3816))+((sj11*x3828)));
evalcond[2]=((((-1.0)*r12*x3813))+((cj11*x3825))+((r10*x3809))+(((-1.0)*x3811*x3812))+((sj11*x3829)));
evalcond[3]=((((-1.0)*x3807*x3819))+(((-1.0)*x3819))+(((-1.0)*pz))+(((-9.9e-7)*x3817))+(((-1.93e-6)*cj11))+((x3808*x3821))+(((9.9e-7)*x3814)));
evalcond[4]=(((x3819*x3828))+(((-1.0)*px))+(((-9.9e-7)*x3816))+((x3821*x3827))+((cj10*x3821))+(((-1.0)*cj10*x3823))+(((9.9e-7)*x3824)));
evalcond[5]=(((x3819*x3829))+((sj10*x3821))+(((-1.0)*py))+(((-9.9e-7)*x3812))+(((-1.0)*sj10*x3823))+((x3821*x3825))+(((9.9e-7)*x3820)));
evalcond[6]=((((-1.0)*cj13*r22*x3811))+(((-1.0)*cj11*x3807))+(((-1.0)*x3808*x3810))+((x3817*x3818))+(((-1.0)*cj13*x3813*x3814))+((r20*x3815))+((r21*x3822)));
evalcond[7]=((((-1.0)*cj13*r02*x3811))+(((-1.0)*x3810*x3827))+((x3816*x3818))+(((-1.0)*cj13*x3813*x3824))+((cj10*x3826))+((r01*x3822))+((r00*x3815)));
evalcond[8]=(((r11*x3822))+(((-1.0)*x3810*x3825))+((sj10*x3826))+((r10*x3815))+(((-1.0)*cj13*x3813*x3820))+(((-1.0)*cj13*r12*x3811))+((x3812*x3818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - hsr_co605_dual_arm_with_gripper (1b3a70e1491b899ee634badf1b111d40)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
