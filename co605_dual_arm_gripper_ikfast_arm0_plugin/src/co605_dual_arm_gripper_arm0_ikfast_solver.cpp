/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2020-05-11 19:25:23.027987
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKsin(j[3]);
x8=IKcos(j[3]);
x9=IKsin(j[0]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((0.00159999795200393)*x11);
x13=((0.999998720002458)*x10);
x14=((1.0)*x6);
x15=((1.0)*x3);
x16=((0.355)*x0);
x17=((0.00159999795200393)*x10);
x18=((0.4)*x4);
x19=((1.0)*x5);
x20=((0.999998720002458)*x11);
x21=((9.9e-7)*x3);
x22=((0.355)*x8);
x23=((9.9e-7)*x8);
x24=((1.0)*x2);
x25=((9.9e-7)*x2);
x26=((0.355)*x2);
x27=((1.0)*x9);
x28=(x7*x9);
x29=(x3*x9);
x30=(x0*x4);
x31=(x5*x8);
x32=(x6*x8);
x33=(x1*x3);
x34=(x2*x4);
x35=(x3*x4);
x36=(x1*x9);
x37=(x4*x9);
x38=(x0*x7);
x39=(x0*x1);
x40=(x24*x4);
x41=(x2*x39);
x42=(x24*x30);
x43=(x24*x37);
x44=((((-1.0)*x1*x15))+x40);
x45=((((-1.0)*x1*x24))+(((-1.0)*x15*x4)));
x46=(((x1*x24))+((x15*x4)));
x47=(x44*x5);
x48=((((-1.0)*x42))+((x0*x33)));
x49=((((-1.0)*x43))+((x1*x29)));
x50=(x46*x7);
x51=(x45*x8);
x52=((((-1.0)*x24*x39))+(((-1.0)*x15*x30)));
x53=((((-1.0)*x24*x36))+(((-1.0)*x15*x37)));
x54=(x48*x8);
x55=(x49*x8);
x56=(x5*x52);
x57=(x5*x53);
x58=(x54+(((-1.0)*x27*x7)));
x59=(x38+x55);
x60=(((x7*((x42+(((-1.0)*x15*x39))))))+(((-1.0)*x27*x8)));
x61=(((x0*x8))+((x7*((x43+(((-1.0)*x15*x36)))))));
x62=((0.999998720002458)*x61);
x63=(x58*x6);
x64=(x47+((x32*x45)));
x65=((((-1.0)*x47))+(((-1.0)*x32*x45)));
x66=(x56+x63);
x67=(x57+((x59*x6)));
x68=((((-1.0)*x19*x52))+(((-1.0)*x14*x58)));
x69=((((-1.0)*x19*x53))+(((-1.0)*x14*x59)));
eerot[0]=(((x5*x58))+((x6*((((x3*x30))+x41)))));
eerot[1]=(((x12*x68))+(((-1.0)*x20*x60))+((x17*x60))+(((-1.0)*x13*x66)));
IkReal x70=((1.0)*x60);
eerot[2]=((((-1.0)*x13*x70))+(((-1.0)*x12*x70))+(((-1.0)*x20*x68))+(((-1.0)*x17*x66)));
eetrans[0]=(((x6*((((x16*x35))+((x1*x16*x2))))))+((x0*x18*x3))+((x6*((((x23*x48))+(((-9.9e-7)*x28))))))+((x5*(((((-1.0)*x25*x39))+(((-1.0)*x21*x30))))))+(((0.4)*x41))+(((-1.93e-6)*x30))+(((0.4)*x39))+((x5*((((x22*x48))+(((-0.355)*x28)))))));
eerot[3]=(((x6*((((x29*x4))+((x2*x36))))))+((x5*x59)));
eerot[4]=(((x12*x69))+(((-1.0)*x20*x61))+((x17*x61))+(((-1.0)*x13*x67)));
IkReal x71=((1.0)*x61);
eerot[5]=((((-1.0)*x13*x71))+(((-1.0)*x12*x71))+(((-1.0)*x20*x69))+(((-1.0)*x17*x67)));
IkReal x72=((0.4)*x36);
eetrans[1]=(((x18*x29))+((x6*((((x23*x49))+(((9.9e-7)*x38))))))+x72+((x6*((((x26*x36))+(((0.355)*x29*x4))))))+((x5*(((((-1.0)*x25*x36))+(((-1.0)*x21*x37))))))+(((-1.93e-6)*x37))+((x5*((((x22*x49))+((x16*x7))))))+((x2*x72)));
eerot[6]=(((x6*(((((-1.0)*x40))+x33))))+((x31*x45)));
eerot[7]=(((x12*x65))+((x17*x50))+(((-1.0)*x20*x50))+(((-1.0)*x13*x64)));
IkReal x73=((1.0)*x50);
eerot[8]=((((-1.0)*x13*x73))+(((-1.0)*x12*x73))+(((-1.0)*x20*x65))+(((-1.0)*x17*x64)));
IkReal x74=((1.0)*x1);
IkReal x75=((1.0)*x4);
IkReal x76=((1.0)*x18);
eetrans[2]=((0.3215)+(((-1.0)*x2*x76))+((x6*(((((0.355)*x33))+(((-1.0)*x26*x75))))))+(((-1.0)*x76))+(((-1.93e-6)*x1))+((x31*(((((-0.355)*x35))+(((-1.0)*x26*x74))))))+((x5*(((((-1.0)*x21*x74))+((x25*x4))))))+(((0.4)*x33))+((x32*(((((-1.0)*x25*x74))+(((-1.0)*x21*x75)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.999998720002458)*r01))+(((-0.00159999795200393)*r02)));
new_r01=((((-0.999998720002458)*r02))+(((0.00159999795200393)*r01)));
new_r02=r00;
new_px=(px+(((-0.355)*r00)));
new_r10=((((-0.999998720002458)*r11))+(((-0.00159999795200393)*r12)));
new_r11=((((0.00159999795200393)*r11))+(((-0.999998720002458)*r12)));
new_r12=r10;
new_py=(py+(((-0.355)*r10)));
new_r20=((((-0.999998720002458)*r21))+(((-0.00159999795200393)*r22)));
new_r21=((((-0.999998720002458)*r22))+(((0.00159999795200393)*r21)));
new_r22=r20;
new_pz=((-0.3215)+pz+(((-0.355)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x77=((1.0)*px);
IkReal x78=((1.0)*pz);
IkReal x79=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x79))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x78)));
rxp0_2=((((-1.0)*r10*x77))+((py*r00)));
rxp1_0=((((-1.0)*r21*x79))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x78)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x77)));
rxp2_0=((((-1.0)*r22*x79))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x78)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x77)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x80=((1.25)*pp);
IkReal x81=((2.475e-6)*npx);
IkReal x82=((1.0)*rxp2_2);
IkReal x83=((9.9e-7)*r21);
IkReal x84=((1.0)*npz);
IkReal x85=(x83+(((-1.0)*x82)));
IkReal x86=((-3.431e-12)+x80);
IkReal x87=((((-1.0)*x83))+(((-1.0)*x82)));
IkReal x88=(npz+x86+(((-1.0)*x81)));
IkReal x89=(x86+(((-1.0)*x84))+(((-1.0)*x81)));
IkReal x90=(x81+x86+(((-1.0)*x84)));
IkReal x91=(npz+x81+x86);
IkReal gconst0=x85;
IkReal gconst1=x89;
IkReal gconst2=x88;
IkReal gconst3=x85;
IkReal gconst4=x89;
IkReal gconst5=x88;
IkReal gconst6=x87;
IkReal gconst7=x90;
IkReal gconst8=x91;
IkReal gconst9=x87;
IkReal gconst10=x90;
IkReal gconst11=x91;
IkReal x92=npx*npx;
IkReal x93=rxp0_2*rxp0_2;
IkReal x94=rxp2_2*rxp2_2;
IkReal x95=r21*r21;
IkReal x96=(gconst6*gconst7);
IkReal x97=(gconst11*r21);
IkReal x98=((4.0)*gconst6);
IkReal x99=((1.98e-5)*npx);
IkReal x100=((4.95e-6)*npy);
IkReal x101=(gconst8*r21);
IkReal x102=(npx*rxp1_2);
IkReal x103=(gconst10*gconst9);
IkReal x104=((1.98e-6)*r20);
IkReal x105=((3.96e-6)*gconst6);
IkReal x106=(npy*rxp2_2);
IkReal x107=((1.9602e-11)*rxp0_2);
IkReal x108=(gconst11*rxp2_2);
IkReal x109=((1.9602e-12)*r20);
IkReal x110=(gconst10*gconst8);
IkReal x111=((7.8408e-12)*r20);
IkReal x112=(r20*rxp2_2);
IkReal x113=(gconst6*rxp2_2);
IkReal x114=(gconst10*gconst6);
IkReal x115=(npy*r21);
IkReal x116=((7.92e-6)*r20);
IkReal x117=(gconst6*npx);
IkReal x118=(gconst8*rxp0_2);
IkReal x119=(r20*r21);
IkReal x120=(gconst10*rxp0_2);
IkReal x121=((7.92e-6)*rxp1_2);
IkReal x122=(gconst8*rxp2_2);
IkReal x123=(gconst8*r20);
IkReal x124=((4.9005e-12)*npy);
IkReal x125=(rxp2_2*x92);
IkReal x126=(gconst6*npy*rxp0_2);
IkReal x127=(npx*x120);
IkReal x128=(r21*x92);
IkReal x129=(gconst8*x94);
IkReal x130=((4.851495e-18)*npy*x95);
IkReal x131=((1.98e-5)*npy*x93);
op[0]=((((-4.0)*x110*x93))+(((-3.881196e-18)*gconst6*r21))+(((-1.0)*x125*x98))+(((-1.0)*x103*x96))+(((-3.9204e-12)*x113))+(((-3.96e-6)*npx*rxp0_2*x101))+(((-1.0)*x127*x98))+(((9.9e-7)*x96*x97))+(((-1.0)*gconst11*x129))+(((-7.92e-6)*npx*x113))+((x103*x122))+(((-7.8408e-12)*r21*x117))+(((9.9e-7)*x101*x103))+(((-4.0)*npx*rxp2_2*x118))+((x108*x96))+(((-3.96e-6)*rxp2_2*x118))+(((-1.98e-6)*x122*x97))+(((-1.0)*x105*x120))+(((-1.0)*x105*x128))+(((-3.9204e-12)*rxp0_2*x101))+(((-9.801e-13)*gconst11*gconst8*x95)));
op[1]=((((-8.0)*npy*rxp0_2*x114))+((rxp2_2*x104*x110))+(((-1.0)*rxp0_2*x106*x99))+(((-1.584e-5)*gconst6*x106))+(((-7.92e-6)*x112*x92))+(((-7.762392e-18)*x112))+(((-1.0)*gconst11*x104*x96))+(((-1.0)*x100*x129))+(((-1.0)*gconst9*x100*x96))+(((-1.0)*gconst11*x100*x94))+(((-1.0)*gconst11*x130))+(((-9.801e-12)*x101*x106))+((npx*x116*x118))+(((1.56816e-11)*r20*x117))+(((-16.0)*x106*x117))+((x111*x118))+((rxp2_2*x100*x103))+(((-16.0)*rxp0_2*rxp1_2*x110))+(((-1.0)*npx*x107*x115))+(((7.762392e-18)*gconst6*r20))+(((4.9005e-12)*x115*x96))+(((-1.0)*x111*x120))+(((-1.0)*x111*x128))+(((-1.0)*x116*x127))+(((-1.0)*gconst8*x103*x104))+(((-1.5524784e-17)*npx*x119))+(((-1.0)*gconst6*x100*x103))+(((-1.0)*x106*x107))+((gconst6*x124*x97))+(((-7.92e-6)*x101*x102))+(((-1.56816e-11)*gconst6*x115))+((gconst6*x116*x92))+((gconst7*x104*x108))+(((-1.0)*gconst10*x131))+(((-1.0)*gconst7*x103*x104))+(((3.96e-6)*x108*x123))+(((-1.584e-5)*x115*x117))+(((-7.8408e-12)*rxp1_2*x101))+((gconst9*x100*x122))+(((-1.0)*x121*x122))+(((-7.92e-6)*npy*rxp0_2*x101))+(((-1.56816e-11)*npx*x112))+(((-7.68476808e-24)*x119))+(((3.9204e-12)*x123*x97))+(((-1.0)*gconst8*x131))+(((-1.0)*gconst8*x130))+(((-1.0)*x114*x121))+(((-1.940598e-17)*rxp0_2*x115))+(((-1.0)*x126*x99))+(((-8.0)*x106*x118))+((rxp2_2*x100*x96))+(((-1.0)*gconst6*npy*x107))+(((-1.0)*gconst10*x104*x96))+((gconst9*x101*x124))+(((4.9005e-12)*x103*x115))+(((-9.801e-12)*x106*x97))+((gconst7*x109*x97))+((gconst6*x100*x108))+(((-8.0)*x102*x114))+((gconst10*x101*x109))+(((-8.0)*x102*x122)));
op[2]=((((1.188e-5)*gconst8*npx*r21*rxp0_2))+(((-3.96e-5)*npx*npy*rxp1_2*rxp2_2))+(((9.9e-7)*gconst0*gconst11*gconst7*r21))+(((-7.92e-6)*gconst6*npx*rxp2_2))+(((-3.881196e-17)*npy*r21*rxp1_2))+(((2.910897e-17)*gconst11*npy*r20*r21))+(((-9.801e-12)*gconst8*gconst9*npy*r20))+(((-3.881196e-18)*gconst6*r21))+((gconst10*gconst3*gconst8*rxp2_2))+(((-3.9204e-11)*npy*rxp1_2*rxp2_2))+(((-16.0)*gconst10*gconst6*npy*rxp1_2))+(((3.9204e-12)*gconst8*r21*rxp0_2))+((gconst10*gconst8*gconst9*rxp2_2))+(((-1.584e-5)*gconst10*npy*r20*rxp0_2))+(((-4.0)*gconst4*gconst8*(rxp0_2*rxp0_2)))+((gconst11*gconst6*gconst7*rxp2_2))+(((1.188e-5)*gconst6*r21*(npx*npx)))+(((-4.851495e-17)*r21*rxp2_2*(npy*npy)))+(((-3.96e-6)*gconst2*npx*r21*rxp0_2))+(((-7.92e-6)*gconst0*npx*rxp2_2))+(((1.56816e-11)*(npx*npx)*(r20*r20)))+(((-9.801e-11)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-1.0)*gconst5*gconst8*(rxp2_2*rxp2_2)))+(((-3.96e-6)*gconst0*r21*(npx*npx)))+(((-1.17612e-11)*gconst6*rxp2_2))+(((9.70299e-18)*gconst7*npy*r20*r21))+(((2.45025e-11)*gconst9*rxp2_2*(npy*npy)))+(((1.584e-5)*gconst8*npy*r20*rxp0_2))+(((9.9e-7)*gconst10*gconst2*gconst9*r21))+(((-16.0)*gconst10*gconst8*(rxp1_2*rxp1_2)))+(((7.8408e-12)*gconst6*npx*r21))+(((9.9e-7)*gconst5*gconst6*gconst7*r21))+(((-1.56816e-11)*gconst10*r20*rxp1_2))+(((-9.9e-7)*gconst11*gconst6*gconst7*r21))+((gconst5*gconst6*gconst7*rxp2_2))+(((-1.0)*gconst10*gconst3*gconst6*gconst7))+(((-9.801e-12)*gconst7*gconst9*npy*r20))+(((-1.0)*gconst11*gconst2*(rxp2_2*rxp2_2)))+(((3.1049568e-17)*npx*(r20*r20)))+(((-3.96e-6)*gconst2*rxp0_2*rxp2_2))+(((-3.96e-5)*rxp0_2*rxp2_2*(npy*npy)))+(((-7.92e-5)*gconst8*npy*rxp0_2*rxp1_2))+(((1.9602e-12)*gconst11*gconst8*(r21*r21)))+(((-3.9204e-12)*gconst0*rxp2_2))+(((-4.0)*gconst0*rxp2_2*(npx*npx)))+(((-15.9999999999755)*gconst6*rxp2_2*(npy*npy)))+(((4.0)*gconst8*npx*rxp0_2*rxp2_2))+(((-1.98e-6)*gconst5*gconst8*r21*rxp2_2))+(((-9.9e-7)*gconst10*gconst8*gconst9*r21))+(((-1.9602e-11)*gconst10*gconst9*npy*r20))+(((2.910897e-17)*gconst8*npy*r20*r21))+(((9.9e-7)*gconst10*gconst3*gconst8*r21))+(((-4.0)*gconst0*gconst10*npx*rxp0_2))+(((-9.801e-12)*gconst11*gconst6*npy*r20))+(((1.536953616e-23)*(r20*r20)))+(((9.801e-12)*gconst7*npy*r20*rxp2_2))+(((-3.13632e-11)*npx*npy*r20*r21))+(((-16.0)*gconst8*npy*rxp1_2*rxp2_2))+(((8.0)*gconst10*gconst6*npx*rxp0_2))+(((-3.9204e-12)*gconst11*gconst8*(r20*r20)))+(((-2.45025e-11)*gconst6*gconst9*(npy*npy)))+(((3.168e-5)*gconst6*npx*npy*r20))+(((-2.0)*gconst11*gconst8*(rxp2_2*rxp2_2)))+(((-3.9204e-12)*gconst10*gconst8*(r20*r20)))+(((8.0)*gconst10*gconst8*(rxp0_2*rxp0_2)))+((gconst0*gconst11*gconst7*rxp2_2))+(((-2.45025e-11)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-3.96e-6)*gconst0*gconst10*rxp0_2))+(((-4.0)*gconst2*npx*rxp0_2*rxp2_2))+(((-3.9204e-12)*gconst11*gconst7*(r20*r20)))+(((9.9e-7)*gconst4*gconst8*gconst9*r21))+(((2.9403e-11)*gconst8*npy*r20*rxp2_2))+((gconst4*gconst8*gconst9*rxp2_2))+(((1.584e-5)*gconst8*npx*r20*rxp1_2))+((gconst10*gconst2*gconst9*rxp2_2))+(((-1.0)*gconst4*gconst6*gconst7*gconst9))+(((-3.9204e-11)*npx*npy*r21*rxp1_2))+(((-3.96e-6)*gconst4*gconst6*rxp0_2))+(((2.9403e-11)*gconst11*npy*r20*rxp2_2))+(((-1.9602e-11)*gconst6*gconst7*npy*r20))+(((-9.801e-13)*gconst11*gconst2*(r21*r21)))+(((-3.9204e-11)*gconst6*npy*rxp1_2))+(((-4.0)*gconst4*gconst6*npx*rxp0_2))+(((4.0)*gconst6*rxp2_2*(npx*npx)))+(((-1.584e-5)*gconst10*npx*r20*rxp1_2))+(((1.56816e-11)*gconst8*r20*rxp1_2))+(((-1.58399999999757e-5)*gconst6*r21*(npy*npy)))+(((9.801e-12)*gconst10*npy*r20*rxp2_2))+(((-1.0)*gconst1*gconst10*gconst6*gconst9))+(((-2.401490025e-23)*(npy*npy)*(r21*r21)))+(((-7.92e-5)*gconst10*npy*rxp0_2*rxp1_2))+(((-3.1049568e-17)*npy*r20*r21))+(((-4.0)*gconst10*gconst2*(rxp0_2*rxp0_2)))+(((-1.0)*gconst0*gconst10*gconst7*gconst9))+((gconst1*gconst11*gconst6*rxp2_2))+(((-7.8408e-12)*gconst0*npx*r21))+(((9.9e-7)*gconst1*gconst11*gconst6*r21))+(((9.70299e-18)*gconst10*npy*r20*r21))+(((3.13632e-11)*gconst6*npy*r20))+(((-3.881196e-18)*gconst0*r21))+(((-3.9204e-12)*gconst10*gconst7*(r20*r20)))+(((-3.9204e-12)*gconst2*r21*rxp0_2))+(((-3.168e-5)*npx*npy*r20*rxp2_2))+(((-9.801e-13)*gconst5*gconst8*(r21*r21)))+(((-3.96e-5)*gconst6*npx*npy*rxp1_2))+(((-1.584e-5)*gconst8*npy*r21*rxp1_2))+(((2.4257475e-17)*gconst9*r21*(npy*npy)))+(((-3.96e-5)*gconst6*rxp0_2*(npy*npy)))+(((-3.9204e-11)*r21*rxp0_2*(npy*npy)))+(((-3.96e-6)*gconst8*rxp0_2*rxp2_2))+(((-1.98e-6)*gconst11*gconst2*r21*rxp2_2))+(((-9.801e-12)*gconst10*gconst6*npy*r20))+(((-3.13632e-11)*npy*r20*rxp2_2)));
op[3]=((((-9.801e-12)*gconst5*npy*r21*rxp2_2))+(((7.762392e-18)*gconst0*r20))+(((4.9005e-12)*gconst1*gconst6*npy*r21))+(((-4.9005e-12)*gconst10*gconst9*npy*r21))+(((-4.95e-6)*gconst4*gconst6*gconst9*npy))+(((3.96e-5)*gconst6*npx*npy*rxp0_2))+(((-16.0)*gconst4*gconst8*rxp0_2*rxp1_2))+(((3.96e-6)*gconst5*gconst8*r20*rxp2_2))+(((-4.95e-6)*gconst10*gconst3*gconst6*npy))+(((2.35224e-11)*r20*r21*(npx*npx)))+(((1.940598e-17)*npy*r21*rxp0_2))+(((-1.98e-6)*gconst1*gconst10*gconst9*r20))+(((-4.95e-6)*gconst0*gconst10*gconst9*npy))+(((-9.9e-6)*gconst11*npy*(rxp2_2*rxp2_2)))+(((3.9204e-12)*gconst5*gconst8*r20*r21))+(((-9.801e-12)*gconst2*npy*r21*rxp2_2))+(((-4.95e-6)*gconst5*npy*(rxp2_2*rxp2_2)))+(((3.96e-6)*gconst11*gconst2*r20*rxp2_2))+(((-16.0)*gconst10*gconst2*rxp0_2*rxp1_2))+(((-1.98e-6)*gconst5*gconst6*gconst7*r20))+(((-1.9602e-11)*npy*rxp0_2*rxp2_2))+(((4.95e-6)*gconst0*gconst7*npy*rxp2_2))+(((-4.851495e-18)*gconst5*npy*(r21*r21)))+(((-1.98e-5)*gconst4*npy*(rxp0_2*rxp0_2)))+(((-4.95e-6)*gconst3*gconst6*gconst7*npy))+(((6.2099136e-17)*npy*(r20*r20)))+(((4.95e-6)*gconst11*gconst6*npy*rxp2_2))+(((-1.56816e-11)*npx*r20*rxp2_2))+(((1.5524784e-17)*npx*r20*r21))+(((1.98e-6)*gconst4*gconst8*r20*rxp2_2))+(((-1.98e-5)*gconst0*npx*npy*rxp0_2))+(((4.95e-6)*gconst0*gconst11*npy*rxp2_2))+(((-1.98e-6)*gconst0*gconst11*gconst7*r20))+(((-8.0)*gconst4*gconst6*npy*rxp0_2))+(((-7.68476808e-24)*r20*r21))+(((-1.98e-6)*gconst1*gconst10*gconst6*r20))+(((-3.9204e-10)*rxp0_2*rxp1_2*(npy*npy)))+(((-4.9005e-12)*gconst6*gconst7*npy*r21))+(((-4.9005e-12)*gconst11*gconst6*npy*r21))+(((1.9602e-12)*gconst10*gconst2*r20*r21))+(((-16.0)*gconst0*npx*npy*rxp2_2))+(((-3.9204e-12)*gconst11*gconst8*r20*r21))+(((3.96e-5)*gconst10*npy*(rxp0_2*rxp0_2)))+(((-1.9602e-12)*gconst11*gconst7*r20*r21))+(((-8.0)*gconst2*npy*rxp0_2*rxp2_2))+(((-9.70299e-17)*gconst9*r20*(npy*npy)))+(((1.98e-6)*gconst5*gconst7*r20*rxp2_2))+(((4.9005e-12)*gconst4*gconst9*npy*r21))+(((1.9602e-12)*gconst4*gconst8*r20*r21))+(((-1.9602e-12)*gconst10*gconst8*r20*r21))+(((-3.168e-5)*gconst10*npy*r20*rxp1_2))+(((8.0)*gconst10*gconst6*npx*rxp1_2))+(((-4.95e-6)*gconst1*gconst6*gconst9*npy))+(((-1.584e-5)*gconst0*npx*npy*r21))+(((-3.881196e-17)*gconst11*npy*(r20*r20)))+(((4.95e-6)*gconst6*gconst7*npy*rxp2_2))+(((7.92e-6)*gconst0*r20*(npx*npx)))+(((-7.92e-6)*gconst2*npx*r21*rxp1_2))+(((1.9602e-12)*gconst1*gconst11*r20*r21))+(((-1.584e-5)*gconst0*npy*rxp2_2))+(((4.95e-6)*gconst2*gconst9*npy*rxp2_2))+(((-1.584e-5)*gconst8*rxp1_2*rxp2_2))+(((4.95e-6)*gconst4*gconst9*npy*rxp2_2))+(((-7.92e-6)*gconst4*npx*r20*rxp0_2))+(((-7.8408e-11)*r21*rxp1_2*(npy*npy)))+(((4.95e-6)*gconst5*gconst6*npy*rxp2_2))+(((-8.0)*gconst0*gconst10*npy*rxp0_2))+(((-1.56816e-11)*gconst0*npy*r21))+(((-1.98e-6)*gconst4*gconst7*gconst9*r20))+(((4.95e-6)*gconst3*gconst8*npy*rxp2_2))+(((-1.98e-6)*gconst4*gconst8*gconst9*r20))+(((-4.95e-6)*gconst0*gconst7*gconst9*npy))+(((-3.168e-5)*gconst6*npy*rxp2_2))+(((4.95e-6)*gconst10*gconst9*npy*rxp2_2))+(((-3.13631999998079e-11)*r20*r21*(npy*npy)))+(((1.98e-6)*gconst10*gconst8*r20*rxp2_2))+(((-1.98e-6)*gconst4*gconst6*gconst7*r20))+(((4.95e-6)*gconst1*gconst6*npy*rxp2_2))+(((-7.92e-5)*gconst8*npy*(rxp1_2*rxp1_2)))+(((-3.881196e-17)*gconst8*npy*(r20*r20)))+(((1.584e-5)*gconst8*npy*r21*rxp0_2))+(((-1.9602e-11)*gconst0*npy*rxp0_2))+(((3.168e-5)*gconst6*npx*npy*r21))+(((-7.8408e-12)*gconst2*r21*rxp1_2))+(((-7.92e-6)*gconst2*rxp1_2*rxp2_2))+(((5.8806e-11)*npx*npy*r21*rxp0_2))+(((-1.98e-6)*gconst1*gconst11*gconst6*r20))+(((1.584e-5)*gconst10*npx*r20*rxp0_2))+(((9.70299e-18)*gconst8*npy*(r21*r21)))+(((-7.92e-6)*gconst2*npy*r21*rxp0_2))+(((4.9005e-12)*gconst10*gconst3*npy*r21))+(((4.9005e-12)*gconst2*gconst9*npy*r21))+(((-3.881196e-17)*gconst10*npy*(r20*r20)))+(((3.96e-6)*gconst11*gconst8*r20*rxp2_2))+(((-7.92e-5)*gconst10*npy*(rxp1_2*rxp1_2)))+(((-9.9e-6)*gconst8*npy*(rxp2_2*rxp2_2)))+(((-7.8408e-12)*gconst4*r20*rxp0_2))+(((1.9602e-12)*gconst5*gconst7*r20*r21))+(((-7.92e-5)*rxp1_2*rxp2_2*(npy*npy)))+(((4.9005e-12)*gconst0*gconst7*npy*r21))+(((-7.92e-6)*gconst4*gconst6*rxp1_2))+(((16.0)*gconst10*gconst8*rxp0_2*rxp1_2))+(((1.98e-6)*gconst10*gconst2*r20*rxp2_2))+(((-3.16799999998059e-5)*r20*rxp2_2*(npy*npy)))+(((3.168e-5)*gconst8*npy*r20*rxp1_2))+(((3.1679999999903e-5)*gconst6*r20*(npy*npy)))+(((6.27264e-11)*npx*npy*(r20*r20)))+(((-1.98e-6)*gconst10*gconst2*gconst9*r20))+(((-1.98e-6)*gconst10*gconst3*gconst8*r20))+(((-3.881196e-17)*gconst7*npy*(r20*r20)))+(((1.5524784e-17)*gconst6*r20))+(((3.96e-5)*gconst8*npy*(rxp0_2*rxp0_2)))+(((7.8408e-12)*gconst2*r20*rxp0_2))+(((-1.98e-6)*gconst10*gconst3*gconst7*r20))+(((-7.92e-6)*gconst10*gconst6*rxp1_2))+(((1.98e-5)*npx*npy*rxp0_2*rxp2_2))+(((-1.584e-5)*gconst8*npx*r20*rxp0_2))+(((1.584e-5)*gconst8*npx*r21*rxp1_2))+(((9.70299e-18)*gconst11*npy*(r21*r21)))+(((-1.98e-6)*gconst0*gconst10*gconst7*r20))+(((-8.0)*gconst0*gconst10*npx*rxp1_2))+(((4.9005e-12)*gconst0*gconst11*npy*r21))+(((1.98e-6)*gconst11*gconst7*r20*rxp2_2))+(((-4.851495e-18)*gconst2*npy*(r21*r21)))+(((4.95e-6)*gconst10*gconst3*npy*rxp2_2))+(((1.98e-6)*gconst1*gconst11*r20*rxp2_2))+(((7.92e-6)*gconst2*npx*r20*rxp0_2))+(((8.0)*gconst10*gconst6*npy*rxp0_2))+(((-1.584e-5)*gconst6*r20*(npx*npx)))+(((1.56816e-11)*gconst0*npx*r20))+(((-8.0)*gconst4*gconst6*npx*rxp1_2))+(((4.9005e-12)*gconst5*gconst6*npy*r21))+(((-7.92e-5)*gconst6*rxp1_2*(npy*npy)))+(((-7.92e-6)*gconst0*gconst10*rxp1_2))+(((-4.9005e-12)*gconst8*gconst9*npy*r21))+(((3.9204e-12)*gconst11*gconst2*r20*r21))+(((-1.98e-5)*gconst2*npy*(rxp0_2*rxp0_2)))+(((7.92e-6)*r20*rxp2_2*(npx*npx)))+(((4.95e-6)*gconst8*gconst9*npy*rxp2_2))+(((-4.95e-6)*gconst2*npy*(rxp2_2*rxp2_2)))+(((-8.0)*gconst2*npx*rxp1_2*rxp2_2))+(((4.9005e-12)*gconst3*gconst8*npy*r21))+(((-2.3287176e-17)*r20*rxp2_2)));
op[4]=((((9.70299e-18)*gconst1*npy*r20*r21))+(((-3.96e-5)*gconst0*npx*npy*rxp1_2))+((gconst3*gconst4*gconst8*rxp2_2))+(((-2.4257475e-17)*gconst9*r21*(npy*npy)))+(((9.9e-7)*gconst3*gconst4*gconst8*r21))+(((-16.0)*gconst10*gconst2*(rxp1_2*rxp1_2)))+(((-1.17612e-11)*gconst0*rxp2_2))+((gconst10*gconst3*gconst8*rxp2_2))+(((-2.0)*gconst11*gconst2*(rxp2_2*rxp2_2)))+(((4.0)*gconst0*rxp2_2*(npx*npx)))+(((-1.0)*gconst11*gconst8*(rxp2_2*rxp2_2)))+(((1.188e-5)*gconst2*npx*r21*rxp0_2))+(((3.9204e-12)*gconst8*r21*rxp0_2))+((gconst10*gconst2*gconst3*rxp2_2))+(((-1.9602e-11)*gconst10*gconst3*npy*r20))+(((-1.9602e-11)*gconst4*gconst9*npy*r20))+(((1.584e-5)*gconst10*npx*r20*rxp1_2))+(((-9.801e-12)*gconst4*gconst6*npy*r20))+(((-7.92e-6)*gconst0*npx*rxp2_2))+(((3.96e-5)*gconst6*npx*npy*rxp1_2))+(((-2.910897e-17)*gconst11*npy*r20*r21))+(((4.0)*gconst2*npx*rxp0_2*rxp2_2))+(((9.9e-7)*gconst2*gconst4*gconst9*r21))+(((-1.9602e-11)*gconst0*gconst7*npy*r20))+(((-1.17612e-11)*gconst6*rxp2_2))+(((-3.9204e-12)*gconst1*gconst11*(r20*r20)))+(((-4.9005e-11)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-1.584e-5)*gconst8*npx*r20*rxp1_2))+(((-6.27264e-11)*npy*r20*rxp2_2))+(((2.910897e-17)*gconst2*npy*r20*r21))+(((2.45025e-11)*gconst9*rxp2_2*(npy*npy)))+(((-3.96e-5)*gconst0*rxp0_2*(npy*npy)))+(((8.0)*gconst0*gconst10*npx*rxp0_2))+(((2.4257475e-17)*gconst3*r21*(npy*npy)))+(((-1.98e-6)*gconst2*gconst5*r21*rxp2_2))+(((7.8408e-12)*gconst6*npx*r21))+(((3.96e-6)*gconst10*gconst6*rxp0_2))+(((8.0)*gconst4*gconst8*(rxp0_2*rxp0_2)))+(((3.073907232e-23)*(r20*r20)))+(((1.9602e-12)*gconst11*gconst2*(r21*r21)))+(((-2.45025e-11)*gconst3*gconst6*(npy*npy)))+(((9.70299e-18)*gconst4*npy*r20*r21))+(((-1.56816e-11)*gconst10*r20*rxp1_2))+(((-1.56816e-11)*gconst4*r20*rxp1_2))+(((-3.9204e-12)*gconst1*gconst10*(r20*r20)))+(((-1.0)*gconst0*gconst10*gconst3*gconst7))+(((-9.801e-12)*gconst3*gconst8*npy*r20))+(((-16.0)*gconst4*gconst6*npy*rxp1_2))+(((1.584e-5)*gconst2*npy*r20*rxp0_2))+(((-3.9204e-12)*gconst4*gconst7*(r20*r20)))+((gconst5*gconst6*gconst7*rxp2_2))+(((3.168e-5)*gconst0*npx*npy*r20))+(((-9.801e-12)*gconst3*gconst7*npy*r20))+(((-1.0)*gconst1*gconst4*gconst6*gconst9))+(((3.96e-6)*gconst8*rxp0_2*rxp2_2))+(((4.80298005e-23)*(npy*npy)*(r21*r21)))+(((-3.96e-6)*gconst2*rxp0_2*rxp2_2))+(((-1.0)*gconst0*gconst1*gconst10*gconst9))+(((1.9602e-12)*gconst5*gconst8*(r21*r21)))+(((-4.0)*gconst10*gconst6*npx*rxp0_2))+(((1.584e-5)*gconst10*npy*r20*rxp0_2))+(((-2.45025e-11)*gconst0*gconst9*(npy*npy)))+(((1.584e-5)*gconst8*npy*r21*rxp1_2))+(((-15.9999999999755)*gconst6*rxp2_2*(npy*npy)))+(((4.0)*gconst8*npx*rxp0_2*rxp2_2))+(((1.9602e-10)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-9.801e-12)*gconst0*gconst10*npy*r20))+(((-9.9e-7)*gconst4*gconst8*gconst9*r21))+(((-1.584e-5)*gconst4*npx*r20*rxp1_2))+(((-9.70299e-18)*gconst7*npy*r20*r21))+(((-9.801e-12)*gconst5*gconst6*npy*r20))+(((3.13632e-11)*gconst0*npy*r20))+(((-4.0)*gconst10*gconst8*(rxp0_2*rxp0_2)))+(((-3.9204e-10)*(npy*npy)*(rxp1_2*rxp1_2)))+(((7.92e-5)*gconst10*npy*rxp0_2*rxp1_2))+(((2.9403e-11)*gconst5*npy*r20*rxp2_2))+(((2.9403e-11)*gconst2*npy*r20*rxp2_2))+(((6.27264e-11)*npx*npy*r20*r21))+(((9.801e-12)*gconst7*npy*r20*rxp2_2))+(((3.96e-5)*gconst6*rxp0_2*(npy*npy)))+(((-16.0)*gconst8*npy*rxp1_2*rxp2_2))+(((9.9e-7)*gconst0*gconst1*gconst11*r21))+(((-1.584e-5)*gconst2*npy*r21*rxp1_2))+(((-9.9e-7)*gconst1*gconst11*gconst6*r21))+(((-9.70299e-18)*gconst10*npy*r20*r21))+(((9.9e-7)*gconst10*gconst2*gconst3*r21))+((gconst1*gconst5*gconst6*rxp2_2))+(((-3.9204e-11)*gconst0*npy*rxp1_2))+(((-7.92e-5)*gconst2*npy*rxp0_2*rxp1_2))+(((7.92e-6)*gconst6*npx*rxp2_2))+(((-9.801e-12)*gconst1*gconst9*npy*r20))+(((-2.910897e-17)*gconst8*npy*r20*r21))+(((7.8408e-11)*r21*rxp0_2*(npy*npy)))+(((2.45025e-11)*gconst3*rxp2_2*(npy*npy)))+(((-3.9204e-12)*gconst5*gconst7*(r20*r20)))+(((-9.801e-12)*gconst0*gconst11*npy*r20))+((gconst0*gconst11*gconst7*rxp2_2))+(((-16.0)*gconst0*gconst10*npy*rxp1_2))+(((-7.92e-5)*gconst4*npy*rxp0_2*rxp1_2))+(((3.9204e-12)*gconst2*r21*rxp0_2))+(((-7.8408e-11)*npy*rxp1_2*rxp2_2))+(((-1.9602e-11)*gconst1*gconst6*npy*r20))+(((-9.801e-13)*gconst2*gconst5*(r21*r21)))+(((2.9403e-11)*gconst8*npy*r20*rxp2_2))+((gconst4*gconst8*gconst9*rxp2_2))+((gconst10*gconst2*gconst9*rxp2_2))+(((-1.0)*gconst1*gconst10*gconst3*gconst6))+(((1.584e-5)*gconst2*npx*r20*rxp1_2))+(((6.27263999996158e-11)*(npy*npy)*(r20*r20)))+(((-1.584e-5)*gconst4*npy*r20*rxp0_2))+(((2.9403e-11)*gconst11*npy*r20*rxp2_2))+(((-3.168e-5)*gconst6*npx*npy*r20))+(((9.9e-7)*gconst0*gconst5*gconst7*r21))+(((-3.9204e-11)*gconst6*npy*rxp1_2))+(((-9.9e-7)*gconst0*gconst11*gconst7*r21))+(((4.0)*gconst6*rxp2_2*(npx*npx)))+(((-1.188e-5)*gconst8*npx*r21*rxp0_2))+(((-15.9999999999755)*gconst0*rxp2_2*(npy*npy)))+(((1.56816e-11)*gconst8*r20*rxp1_2))+(((-9.801e-13)*gconst11*gconst8*(r21*r21)))+(((9.801e-12)*gconst10*npy*r20*rxp2_2))+(((-2.0)*gconst5*gconst8*(rxp2_2*rxp2_2)))+(((-3.9204e-12)*gconst11*gconst2*(r20*r20)))+(((-3.13632e-11)*(npx*npx)*(r20*r20)))+(((-1.0)*gconst0*gconst4*gconst7*gconst9))+((gconst1*gconst11*gconst6*rxp2_2))+((gconst2*gconst4*gconst9*rxp2_2))+(((3.13632e-11)*gconst6*npy*r20))+(((1.56816e-11)*gconst2*r20*rxp1_2))+((gconst0*gconst1*gconst11*rxp2_2))+(((-3.9204e-12)*gconst4*gconst8*(r20*r20)))+(((-3.881196e-18)*gconst0*r21))+(((9.9e-7)*gconst1*gconst5*gconst6*r21))+(((-16.0)*gconst2*npy*rxp1_2*rxp2_2))+(((8.0)*gconst4*gconst6*npx*rxp0_2))+(((-4.0)*gconst0*gconst4*npx*rxp0_2))+(((1.188e-5)*gconst0*r21*(npx*npx)))+(((-1.0)*gconst3*gconst4*gconst6*gconst7))+(((-9.801e-12)*gconst2*gconst9*npy*r20))+(((-1.584e-5)*gconst8*npy*r20*rxp0_2))+(((9.801e-12)*gconst1*npy*r20*rxp2_2))+(((-1.188e-5)*gconst6*r21*(npx*npx)))+(((2.910897e-17)*gconst5*npy*r20*r21))+(((-9.9e-7)*gconst5*gconst6*gconst7*r21))+(((7.92e-5)*gconst8*npy*rxp0_2*rxp1_2))+(((-4.0)*gconst2*gconst4*(rxp0_2*rxp0_2)))+(((7.8408e-12)*gconst0*npx*r21))+(((-1.0)*gconst2*gconst5*(rxp2_2*rxp2_2)))+(((1.98e-6)*gconst11*gconst8*r21*rxp2_2))+(((-9.9e-7)*gconst10*gconst2*gconst9*r21))+(((-3.96e-6)*gconst0*gconst4*rxp0_2))+(((8.0)*gconst10*gconst2*(rxp0_2*rxp0_2)))+(((9.801e-12)*gconst4*npy*r20*rxp2_2))+(((3.881196e-18)*gconst6*r21))+(((-1.58399999999757e-5)*gconst0*r21*(npy*npy)))+(((-9.9e-7)*gconst10*gconst3*gconst8*r21))+(((-3.9204e-12)*gconst10*gconst2*(r20*r20)))+(((-3.9204e-12)*gconst5*gconst8*(r20*r20)))+(((7.8408e-11)*npx*npy*r21*rxp1_2))+(((-16.0)*gconst4*gconst8*(rxp1_2*rxp1_2)))+(((1.58399999999757e-5)*gconst6*r21*(npy*npy)))+((gconst0*gconst5*gconst7*rxp2_2)));
op[5]=((((7.92e-6)*gconst8*npx*r20*rxp0_2))+(((3.96e-5)*gconst0*npx*npy*rxp0_2))+(((-4.9005e-12)*gconst0*gconst11*npy*r21))+(((-3.881196e-17)*gconst1*npy*(r20*r20)))+(((-4.95e-6)*gconst11*npy*(rxp2_2*rxp2_2)))+(((-16.0)*gconst2*gconst4*rxp0_2*rxp1_2))+(((3.96e-6)*gconst5*gconst8*r20*rxp2_2))+(((1.940598e-17)*npy*r21*rxp0_2))+(((3.96e-6)*gconst2*gconst5*r20*rxp2_2))+(((-3.881196e-17)*gconst2*npy*(r20*r20)))+(((-1.584e-5)*gconst6*npy*rxp2_2))+(((7.8408e-12)*gconst8*r21*rxp1_2))+(((-2.35224e-11)*r20*r21*(npx*npx)))+(((3.96e-6)*gconst11*gconst2*r20*rxp2_2))+(((-1.98e-6)*gconst0*gconst4*gconst7*r20))+(((-7.92e-6)*gconst0*gconst4*rxp1_2))+(((-4.95e-6)*gconst3*gconst4*gconst6*npy))+(((-3.881196e-17)*gconst5*npy*(r20*r20)))+(((4.95e-6)*gconst0*gconst7*npy*rxp2_2))+(((7.8408e-11)*r21*rxp1_2*(npy*npy)))+(((6.2099136e-17)*npy*(r20*r20)))+(((-1.98e-6)*gconst0*gconst1*gconst10*r20))+(((4.95e-6)*gconst0*gconst1*npy*rxp2_2))+(((-7.8408e-12)*gconst8*r20*rxp0_2))+(((-4.95e-6)*gconst0*gconst4*gconst9*npy))+(((9.70299e-18)*gconst5*npy*(r21*r21)))+(((7.68476808e-24)*r20*r21))+(((3.1679999999903e-5)*gconst0*r20*(npy*npy)))+(((1.5524784e-17)*npx*r20*r21))+(((1.98e-6)*gconst4*gconst8*r20*rxp2_2))+(((7.762392e-18)*gconst6*r20))+(((8.0)*gconst8*npx*rxp1_2*rxp2_2))+(((4.95e-6)*gconst0*gconst11*npy*rxp2_2))+(((-1.9602e-12)*gconst5*gconst7*r20*r21))+(((-1.98e-5)*gconst8*npy*(rxp0_2*rxp0_2)))+(((-4.95e-6)*gconst0*gconst10*gconst3*npy))+(((4.95e-6)*gconst3*gconst4*npy*rxp2_2))+(((-4.851495e-18)*gconst11*npy*(r21*r21)))+(((1.584e-5)*gconst2*npx*r21*rxp1_2))+(((-1.584e-5)*gconst2*rxp1_2*rxp2_2))+(((3.9204e-10)*rxp0_2*rxp1_2*(npy*npy)))+(((8.0)*gconst4*gconst6*npx*rxp1_2))+(((-4.9005e-12)*gconst4*gconst9*npy*r21))+(((3.13631999998079e-11)*r20*r21*(npy*npy)))+(((1.584e-5)*gconst2*npy*r21*rxp0_2))+(((-1.98e-6)*gconst10*gconst2*gconst3*r20))+(((1.98e-6)*gconst5*gconst7*r20*rxp2_2))+(((-1.9602e-12)*gconst10*gconst2*r20*r21))+(((-8.0)*gconst0*gconst4*npx*rxp1_2))+(((-1.584e-5)*gconst2*npx*r20*rxp0_2))+(((4.9005e-12)*gconst3*gconst4*npy*r21))+(((3.168e-5)*gconst0*npx*npy*r21))+(((8.0)*gconst0*gconst10*npy*rxp0_2))+(((-1.9602e-12)*gconst1*gconst11*r20*r21))+(((-3.9204e-12)*gconst5*gconst8*r20*r21))+(((-1.98e-5)*gconst10*npy*(rxp0_2*rxp0_2)))+(((-1.98e-6)*gconst1*gconst10*gconst3*r20))+(((-1.98e-5)*gconst6*npx*npy*rxp0_2))+(((-5.8806e-11)*npx*npy*r21*rxp0_2))+(((4.9005e-12)*gconst0*gconst5*npy*r21))+(((4.9005e-12)*gconst0*gconst1*npy*r21))+(((-4.95e-6)*gconst1*gconst3*gconst6*npy))+(((1.56816e-11)*gconst6*npy*r21))+(((3.96e-5)*gconst4*npy*(rxp0_2*rxp0_2)))+(((4.95e-6)*gconst2*gconst9*npy*rxp2_2))+(((-7.92e-6)*gconst8*rxp1_2*rxp2_2))+(((3.96e-5)*gconst2*npy*(rxp0_2*rxp0_2)))+(((-3.168e-5)*gconst4*npy*r20*rxp1_2))+(((4.95e-6)*gconst4*gconst9*npy*rxp2_2))+(((-4.95e-6)*gconst0*gconst3*gconst7*npy))+(((4.95e-6)*gconst5*gconst6*npy*rxp2_2))+(((-4.9005e-12)*gconst3*gconst8*npy*r21))+(((-4.95e-6)*gconst8*npy*(rxp2_2*rxp2_2)))+(((4.95e-6)*gconst0*gconst5*npy*rxp2_2))+(((-7.92e-6)*gconst10*npx*r20*rxp0_2))+(((-1.584e-5)*gconst6*npx*npy*r21))+(((4.95e-6)*gconst2*gconst3*npy*rxp2_2))+(((4.95e-6)*gconst3*gconst8*npy*rxp2_2))+(((-6.27264e-11)*npx*npy*(r20*r20)))+(((3.9204e-12)*gconst2*gconst5*r20*r21))+(((16.0)*gconst4*gconst8*rxp0_2*rxp1_2))+(((-1.584e-5)*gconst0*r20*(npx*npx)))+(((4.9005e-12)*gconst2*gconst3*npy*r21))+(((-3.9204e-12)*gconst11*gconst2*r20*r21))+(((-1.98e-6)*gconst1*gconst4*gconst9*r20))+(((-4.95e-6)*gconst0*gconst1*gconst9*npy))+(((-7.92e-5)*gconst2*npy*(rxp1_2*rxp1_2)))+(((4.95e-6)*gconst1*gconst6*npy*rxp2_2))+(((8.0)*gconst8*npy*rxp0_2*rxp2_2))+(((-3.881196e-17)*gconst4*npy*(r20*r20)))+(((-4.9005e-12)*gconst0*gconst7*npy*r21))+(((9.801e-12)*gconst8*npy*r21*rxp2_2))+(((-4.9005e-12)*gconst2*gconst9*npy*r21))+(((-4.9005e-12)*gconst1*gconst6*npy*r21))+(((1.56816e-11)*npx*r20*rxp2_2))+(((7.92e-6)*gconst6*r20*(npx*npx)))+(((1.9602e-12)*gconst2*gconst4*r20*r21))+(((-9.70299e-17)*gconst3*r20*(npy*npy)))+(((-1.98e-6)*gconst1*gconst4*gconst6*r20))+(((-7.92e-5)*gconst4*npy*(rxp1_2*rxp1_2)))+(((-7.92e-5)*rxp1_2*rxp2_2*(npy*npy)))+(((-7.92e-6)*gconst4*gconst6*rxp1_2))+(((1.98e-6)*gconst10*gconst2*r20*rxp2_2))+(((-3.16799999998059e-5)*r20*rxp2_2*(npy*npy)))+(((-7.92e-6)*gconst8*npy*r21*rxp0_2))+(((-4.9005e-12)*gconst10*gconst3*npy*r21))+(((1.5524784e-17)*gconst0*r20))+(((-4.9005e-12)*gconst5*gconst6*npy*r21))+(((8.0)*gconst0*gconst10*npx*rxp1_2))+(((-9.9e-6)*gconst2*npy*(rxp2_2*rxp2_2)))+(((-1.98e-6)*gconst3*gconst4*gconst7*r20))+(((16.0)*gconst10*gconst2*rxp0_2*rxp1_2))+(((-1.9602e-12)*gconst4*gconst8*r20*r21))+(((1.9602e-11)*npy*rxp0_2*rxp2_2))+(((9.801e-12)*gconst11*npy*r21*rxp2_2))+(((-9.9e-6)*gconst5*npy*(rxp2_2*rxp2_2)))+(((7.8408e-12)*gconst10*r20*rxp0_2))+(((1.98e-5)*npx*npy*rxp0_2*rxp2_2))+(((1.584e-5)*gconst4*npx*r20*rxp0_2))+(((9.70299e-18)*gconst2*npy*(r21*r21)))+(((8.0)*gconst4*gconst6*npy*rxp0_2))+(((4.95e-6)*gconst10*gconst3*npy*rxp2_2))+(((1.98e-6)*gconst2*gconst4*r20*rxp2_2))+(((1.98e-6)*gconst1*gconst11*r20*rxp2_2))+(((-4.851495e-18)*gconst8*npy*(r21*r21)))+(((-1.98e-6)*gconst3*gconst4*gconst8*r20))+(((-3.168e-5)*gconst0*npy*rxp2_2))+(((-1.98e-6)*gconst1*gconst5*gconst6*r20))+(((-8.0)*gconst0*gconst4*npy*rxp0_2))+(((-1.56816e-11)*gconst6*npx*r20))+(((1.9602e-11)*gconst6*npy*rxp0_2))+(((-1.98e-6)*gconst2*gconst4*gconst9*r20))+(((-7.92e-6)*gconst8*npx*r21*rxp1_2))+(((-7.92e-6)*gconst0*gconst10*rxp1_2))+(((-7.92e-5)*gconst0*rxp1_2*(npy*npy)))+(((7.92e-6)*r20*rxp2_2*(npx*npx)))+(((1.98e-6)*gconst1*gconst5*r20*rxp2_2))+(((16.0)*gconst6*npx*npy*rxp2_2))+(((1.9602e-12)*gconst1*gconst5*r20*r21))+(((-1.98e-6)*gconst0*gconst5*gconst7*r20))+(((-1.98e-6)*gconst0*gconst1*gconst11*r20))+(((3.168e-5)*gconst2*npy*r20*rxp1_2))+(((-2.3287176e-17)*r20*rxp2_2)));
op[6]=(((gconst3*gconst4*gconst8*rxp2_2))+(((3.96e-6)*gconst6*r21*(npx*npx)))+(((-2.910897e-17)*gconst2*npy*r20*r21))+(((-4.0)*gconst8*npx*rxp0_2*rxp2_2))+(((-9.9e-7)*gconst0*gconst1*gconst11*r21))+(((-1.17612e-11)*gconst0*rxp2_2))+(((-3.9204e-11)*npy*rxp1_2*rxp2_2))+(((-9.9e-7)*gconst2*gconst4*gconst9*r21))+(((-16.0)*gconst2*gconst4*(rxp1_2*rxp1_2)))+(((4.0)*gconst0*rxp2_2*(npx*npx)))+(((-4.0)*gconst4*gconst8*(rxp0_2*rxp0_2)))+((gconst10*gconst2*gconst3*rxp2_2))+(((1.56816e-11)*(npx*npx)*(r20*r20)))+(((4.0)*gconst2*npx*rxp0_2*rxp2_2))+(((-9.801e-11)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-1.0)*gconst5*gconst8*(rxp2_2*rxp2_2)))+(((-9.801e-12)*gconst2*gconst3*npy*r20))+(((3.96e-5)*rxp0_2*rxp2_2*(npy*npy)))+((gconst0*gconst1*gconst5*rxp2_2))+(((-9.9e-7)*gconst3*gconst4*gconst8*r21))+(((-1.0)*gconst0*gconst1*gconst4*gconst9))+(((-1.56816e-11)*gconst4*r20*rxp1_2))+(((-2.910897e-17)*gconst5*npy*r20*r21))+(((4.851495e-17)*r21*rxp2_2*(npy*npy)))+(((3.96e-6)*gconst2*rxp0_2*rxp2_2))+(((-1.0)*gconst1*gconst3*gconst4*gconst6))+(((-9.70299e-18)*gconst1*npy*r20*r21))+(((-9.801e-12)*gconst0*gconst5*npy*r20))+(((3.96e-6)*gconst8*rxp0_2*rxp2_2))+(((-1.9602e-11)*gconst0*gconst1*npy*r20))+(((-1.0)*gconst11*gconst2*(rxp2_2*rxp2_2)))+(((-1.0)*gconst0*gconst1*gconst10*gconst3))+(((-1.9602e-11)*gconst3*gconst4*npy*r20))+(((3.168e-5)*npx*npy*r20*rxp2_2))+(((-1.188e-5)*gconst2*npx*r21*rxp0_2))+(((3.13632e-11)*gconst0*npy*r20))+(((-4.0)*gconst0*gconst10*npx*rxp0_2))+(((1.584e-5)*gconst4*npx*r20*rxp1_2))+(((2.9403e-11)*gconst5*npy*r20*rxp2_2))+(((1.536953616e-23)*(r20*r20)))+(((2.9403e-11)*gconst2*npy*r20*rxp2_2))+(((-3.13632e-11)*npx*npy*r20*r21))+((gconst1*gconst5*gconst6*rxp2_2))+(((-3.9204e-11)*gconst0*npy*rxp1_2))+(((-3.9204e-12)*gconst2*gconst5*(r20*r20)))+(((3.96e-5)*gconst0*rxp0_2*(npy*npy)))+(((7.92e-6)*gconst6*npx*rxp2_2))+(((3.1049568e-17)*npy*r20*r21))+(((-3.9204e-12)*gconst8*r21*rxp0_2))+(((-4.0)*gconst6*rxp2_2*(npx*npx)))+(((2.45025e-11)*gconst3*rxp2_2*(npy*npy)))+(((7.92e-6)*gconst0*npx*rxp2_2))+(((3.96e-5)*npx*npy*rxp1_2*rxp2_2))+(((-7.8408e-12)*gconst6*npx*r21))+(((-1.584e-5)*gconst2*npx*r20*rxp1_2))+(((3.96e-6)*gconst8*npx*r21*rxp0_2))+(((-1.0)*gconst0*gconst3*gconst4*gconst7))+(((1.98e-6)*gconst5*gconst8*r21*rxp2_2))+(((-2.45025e-11)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-1.188e-5)*gconst0*r21*(npx*npx)))+(((-3.9204e-12)*gconst2*gconst4*(r20*r20)))+(((3.9204e-12)*gconst2*r21*rxp0_2))+(((-9.70299e-18)*gconst4*npy*r20*r21))+(((-3.9204e-12)*gconst6*rxp2_2))+(((-3.1049568e-17)*npx*(r20*r20)))+(((-16.0)*gconst0*gconst4*npy*rxp1_2))+(((9.9e-7)*gconst0*gconst1*gconst5*r21))+(((-9.9e-7)*gconst10*gconst2*gconst3*r21))+(((-3.9204e-11)*npx*npy*r21*rxp1_2))+(((-9.9e-7)*gconst0*gconst5*gconst7*r21))+(((-9.801e-13)*gconst11*gconst2*(r21*r21)))+(((-4.0)*gconst4*gconst6*npx*rxp0_2))+(((9.9e-7)*gconst2*gconst3*gconst4*r21))+(((-2.0)*gconst2*gconst5*(rxp2_2*rxp2_2)))+(((-9.801e-12)*gconst0*gconst4*npy*r20))+(((1.58399999999757e-5)*gconst0*r21*(npy*npy)))+(((7.92e-5)*gconst2*npy*rxp0_2*rxp1_2))+(((-15.9999999999755)*gconst0*rxp2_2*(npy*npy)))+(((-9.9e-7)*gconst1*gconst5*gconst6*r21))+(((-2.401490025e-23)*(npy*npy)*(r21*r21)))+(((3.881196e-18)*gconst0*r21))+(((8.0)*gconst0*gconst4*npx*rxp0_2))+(((3.96e-6)*gconst4*gconst6*rxp0_2))+(((-4.0)*gconst10*gconst2*(rxp0_2*rxp0_2)))+((gconst2*gconst4*gconst9*rxp2_2))+(((1.98e-6)*gconst11*gconst2*r21*rxp2_2))+(((8.0)*gconst2*gconst4*(rxp0_2*rxp0_2)))+(((1.56816e-11)*gconst2*r20*rxp1_2))+(((1.9602e-12)*gconst2*gconst5*(r21*r21)))+((gconst0*gconst1*gconst11*rxp2_2))+(((1.584e-5)*gconst4*npy*r20*rxp0_2))+(((-9.801e-12)*gconst1*gconst3*npy*r20))+(((3.881196e-17)*npy*r21*rxp1_2))+(((-16.0)*gconst2*npy*rxp1_2*rxp2_2))+(((-3.168e-5)*gconst0*npx*npy*r20))+(((-9.801e-13)*gconst5*gconst8*(r21*r21)))+(((3.96e-6)*gconst0*gconst10*rxp0_2))+(((9.801e-12)*gconst1*npy*r20*rxp2_2))+((gconst2*gconst3*gconst4*rxp2_2))+(((-3.9204e-12)*gconst1*gconst5*(r20*r20)))+(((-2.4257475e-17)*gconst3*r21*(npy*npy)))+(((3.96e-5)*gconst0*npx*npy*rxp1_2))+(((-3.9204e-11)*r21*rxp0_2*(npy*npy)))+(((7.8408e-12)*gconst0*npx*r21))+(((-3.9204e-12)*gconst1*gconst4*(r20*r20)))+(((-1.584e-5)*gconst2*npy*r20*rxp0_2))+(((1.584e-5)*gconst2*npy*r21*rxp1_2))+(((9.801e-12)*gconst4*npy*r20*rxp2_2))+(((-2.45025e-11)*gconst0*gconst3*(npy*npy)))+(((3.881196e-18)*gconst6*r21))+(((-3.13632e-11)*npy*r20*rxp2_2))+((gconst0*gconst5*gconst7*rxp2_2))+(((7.92e-5)*gconst4*npy*rxp0_2*rxp1_2)));
IkReal x132=npx*npx;
IkReal x133=rxp2_2*rxp2_2;
IkReal x134=r21*r21;
IkReal x135=rxp0_2*rxp0_2;
IkReal x136=(gconst2*r21);
IkReal x137=((7.92e-6)*rxp1_2);
IkReal x138=((1.98e-6)*gconst5);
IkReal x139=((4.95e-6)*gconst1);
IkReal x140=(npy*rxp0_2);
IkReal x141=((1.98e-6)*gconst4);
IkReal x142=(npy*r21);
IkReal x143=(gconst0*gconst1);
IkReal x144=(gconst0*r20);
IkReal x145=(gconst0*gconst4);
IkReal x146=((1.56816e-11)*npx);
IkReal x147=((9.801e-12)*rxp2_2);
IkReal x148=((4.95e-6)*npy);
IkReal x149=((7.8408e-12)*r20);
IkReal x150=(gconst1*r20);
IkReal x151=(r20*rxp2_2);
IkReal x152=(npx*rxp0_2);
IkReal x153=(gconst3*gconst4);
IkReal x154=((1.98e-5)*npy);
IkReal x155=(npx*rxp2_2);
IkReal x156=(gconst2*rxp0_2);
IkReal x157=(npx*r21);
IkReal x158=(gconst2*rxp2_2);
IkReal x159=(gconst5*r21);
IkReal x160=(gconst2*r20);
IkReal x161=(gconst3*npy);
IkReal x162=(gconst0*rxp2_2);
IkReal x163=((8.0)*rxp1_2);
IkReal x164=(gconst0*npx);
IkReal x165=(gconst4*r20);
IkReal x166=(gconst2*gconst5);
IkReal x167=(npy*x162);
IkReal x168=(r20*x143);
IkReal x169=(gconst5*x133);
IkReal x170=(r21*x132);
IkReal x171=((7.92e-6)*x132);
IkReal x172=(gconst4*x135);
IkReal x173=((4.851495e-18)*npy*x134);
op[7]=((((-1.0)*x154*x172))+(((-7.92e-6)*x136*x140))+(((8.0)*x140*x145))+(((7.8408e-12)*rxp1_2*x136))+(((1.56816e-11)*gconst0*x142))+((gconst2*x141*x151))+(((-1.0)*x137*x145))+((gconst4*rxp0_2*x149))+((x144*x171))+((x139*x167))+(((-1.98e-5)*x140*x155))+(((-7.92e-6)*x152*x165))+(((8.0)*x140*x158))+(((-1.0)*gconst2*x135*x154))+(((-1.0)*x137*x158))+((gconst2*x155*x163))+(((7.68476808e-24)*r20*r21))+(((-1.0)*gconst3*x145*x148))+((x149*x170))+(((7.92e-6)*x152*x160))+(((-3.9204e-12)*gconst5*r20*x136))+(((-4.9005e-12)*gconst0*gconst5*x142))+(((-4.9005e-12)*x142*x143))+(((-1.98e-5)*x140*x164))+(((-1.584e-5)*x167))+(((-1.0)*x151*x171))+(((-1.0)*x144*x146))+(((1.9602e-11)*gconst0*x140))+(((1.9602e-11)*x140*x157))+(((-4.9005e-12)*x142*x153))+((npx*x145*x163))+(((-1.584e-5)*x142*x164))+(((1.9602e-11)*rxp2_2*x140))+(((-1.9602e-12)*x150*x159))+((rxp2_2*x148*x153))+(((-1.0)*x141*x168))+((gconst5*x142*x147))+((npy*x136*x147))+(((16.0)*gconst4*rxp1_2*x156))+(((7.762392e-18)*x144))+((x146*x151))+(((-1.0)*gconst5*x173))+((gconst5*x148*x162))+(((-1.0)*gconst2*x173))+(((-1.0)*x148*x169))+(((-1.0)*gconst3*x141*x160))+(((16.0)*gconst0*npy*x155))+(((-7.762392e-18)*x151))+(((-1.5524784e-17)*r20*x157))+(((-1.0)*x149*x156))+((gconst3*x148*x158))+(((-1.0)*gconst2*x133*x148))+(((-1.0)*x138*x168))+(((-1.940598e-17)*r21*x140))+(((3.96e-6)*x151*x166))+(((-1.0)*gconst0*x139*x161))+((rxp2_2*x138*x150))+(((-1.0)*gconst3*x141*x150))+(((-1.0)*npx*x136*x137))+(((-1.9602e-12)*x136*x165))+(((-4.9005e-12)*x136*x161)));
op[8]=((((3.96e-6)*rxp2_2*x156))+((x153*x158))+(((-3.9204e-12)*rxp0_2*x136))+(((-9.801e-13)*x134*x166))+((rxp2_2*x136*x138))+(((-1.0)*x143*x153))+(((-4.0)*x145*x152))+(((7.92e-6)*gconst0*x155))+(((-4.0)*x152*x158))+(((-1.0)*x133*x166))+(((-4.0)*gconst2*x172))+((gconst5*rxp2_2*x143))+(((3.96e-6)*gconst0*x170))+(((3.96e-6)*rxp0_2*x145))+(((-9.9e-7)*x136*x153))+(((-7.8408e-12)*gconst0*x157))+(((3.881196e-18)*gconst0*r21))+(((3.96e-6)*x136*x152))+(((-3.9204e-12)*x162))+(((-4.0)*x132*x162))+(((-9.9e-7)*x143*x159)));
polyroots8(op,zeror,numroots);
IkReal j5array[8], cj5array[8], sj5array[8], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[8]={true,true,true,true,true,true,true,true};
_nj5 = 8;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j4eval[2];
IkReal x174=cj5*cj5;
IkReal x175=((1010101.01010101)*npy);
IkReal x176=(cj5*sj5);
IkReal x177=((1020304050607.08)*rxp2_2);
IkReal x178=(cj5*npx);
IkReal x179=((1010101.01010101)*npx);
IkReal x180=(r20*sj5);
IkReal x181=(npy*sj5);
IkReal x182=((9.9e-7)*npx);
IkReal x183=((9.9e-7)*npy);
IkReal x184=(cj5*r21);
IkReal x185=(r20*x174);
IkReal x186=(r21*x174);
IkReal x187=(cj5*npz*rxp0_2);
IkReal x188=(npz*rxp1_2*sj5);
j4eval[0]=(((x177*x181))+(((1020304050607.08)*x187))+((r20*x176*x179))+(((1010101.01010101)*rxp2_2))+((x179*x186))+(((-1.0)*x177*x178))+(((-1.0)*x180))+(((-1.0)*x184))+((x175*x185))+(((-1020304050607.08)*x188))+(((-1.0)*r21*x175*x176))+(((-1.0)*r20*x175)));
j4eval[1]=IKsign(((((-1.0)*r21*x176*x183))+((r20*x176*x182))+(((9.9e-7)*rxp2_2))+(((-9.801e-13)*x184))+(((-9.801e-13)*x180))+(((-1.0)*x188))+x187+(((-1.0)*rxp2_2*x178))+((rxp2_2*x181))+((x183*x185))+(((-1.0)*r20*x183))+((x182*x186))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x189=cj5*cj5;
IkReal x190=(r20*sj5);
IkReal x191=(rxp1_2*sj5);
IkReal x192=((2.475e-6)*rxp0_2);
IkReal x193=((1.25)*pp);
IkReal x194=(cj5*rxp0_2);
IkReal x195=(cj5*npx);
IkReal x196=(cj5*r21);
IkReal x197=((1.2375e-6)*pp);
IkReal x198=(npy*sj5);
IkReal x199=((2.475e-6)*x195);
IkReal x200=((2.45025e-12)*npy*r20);
IkReal x201=((9.9e-7)*npy*r20);
IkReal x202=((2.475e-6)*npy*rxp1_2);
IkReal x203=(npx*r21*x189);
CheckValue<IkReal> x204=IKPowWithIntegerCheck(IKsign(((((9.9e-7)*rxp2_2))+(((-9.9e-7)*x196*x198))+(((9.9e-7)*x190*x195))+(((-9.801e-13)*x190))+(((-9.801e-13)*x196))+((x189*x201))+(((-1.0)*x201))+(((-1.0)*npz*x191))+(((9.9e-7)*x203))+((rxp2_2*x198))+(((-1.0)*rxp2_2*x195))+((npz*x194)))),-1);
if(!x204.valid){
continue;
}
CheckValue<IkReal> x205 = IKatan2WithCheck(IkReal(((((-1.0)*x196*x197))+(((2.45025e-12)*x203))+(((-1.0)*x190*x197))+(((3.39669e-18)*x190))+(((3.39669e-18)*x196))+((x189*x200))+(((-3.431e-12)*rxp2_2))+(((-1.0)*x200))+(((2.45025e-12)*x190*x195))+(((2.475e-6)*rxp2_2*x198))+(((-1.0)*rxp2_2*x199))+((rxp2_2*x193))+(((-2.45025e-12)*x196*x198)))),IkReal((((cj5*x192*x198))+(((-3.431e-12)*x194))+((x193*x194))+(((-1.0)*x191*x193))+((x189*x202))+(((-1.0)*x202))+(((3.431e-12)*x191))+((x191*x199))+(((-1.0)*npx*x189*x192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x204.value)))+(x205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x206=IKcos(j4);
IkReal x207=IKsin(j4);
IkReal x208=(npy*sj5);
IkReal x209=(cj5*npx);
IkReal x210=((1.0)*x207);
IkReal x211=((9.9e-7)*x206);
evalcond[0]=(((rxp2_2*x206))+(((-1.0)*r20*sj5*x211))+((rxp1_2*sj5*x207))+(((-1.0)*cj5*rxp0_2*x210))+(((-1.0)*cj5*r21*x211)));
evalcond[1]=((-3.431e-12)+(((2.475e-6)*x208))+(((-1.0)*npz*x206))+(((-2.475e-6)*x209))+(((-9.9e-7)*x207))+(((-1.0)*x208*x210))+((x207*x209))+(((1.25)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[1];
j0eval[0]=((((-1.0)*cj5*r10))+(((1010101.01010101)*py))+((r11*sj5)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
j0eval[0]=(((r11*sj4*sj5))+((cj4*r12))+(((-1.0)*cj5*r10*sj4)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x212=((1.0)*cj4);
IkReal x213=((1010101.01010101)*sj4);
j0eval[0]=((((-1.0)*r00*sj5*x212))+(((-1.0)*cj5*r01*x212))+(((1010101.01010101)*cj4*rxp2_0))+((rxp1_0*sj5*x213))+(((-1.0)*cj5*rxp0_0*x213)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x214=((1.0)+(((-1.0)*(r12*r12))));
if((x214) < -0.00001)
continue;
IkReal x215=IKabs(IKsqrt(x214));
IkReal x222 = x214;
if(IKabs(x222)==0){
continue;
}
IkReal x216=pow(x222,-0.5);
IkReal x217=(r10*x216);
IkReal x218=(r11*x216);
CheckValue<IkReal> x223=IKPowWithIntegerCheck(x215,-1);
if(!x223.valid){
continue;
}
IkReal x219=x223.value;
IkReal x220=((1010101.01010101)*py*x219);
if((((1.0)+(((-1020304050607.08)*(py*py)*(x219*x219))))) < -0.00001)
continue;
IkReal x221=IKsqrt(((1.0)+(((-1020304050607.08)*(py*py)*(x219*x219)))));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x224=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x224.valid){
continue;
}
if( (((1010101.01010101)*py*(x224.value))) < -1-IKFAST_SINCOS_THRESH || (((1010101.01010101)*py*(x224.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x225 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x225.valid){
continue;
}
IkReal gconst28=((((-1.0)*(IKasin(((1010101.01010101)*py*(x224.value))))))+(((-1.0)*(x225.value))));
IkReal gconst29=((((-1.0)*x218*x220))+((x217*x221)));
IkReal gconst30=(((x218*x221))+((x217*x220)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x226=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x226.valid){
continue;
}
if( (((1010101.01010101)*py*(x226.value))) < -1-IKFAST_SINCOS_THRESH || (((1010101.01010101)*py*(x226.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x227 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x227.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin(((1010101.01010101)*py*(x226.value))))+(x227.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x228=gconst30*gconst30;
IkReal x229=gconst29*gconst29;
IkReal x230=((7.92e-6)*px);
IkReal x231=(gconst29*r01);
IkReal x232=(gconst30*r10);
IkReal x233=(gconst29*r11);
IkReal x234=((7.92e-6)*py);
IkReal x235=(gconst30*r00);
IkReal x236=((3.9204e-12)*x229);
IkReal x237=((3.9204e-12)*x228);
CheckValue<IkReal> x244=IKPowWithIntegerCheck(((((9.9e-7)*x233))+py+(((-9.9e-7)*x232))),-1);
if(!x244.valid){
continue;
}
IkReal x238=x244.value;
IkReal x239=(px*x238);
IkReal x240=((9.9e-7)*x238);
IkReal x241=(x231*x240);
IkReal x242=(x235*x240);
if((((((-1.0)*x230*x235))+(((4.0)*(py*py)))+(((-7.8408e-12)*x232*x233))+((x233*x234))+((x237*(r10*r10)))+((x230*x231))+((x236*(r01*r01)))+((x237*(r00*r00)))+((x236*(r11*r11)))+(((4.0)*(px*px)))+(((-1.0)*x232*x234))+(((-7.8408e-12)*x231*x235)))) < -0.00001)
continue;
IkReal x243=((0.5)*x238*(IKsqrt(((((-1.0)*x230*x235))+(((4.0)*(py*py)))+(((-7.8408e-12)*x232*x233))+((x233*x234))+((x237*(r10*r10)))+((x230*x231))+((x236*(r01*r01)))+((x237*(r00*r00)))+((x236*(r11*r11)))+(((4.0)*(px*px)))+(((-1.0)*x232*x234))+(((-7.8408e-12)*x231*x235))))));
j0array[0]=((2.0)*(atan((x243+x242+(((-1.0)*x241))+(((-1.0)*x239))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan((x239+x243+x241+(((-1.0)*x242))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3761=((1.0)+(((-1.0)*(r12*r12))));
if((x3761) < -0.00001)
continue;
IkReal x3762=IKabs(IKsqrt(x3761));
IkReal x3770 = x3761;
if(IKabs(x3770)==0){
continue;
}
IkReal x3763=pow(x3770,-0.5);
IkReal x3764=(r10*x3763);
IkReal x3765=(r11*x3763);
CheckValue<IkReal> x3771=IKPowWithIntegerCheck(x3762,-1);
if(!x3771.valid){
continue;
}
IkReal x3766=x3771.value;
IkReal x3767=((1010101.01010101)*py*x3766);
if((((1.0)+(((-1020304050607.08)*(py*py)*(x3766*x3766))))) < -0.00001)
continue;
IkReal x3768=IKsqrt(((1.0)+(((-1020304050607.08)*(py*py)*(x3766*x3766)))));
IkReal x3769=((1.0)*x3768);
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x3772=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x3772.valid){
continue;
}
if( (((1010101.01010101)*py*(x3772.value))) < -1-IKFAST_SINCOS_THRESH || (((1010101.01010101)*py*(x3772.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x3773 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3773.valid){
continue;
}
IkReal gconst31=((3.14159265358979)+(IKasin(((1010101.01010101)*py*(x3772.value))))+(((-1.0)*(x3773.value))));
IkReal gconst32=((((-1.0)*x3764*x3769))+(((-1.0)*x3765*x3767)));
IkReal gconst33=((((-1.0)*x3765*x3769))+((x3764*x3767)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x3774=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x3774.valid){
continue;
}
if( (((1010101.01010101)*py*(x3774.value))) < -1-IKFAST_SINCOS_THRESH || (((1010101.01010101)*py*(x3774.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x3775 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3775.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(((1010101.01010101)*py*(x3774.value))))))+(x3775.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x3776=gconst32*gconst32;
IkReal x3777=gconst33*gconst33;
IkReal x3778=((7.92e-6)*py);
IkReal x3779=(gconst33*r10);
IkReal x3780=(gconst33*r00);
IkReal x3781=(gconst32*r01);
IkReal x3782=(gconst32*r11);
IkReal x3783=((7.92e-6)*px);
IkReal x3784=((3.9204e-12)*x3777);
IkReal x3785=((3.9204e-12)*x3776);
CheckValue<IkReal> x3793=IKPowWithIntegerCheck(((((9.9e-7)*x3782))+py+(((-9.9e-7)*x3779))),-1);
if(!x3793.valid){
continue;
}
IkReal x3786=x3793.value;
IkReal x3787=(px*x3786);
IkReal x3788=((9.9e-7)*x3786);
IkReal x3789=(x3781*x3788);
IkReal x3790=(x3780*x3788);
IkReal x3791=(x3787+x3789);
if((((((-7.8408e-12)*x3780*x3781))+((x3785*(r11*r11)))+(((4.0)*(py*py)))+(((-7.8408e-12)*x3779*x3782))+((x3778*x3782))+(((-1.0)*x3778*x3779))+((x3784*(r10*r10)))+(((-1.0)*x3780*x3783))+(((4.0)*(px*px)))+((x3785*(r01*r01)))+((x3781*x3783))+((x3784*(r00*r00))))) < -0.00001)
continue;
IkReal x3792=((0.5)*x3786*(IKsqrt(((((-7.8408e-12)*x3780*x3781))+((x3785*(r11*r11)))+(((4.0)*(py*py)))+(((-7.8408e-12)*x3779*x3782))+((x3778*x3782))+(((-1.0)*x3778*x3779))+((x3784*(r10*r10)))+(((-1.0)*x3780*x3783))+(((4.0)*(px*px)))+((x3785*(r01*r01)))+((x3781*x3783))+((x3784*(r00*r00)))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x3791))+x3790+x3792))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x3790))+x3791+x3792))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3794=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3794.valid){
continue;
}
if((((((7.92e-6)*cj4*r01*rxp0_0*sj4*(cj5*cj5)))+(((3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((-7.92e-6)*r10*rxp2_1*sj5*(cj4*cj4)))+(((4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((7.8408e-12)*cj5*r00*r01*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_0*rxp2_0*sj4*sj5))+(((7.92e-6)*cj4*r11*rxp0_1*sj4*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp1_0*rxp1_0)))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_1*rxp2_1*sj4*sj5))+(((-8.0)*cj4*cj5*rxp0_1*rxp2_1*sj4))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-7.92e-6)*r00*rxp2_0*sj5*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp0_0*rxp2_0*sj4))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((3.9204e-12)*(cj4*cj4)*(r00*r00)))+(((-3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((7.92e-6)*cj4*r00*rxp1_0*sj4*(cj5*cj5)))+(((-7.92e-6)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((7.92e-6)*cj4*cj5*r00*rxp0_0*sj4*sj5))+(((3.9204e-12)*(cj4*cj4)*(r10*r10)))+(((-7.92e-6)*cj4*cj5*r01*rxp1_0*sj4*sj5))+(((7.8408e-12)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((7.92e-6)*cj4*cj5*r10*rxp0_1*sj4*sj5))+(((7.92e-6)*cj4*r10*rxp1_1*sj4*(cj5*cj5)))+(((-3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-7.92e-6)*cj4*r00*rxp1_0*sj4))+(((4.0)*(rxp1_1*rxp1_1)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp1_0*rxp1_0)))+(((-4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-7.92e-6)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-7.92e-6)*cj4*r10*rxp1_1*sj4))+(((-4.0)*(cj4*cj4)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-7.92e-6)*cj4*cj5*r11*rxp1_1*sj4*sj5))+(((4.0)*(cj5*cj5)*(rxp0_0*rxp0_0))))) < -0.00001)
continue;
CheckValue<IkReal> x3795=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3795.valid){
continue;
}
CheckValue<IkReal> x3796=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3796.valid){
continue;
}
CheckValue<IkReal> x3797=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3797.valid){
continue;
}
CheckValue<IkReal> x3798=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3798.valid){
continue;
}
CheckValue<IkReal> x3799=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3799.valid){
continue;
}
j0array[0]=((2.0)*(atan(((((0.5)*(x3794.value)*(IKsqrt(((((7.92e-6)*cj4*r01*rxp0_0*sj4*(cj5*cj5)))+(((3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((-7.92e-6)*r10*rxp2_1*sj5*(cj4*cj4)))+(((4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((7.8408e-12)*cj5*r00*r01*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_0*rxp2_0*sj4*sj5))+(((7.92e-6)*cj4*r11*rxp0_1*sj4*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp1_0*rxp1_0)))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_1*rxp2_1*sj4*sj5))+(((-8.0)*cj4*cj5*rxp0_1*rxp2_1*sj4))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-7.92e-6)*r00*rxp2_0*sj5*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp0_0*rxp2_0*sj4))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((3.9204e-12)*(cj4*cj4)*(r00*r00)))+(((-3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((7.92e-6)*cj4*r00*rxp1_0*sj4*(cj5*cj5)))+(((-7.92e-6)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((7.92e-6)*cj4*cj5*r00*rxp0_0*sj4*sj5))+(((3.9204e-12)*(cj4*cj4)*(r10*r10)))+(((-7.92e-6)*cj4*cj5*r01*rxp1_0*sj4*sj5))+(((7.8408e-12)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((7.92e-6)*cj4*cj5*r10*rxp0_1*sj4*sj5))+(((7.92e-6)*cj4*r10*rxp1_1*sj4*(cj5*cj5)))+(((-3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-7.92e-6)*cj4*r00*rxp1_0*sj4))+(((4.0)*(rxp1_1*rxp1_1)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp1_0*rxp1_0)))+(((-4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-7.92e-6)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-7.92e-6)*cj4*r10*rxp1_1*sj4))+(((-4.0)*(cj4*cj4)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-7.92e-6)*cj4*cj5*r11*rxp1_1*sj4*sj5))+(((4.0)*(cj5*cj5)*(rxp0_0*rxp0_0))))))))+(((-9.9e-7)*cj4*r10*sj5*(x3795.value)))+(((-1.0)*cj5*rxp0_1*sj4*(x3796.value)))+(((-9.9e-7)*cj4*cj5*r11*(x3797.value)))+(((1.0)*cj4*rxp2_1*(x3798.value)))+(((1.0)*rxp1_1*sj4*sj5*(x3799.value)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
CheckValue<IkReal> x3800=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3800.valid){
continue;
}
CheckValue<IkReal> x3801=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3801.valid){
continue;
}
CheckValue<IkReal> x3802=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3802.valid){
continue;
}
if((((((7.92e-6)*cj4*r01*rxp0_0*sj4*(cj5*cj5)))+(((3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((-7.92e-6)*r10*rxp2_1*sj5*(cj4*cj4)))+(((4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((7.8408e-12)*cj5*r00*r01*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_0*rxp2_0*sj4*sj5))+(((7.92e-6)*cj4*r11*rxp0_1*sj4*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp1_0*rxp1_0)))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_1*rxp2_1*sj4*sj5))+(((-8.0)*cj4*cj5*rxp0_1*rxp2_1*sj4))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-7.92e-6)*r00*rxp2_0*sj5*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp0_0*rxp2_0*sj4))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((3.9204e-12)*(cj4*cj4)*(r00*r00)))+(((-3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((7.92e-6)*cj4*r00*rxp1_0*sj4*(cj5*cj5)))+(((-7.92e-6)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((7.92e-6)*cj4*cj5*r00*rxp0_0*sj4*sj5))+(((3.9204e-12)*(cj4*cj4)*(r10*r10)))+(((-7.92e-6)*cj4*cj5*r01*rxp1_0*sj4*sj5))+(((7.8408e-12)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((7.92e-6)*cj4*cj5*r10*rxp0_1*sj4*sj5))+(((7.92e-6)*cj4*r10*rxp1_1*sj4*(cj5*cj5)))+(((-3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-7.92e-6)*cj4*r00*rxp1_0*sj4))+(((4.0)*(rxp1_1*rxp1_1)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp1_0*rxp1_0)))+(((-4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-7.92e-6)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-7.92e-6)*cj4*r10*rxp1_1*sj4))+(((-4.0)*(cj4*cj4)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-7.92e-6)*cj4*cj5*r11*rxp1_1*sj4*sj5))+(((4.0)*(cj5*cj5)*(rxp0_0*rxp0_0))))) < -0.00001)
continue;
CheckValue<IkReal> x3803=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3803.valid){
continue;
}
CheckValue<IkReal> x3804=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3804.valid){
continue;
}
CheckValue<IkReal> x3805=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3805.valid){
continue;
}
j0array[1]=((-2.0)*(atan(((((9.9e-7)*cj4*r10*sj5*(x3800.value)))+((cj5*rxp0_1*sj4*(x3801.value)))+(((0.5)*(x3802.value)*(IKsqrt(((((7.92e-6)*cj4*r01*rxp0_0*sj4*(cj5*cj5)))+(((3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((-7.92e-6)*r10*rxp2_1*sj5*(cj4*cj4)))+(((4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((7.8408e-12)*cj5*r00*r01*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_0*rxp2_0*sj4*sj5))+(((7.92e-6)*cj4*r11*rxp0_1*sj4*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp1_0*rxp1_0)))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_1*rxp2_1*sj4*sj5))+(((-8.0)*cj4*cj5*rxp0_1*rxp2_1*sj4))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-7.92e-6)*r00*rxp2_0*sj5*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp0_0*rxp2_0*sj4))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((3.9204e-12)*(cj4*cj4)*(r00*r00)))+(((-3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((7.92e-6)*cj4*r00*rxp1_0*sj4*(cj5*cj5)))+(((-7.92e-6)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((7.92e-6)*cj4*cj5*r00*rxp0_0*sj4*sj5))+(((3.9204e-12)*(cj4*cj4)*(r10*r10)))+(((-7.92e-6)*cj4*cj5*r01*rxp1_0*sj4*sj5))+(((7.8408e-12)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((7.92e-6)*cj4*cj5*r10*rxp0_1*sj4*sj5))+(((7.92e-6)*cj4*r10*rxp1_1*sj4*(cj5*cj5)))+(((-3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-7.92e-6)*cj4*r00*rxp1_0*sj4))+(((4.0)*(rxp1_1*rxp1_1)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp1_0*rxp1_0)))+(((-4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-7.92e-6)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-7.92e-6)*cj4*r10*rxp1_1*sj4))+(((-4.0)*(cj4*cj4)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-7.92e-6)*cj4*cj5*r11*rxp1_1*sj4*sj5))+(((4.0)*(cj5*cj5)*(rxp0_0*rxp0_0))))))))+(((-1.0)*cj4*rxp2_1*(x3803.value)))+(((9.9e-7)*cj4*cj5*r11*(x3804.value)))+(((-1.0)*rxp1_1*sj4*sj5*(x3805.value)))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x3806=cj4*cj4;
IkReal x3807=cj5*cj5;
IkReal x3808=r11*r11;
IkReal x3809=r01*r01;
IkReal x3810=r10*r10;
IkReal x3811=r00*r00;
IkReal x3812=(sj4*sj5);
IkReal x3813=((8.0)*cj4);
IkReal x3814=(cj5*sj4);
IkReal x3815=((4.0)*x3806);
IkReal x3816=((1.0)*x3814);
IkReal x3817=(x3807*x3809);
IkReal x3818=(x3807*x3810);
IkReal x3819=(x3807*x3811);
IkReal x3820=(x3807*x3808);
IkReal x3821=((8.0)*cj5*r10*r11*sj5);
IkReal x3822=((8.0)*cj5*r00*r01*sj5);
CheckValue<IkReal> x3829=IKPowWithIntegerCheck((((r11*x3812))+(((-1.0)*r10*x3816))+((cj4*r12))),-1);
if(!x3829.valid){
continue;
}
IkReal x3823=x3829.value;
IkReal x3824=(cj4*r02*x3823);
CheckValue<IkReal> x3830=IKPowWithIntegerCheck((((r11*sj4*sj5))+(((-1.0)*r10*x3816))+((cj4*r12))),-1);
if(!x3830.valid){
continue;
}
IkReal x3825=(r01*x3812*(x3830.value));
CheckValue<IkReal> x3831=IKPowWithIntegerCheck((((r11*x3812))+((cj4*r12))+(((-1.0)*cj5*r10*sj4))),-1);
if(!x3831.valid){
continue;
}
IkReal x3826=(r00*x3816*(x3831.value));
IkReal x3827=(x3825+x3824);
if(((((r01*r02*x3812*x3813))+(((-1.0)*r10*r12*x3813*x3814))+(((-1.0)*x3815*x3818))+(((-1.0)*x3815*x3819))+(((-1.0)*x3808*x3815))+((x3806*x3822))+((x3806*x3821))+(((-1.0)*x3821))+(((-1.0)*x3822))+(((-1.0)*x3809*x3815))+((x3815*x3820))+((x3815*x3817))+((x3815*(r12*r12)))+(((4.0)*x3808))+(((4.0)*x3809))+(((-4.0)*x3820))+(((-4.0)*x3817))+((r11*r12*x3812*x3813))+((x3815*(r02*r02)))+(((4.0)*x3818))+(((4.0)*x3819))+(((-1.0)*r00*r02*x3813*x3814)))) < -0.00001)
continue;
IkReal x3828=((0.5)*x3823*(IKsqrt((((r01*r02*x3812*x3813))+(((-1.0)*r10*r12*x3813*x3814))+(((-1.0)*x3815*x3818))+(((-1.0)*x3815*x3819))+(((-1.0)*x3808*x3815))+((x3806*x3822))+((x3806*x3821))+(((-1.0)*x3821))+(((-1.0)*x3822))+(((-1.0)*x3809*x3815))+((x3815*x3820))+((x3815*x3817))+((x3815*(r12*r12)))+(((4.0)*x3808))+(((4.0)*x3809))+(((-4.0)*x3820))+(((-4.0)*x3817))+((r11*r12*x3812*x3813))+((x3815*(r02*r02)))+(((4.0)*x3818))+(((4.0)*x3819))+(((-1.0)*r00*r02*x3813*x3814))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x3827))+x3826+x3828))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x3826))+x3827+x3828))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x3832=cj5*cj5;
IkReal x3833=r11*r11;
IkReal x3834=r01*r01;
IkReal x3835=(cj5*r10);
IkReal x3836=((7.92e-6)*py);
IkReal x3837=(r11*sj5);
IkReal x3838=(r01*sj5);
IkReal x3839=((7.92e-6)*px);
IkReal x3840=(cj5*r00);
IkReal x3841=((3.9204e-12)*x3833);
IkReal x3842=((3.9204e-12)*x3832);
CheckValue<IkReal> x3850=IKPowWithIntegerCheck(((((-9.9e-7)*x3835))+(((9.9e-7)*x3837))+py),-1);
if(!x3850.valid){
continue;
}
IkReal x3843=x3850.value;
IkReal x3844=(px*x3843);
IkReal x3845=((9.9e-7)*x3843);
IkReal x3846=(x3838*x3845);
IkReal x3847=(x3840*x3845);
IkReal x3848=(x3844+x3846);
if((((((4.0)*(py*py)))+(((3.9204e-12)*x3834))+((x3842*(r00*r00)))+(((-1.0)*x3839*x3840))+(((-1.0)*x3834*x3842))+x3841+(((-7.8408e-12)*x3838*x3840))+(((4.0)*(px*px)))+((x3836*x3837))+((x3842*(r10*r10)))+(((-1.0)*x3835*x3836))+((x3838*x3839))+(((-7.8408e-12)*x3835*x3837))+(((-1.0)*x3832*x3841)))) < -0.00001)
continue;
IkReal x3849=((0.5)*x3843*(IKsqrt(((((4.0)*(py*py)))+(((3.9204e-12)*x3834))+((x3842*(r00*r00)))+(((-1.0)*x3839*x3840))+(((-1.0)*x3834*x3842))+x3841+(((-7.8408e-12)*x3838*x3840))+(((4.0)*(px*px)))+((x3836*x3837))+((x3842*(r10*r10)))+(((-1.0)*x3835*x3836))+((x3838*x3839))+(((-7.8408e-12)*x3835*x3837))+(((-1.0)*x3832*x3841))))));
j0array[0]=((2.0)*(atan((x3847+x3849+(((-1.0)*x3848))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan((x3849+x3848+(((-1.0)*x3847))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x245=((1.0)*cj0);
IkReal x246=((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5)));
j3eval[0]=x246;
j3eval[1]=IKsign(x246);
j3eval[2]=((IKabs(((((-1.0)*r20*sj5*x245))+(((-1.0)*cj5*r21*x245)))))+(IKabs((((cj0*cj4*cj5*r20))+(((-1.0)*cj4*r21*sj5*x245))+((cj0*r22*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x247=((1.0)*sj5);
IkReal x248=(r20*sj0);
IkReal x249=((1.0)*r21*sj0);
IkReal x250=((((-1.0)*r11*sj4*x247))+((cj5*r10*sj4))+(((-1.0)*cj4*r12)));
j3eval[0]=x250;
j3eval[1]=((IKabs(((((-1.0)*cj4*r21*sj0*x247))+((r22*sj0*sj4))+((cj4*cj5*x248)))))+(IKabs(((((-1.0)*cj5*x249))+(((-1.0)*x247*x248))))));
j3eval[2]=IKsign(x250);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x251=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)));
j3eval[0]=x251;
j3eval[1]=IKsign(x251);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x252=((1.0)*cj5);
IkReal x253=((1.0)*sj5);
IkReal x254=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x252)));
j3eval[0]=x254;
j3eval[1]=((IKabs(((((-1.0)*r00*x253))+(((-1.0)*r01*x252)))))+(IKabs((((r02*sj4))+((cj4*cj5*r00))+(((-1.0)*cj4*r01*x253))))));
j3eval[2]=IKsign(x254);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x255=((1.0)*sj5);
IkReal x256=((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*x255)));
j3eval[0]=x256;
j3eval[1]=((IKabs((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x255)))))+(IKabs(((((-1.0)*r20*x255))+(((-1.0)*cj5*r21))))));
j3eval[2]=IKsign(x256);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x257=cj4*cj4;
IkReal x258=cj5*cj5;
IkReal x259=r10*r10;
IkReal x260=r11*r11;
IkReal x261=r12*r12;
IkReal x262=(r11*sj5);
IkReal x263=((1.0)*r10);
IkReal x264=(r12*sj4);
IkReal x265=((1.0)*x259);
IkReal x266=((2.0)*cj5*r10);
IkReal x267=(x258*x260);
IkReal x268=((((-1.0)*x262*x266))+(((-1.0)*x267))+(((-1.0)*x261))+(((-1.0)*cj4*x264*x266))+((x257*x261))+((x257*x267))+(((2.0)*cj4*x262*x264))+(((-1.0)*x257*x258*x265))+(((-1.0)*x265))+(((-1.0)*x257*x260))+((x257*x262*x266))+((x258*x259)));
j3eval[0]=x268;
j3eval[1]=IKsign(x268);
j3eval[2]=((IKabs(((((-1.0)*x264))+((cj4*x262))+(((-1.0)*cj4*cj5*x263)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x263))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x269=cj4*cj4;
IkReal x270=cj5*cj5;
IkReal x271=r10*r10;
IkReal x272=r11*r11;
IkReal x273=r12*r12;
IkReal x274=(r11*sj5);
IkReal x275=((1.0)*cj5);
IkReal x276=(r12*sj4);
IkReal x277=((1.0)*x271);
IkReal x278=((2.0)*cj5*r10);
IkReal x279=(x270*x272);
CheckValue<IkReal> x280=IKPowWithIntegerCheck(IKsign(((((-1.0)*x269*x270*x277))+(((-1.0)*x274*x278))+(((-1.0)*cj4*x276*x278))+(((-1.0)*x279))+(((-1.0)*x273))+((x270*x271))+((x269*x274*x278))+(((-1.0)*x277))+(((-1.0)*x269*x272))+((x269*x273))+((x269*x279))+(((2.0)*cj4*x274*x276)))),-1);
if(!x280.valid){
continue;
}
CheckValue<IkReal> x281 = IKatan2WithCheck(IkReal((((cj4*x274))+(((-1.0)*x276))+(((-1.0)*cj4*r10*x275)))),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x281.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x280.value)))+(x281.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x282=IKsin(j3);
IkReal x283=IKcos(j3);
IkReal x284=(r10*sj5);
IkReal x285=(cj4*sj5);
IkReal x286=(cj5*r11);
IkReal x287=(cj4*cj5);
IkReal x288=(r12*sj4);
IkReal x289=((1.0)*x283);
IkReal x290=((1.0)*x282);
evalcond[0]=(((r11*x283*x285))+(((-1.0)*x288*x289))+(((-1.0)*r10*x287*x289))+((x282*x284))+((x282*x286)));
evalcond[1]=((((-1.0)*r22*sj4*x290))+(((-1.0)*r20*sj5*x289))+(((-1.0)*cj5*r21*x289))+((r21*x282*x285))+(((-1.0)*r20*x287*x290)));
evalcond[2]=(((r01*x282*x285))+(((-1.0)*r00*sj5*x289))+(((-1.0)*cj5*r01*x289))+(((-1.0)*r02*sj4*x290))+(((-1.0)*r00*x287*x290)));
evalcond[3]=((1.0)+((r11*x282*x285))+(((-1.0)*x284*x289))+(((-1.0)*x288*x290))+(((-1.0)*x286*x289))+(((-1.0)*r10*x287*x290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x291=((4.82499999988767e-6)*sj4);
IkReal x292=(r01*sj5);
IkReal x293=((0.999999999976719)*cj4);
IkReal x294=(cj5*r00);
IkReal x295=(r21*sj5);
IkReal x296=(cj5*r20);
IkReal x297=((0.999999999976719)*sj4);
IkReal x298=((4.82499999988767e-6)*cj4);
if( IKabs((((x291*x292))+(((-1.0)*x291*x294))+(((2.47499999994238e-6)*x296))+(((-1.0)*x296*x297))+(((-1.20624999997192e-5)*px))+(((-2.47499999994238e-6)*x295))+((x295*x297))+(((1.1941874999722e-11)*x294))+((r02*x298))+(((-1.1941874999722e-11)*x292))+(((-2.4999999999418)*pz))+((r22*x293)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x291*x295))+(((-1.0)*x291*x296))+(((2.4999999999418)*px))+(((2.47499999994238e-6)*x292))+(((-1.0)*r02*x293))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x294))+(((1.1941874999722e-11)*x296))+((x294*x297))+(((-1.1941874999722e-11)*x295))+((r22*x298))+(((-1.0)*x292*x297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x291*x292))+(((-1.0)*x291*x294))+(((2.47499999994238e-6)*x296))+(((-1.0)*x296*x297))+(((-1.20624999997192e-5)*px))+(((-2.47499999994238e-6)*x295))+((x295*x297))+(((1.1941874999722e-11)*x294))+((r02*x298))+(((-1.1941874999722e-11)*x292))+(((-2.4999999999418)*pz))+((r22*x293))))+IKsqr((((x291*x295))+(((-1.0)*x291*x296))+(((2.4999999999418)*px))+(((2.47499999994238e-6)*x292))+(((-1.0)*r02*x293))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x294))+(((1.1941874999722e-11)*x296))+((x294*x297))+(((-1.1941874999722e-11)*x295))+((r22*x298))+(((-1.0)*x292*x297))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x291*x292))+(((-1.0)*x291*x294))+(((2.47499999994238e-6)*x296))+(((-1.0)*x296*x297))+(((-1.20624999997192e-5)*px))+(((-2.47499999994238e-6)*x295))+((x295*x297))+(((1.1941874999722e-11)*x294))+((r02*x298))+(((-1.1941874999722e-11)*x292))+(((-2.4999999999418)*pz))+((r22*x293))), (((x291*x295))+(((-1.0)*x291*x296))+(((2.4999999999418)*px))+(((2.47499999994238e-6)*x292))+(((-1.0)*r02*x293))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x294))+(((1.1941874999722e-11)*x296))+((x294*x297))+(((-1.1941874999722e-11)*x295))+((r22*x298))+(((-1.0)*x292*x297))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x299=IKcos(j1);
IkReal x300=IKsin(j1);
IkReal x301=((0.4)*sj4);
IkReal x302=(r21*sj5);
IkReal x303=((0.4)*cj4);
IkReal x304=(cj5*r20);
IkReal x305=(r01*sj5);
IkReal x306=(cj5*r00);
IkReal x307=((9.9e-7)*x305);
IkReal x308=((1.93e-6)*x300);
IkReal x309=((0.4)*x299);
IkReal x310=((9.9e-7)*x306);
IkReal x311=((1.93e-6)*x299);
IkReal x312=((0.4)*x300);
IkReal x313=((9.9e-7)*x302);
IkReal x314=((9.9e-7)*x304);
IkReal x315=((0.4)*sj3*sj5);
IkReal x316=((0.4)*cj5*sj3);
IkReal x317=(x309+x310);
IkReal x318=(x308+x307+px);
IkReal x319=(x311+x313+x312);
evalcond[0]=(((x301*x306))+(((-1.0)*x301*x305))+(((-1.0)*r02*x303))+x318+(((-1.0)*x317)));
evalcond[1]=(((x301*x302))+(((-1.0)*x301*x304))+((r22*x303))+x314+(((-1.0)*pz))+(((-1.0)*x319)));
evalcond[2]=((((-1.0)*r21*x316))+(((-1.0)*r20*x315))+((cj3*r22*x301))+((cj3*x303*x304))+x318+(((-1.0)*x317))+(((-1.0)*cj3*x302*x303)));
evalcond[3]=((((-1.0)*cj3*x303*x306))+((cj3*x303*x305))+x319+((r01*x316))+(((-1.0)*x314))+pz+((r00*x315))+(((-1.0)*cj3*r02*x301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x320=(cj4*sj1);
IkReal x321=(cj1*sj4);
IkReal x322=((1.0)*cj5);
IkReal x323=(r21*sj5);
IkReal x324=(cj1*cj4);
IkReal x325=(sj1*sj4);
IkReal x326=(r01*sj4*sj5);
if( IKabs((((r02*x324))+(((-1.0)*x323*x325))+(((-1.0)*r00*x321*x322))+(((-1.0)*r22*x320))+((r01*sj5*x321))+((cj5*r20*x325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x320))+(((-1.0)*r20*x321*x322))+(((-1.0)*r00*x322*x325))+((r22*x324))+((r01*sj5*x325))+((x321*x323)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x324))+(((-1.0)*x323*x325))+(((-1.0)*r00*x321*x322))+(((-1.0)*r22*x320))+((r01*sj5*x321))+((cj5*r20*x325))))+IKsqr((((r02*x320))+(((-1.0)*r20*x321*x322))+(((-1.0)*r00*x322*x325))+((r22*x324))+((r01*sj5*x325))+((x321*x323))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x324))+(((-1.0)*x323*x325))+(((-1.0)*r00*x321*x322))+(((-1.0)*r22*x320))+((r01*sj5*x321))+((cj5*r20*x325))), (((r02*x320))+(((-1.0)*r20*x321*x322))+(((-1.0)*r00*x322*x325))+((r22*x324))+((r01*sj5*x325))+((x321*x323))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x327=IKcos(j2);
IkReal x328=IKsin(j2);
IkReal x329=((1.0)*cj3);
IkReal x330=(cj5*r00);
IkReal x331=((1.0)*cj4);
IkReal x332=(r01*sj5);
IkReal x333=((1.0)*sj4);
IkReal x334=(cj5*sj3);
IkReal x335=(cj5*r20);
IkReal x336=(sj3*sj5);
IkReal x337=(r21*sj5);
IkReal x338=(cj1*x327);
IkReal x339=(cj3*cj4*sj5);
IkReal x340=(cj1*x328);
IkReal x341=(sj1*x328);
IkReal x342=(sj1*x327);
IkReal x343=((1.0)*x341);
evalcond[0]=(x342+x340+(((-1.0)*r02*x331))+((sj4*x330))+(((-1.0)*x332*x333)));
evalcond[1]=((((-1.0)*x333*x337))+x338+((sj4*x335))+(((-1.0)*x343))+(((-1.0)*r22*x331)));
evalcond[2]=((((-1.93e-6)*cj1))+(((9.9e-7)*x335))+(((-1.0)*pz))+(((0.4)*x338))+(((-9.9e-7)*x337))+(((-0.4)*x341))+(((-0.4)*sj1)));
evalcond[3]=((((9.9e-7)*x330))+(((0.4)*cj1))+(((0.4)*x340))+(((0.4)*x342))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x332)));
evalcond[4]=(((r01*x334))+((cj3*cj4*x332))+((r00*x336))+(((-1.0)*r02*sj4*x329))+x338+(((-1.0)*x343))+(((-1.0)*cj4*x329*x330)));
evalcond[5]=(((cj3*cj4*x337))+((r21*x334))+(((-1.0)*r22*sj4*x329))+((r20*x336))+(((-1.0)*cj4*x329*x335))+(((-1.0)*x342))+(((-1.0)*x340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x344=((1.0)*sj5);
CheckValue<IkReal> x345 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x344))+(((-1.0)*cj5*r21)))),IkReal((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x345.valid){
continue;
}
CheckValue<IkReal> x346=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*x344)))),-1);
if(!x346.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x345.value)+(((1.5707963267949)*(x346.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x347=IKsin(j3);
IkReal x348=IKcos(j3);
IkReal x349=(r10*sj5);
IkReal x350=(cj4*sj5);
IkReal x351=(cj5*r11);
IkReal x352=(cj4*cj5);
IkReal x353=(r12*sj4);
IkReal x354=((1.0)*x348);
IkReal x355=((1.0)*x347);
evalcond[0]=(((x347*x351))+((x347*x349))+((r11*x348*x350))+(((-1.0)*x353*x354))+(((-1.0)*r10*x352*x354)));
evalcond[1]=((((-1.0)*cj5*r21*x354))+(((-1.0)*r20*sj5*x354))+(((-1.0)*r22*sj4*x355))+((r21*x347*x350))+(((-1.0)*r20*x352*x355)));
evalcond[2]=((((-1.0)*r02*sj4*x355))+(((-1.0)*r00*x352*x355))+((r01*x347*x350))+(((-1.0)*r00*sj5*x354))+(((-1.0)*cj5*r01*x354)));
evalcond[3]=((1.0)+((r11*x347*x350))+(((-1.0)*x349*x354))+(((-1.0)*x353*x355))+(((-1.0)*r10*x352*x355))+(((-1.0)*x351*x354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x356=((4.82499999988767e-6)*sj4);
IkReal x357=(r01*sj5);
IkReal x358=((0.999999999976719)*cj4);
IkReal x359=(cj5*r00);
IkReal x360=(r21*sj5);
IkReal x361=(cj5*r20);
IkReal x362=((0.999999999976719)*sj4);
IkReal x363=((4.82499999988767e-6)*cj4);
if( IKabs((((x356*x357))+(((1.1941874999722e-11)*x359))+(((-1.0)*x361*x362))+(((-1.0)*x356*x359))+(((-2.47499999994238e-6)*x360))+(((-1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x361))+((r22*x358))+((x360*x362))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x357))+((r02*x363)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.1941874999722e-11)*x360))+(((1.1941874999722e-11)*x361))+(((2.4999999999418)*px))+(((-1.0)*x356*x361))+((x359*x362))+(((-2.47499999994238e-6)*x359))+((x356*x360))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x357))+(((-1.0)*r02*x358))+((r22*x363))+(((-1.0)*x357*x362)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x356*x357))+(((1.1941874999722e-11)*x359))+(((-1.0)*x361*x362))+(((-1.0)*x356*x359))+(((-2.47499999994238e-6)*x360))+(((-1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x361))+((r22*x358))+((x360*x362))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x357))+((r02*x363))))+IKsqr(((((-1.1941874999722e-11)*x360))+(((1.1941874999722e-11)*x361))+(((2.4999999999418)*px))+(((-1.0)*x356*x361))+((x359*x362))+(((-2.47499999994238e-6)*x359))+((x356*x360))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x357))+(((-1.0)*r02*x358))+((r22*x363))+(((-1.0)*x357*x362))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x356*x357))+(((1.1941874999722e-11)*x359))+(((-1.0)*x361*x362))+(((-1.0)*x356*x359))+(((-2.47499999994238e-6)*x360))+(((-1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x361))+((r22*x358))+((x360*x362))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x357))+((r02*x363))), ((((-1.1941874999722e-11)*x360))+(((1.1941874999722e-11)*x361))+(((2.4999999999418)*px))+(((-1.0)*x356*x361))+((x359*x362))+(((-2.47499999994238e-6)*x359))+((x356*x360))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x357))+(((-1.0)*r02*x358))+((r22*x363))+(((-1.0)*x357*x362))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x364=IKcos(j1);
IkReal x365=IKsin(j1);
IkReal x366=((0.4)*sj4);
IkReal x367=(r21*sj5);
IkReal x368=((0.4)*cj4);
IkReal x369=(cj5*r20);
IkReal x370=(r01*sj5);
IkReal x371=(cj5*r00);
IkReal x372=((9.9e-7)*x370);
IkReal x373=((1.93e-6)*x365);
IkReal x374=((0.4)*x364);
IkReal x375=((9.9e-7)*x371);
IkReal x376=((1.93e-6)*x364);
IkReal x377=((0.4)*x365);
IkReal x378=((9.9e-7)*x367);
IkReal x379=((9.9e-7)*x369);
IkReal x380=((0.4)*sj3*sj5);
IkReal x381=((0.4)*cj5*sj3);
IkReal x382=(x375+x374);
IkReal x383=(x373+x372+px);
IkReal x384=(x378+x377+x376);
evalcond[0]=((((-1.0)*r02*x368))+((x366*x371))+(((-1.0)*x366*x370))+x383+(((-1.0)*x382)));
evalcond[1]=(((x366*x367))+x379+(((-1.0)*pz))+(((-1.0)*x366*x369))+(((-1.0)*x384))+((r22*x368)));
evalcond[2]=((((-1.0)*cj3*x367*x368))+((cj3*x368*x369))+x383+(((-1.0)*r20*x380))+(((-1.0)*r21*x381))+(((-1.0)*x382))+((cj3*r22*x366)));
evalcond[3]=(((cj3*x368*x370))+(((-1.0)*x379))+x384+(((-1.0)*cj3*r02*x366))+pz+(((-1.0)*cj3*x368*x371))+((r00*x380))+((r01*x381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x385=(cj4*sj1);
IkReal x386=(cj1*sj4);
IkReal x387=((1.0)*cj5);
IkReal x388=(r21*sj5);
IkReal x389=(cj1*cj4);
IkReal x390=(sj1*sj4);
IkReal x391=(r01*sj4*sj5);
if( IKabs(((((-1.0)*r22*x385))+((r02*x389))+(((-1.0)*x388*x390))+(((-1.0)*r00*x386*x387))+((cj5*r20*x390))+((r01*sj5*x386)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x387*x390))+((r22*x389))+(((-1.0)*r20*x386*x387))+((x386*x388))+((r02*x385))+((r01*sj5*x390)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x385))+((r02*x389))+(((-1.0)*x388*x390))+(((-1.0)*r00*x386*x387))+((cj5*r20*x390))+((r01*sj5*x386))))+IKsqr(((((-1.0)*r00*x387*x390))+((r22*x389))+(((-1.0)*r20*x386*x387))+((x386*x388))+((r02*x385))+((r01*sj5*x390))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x385))+((r02*x389))+(((-1.0)*x388*x390))+(((-1.0)*r00*x386*x387))+((cj5*r20*x390))+((r01*sj5*x386))), ((((-1.0)*r00*x387*x390))+((r22*x389))+(((-1.0)*r20*x386*x387))+((x386*x388))+((r02*x385))+((r01*sj5*x390))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x392=IKcos(j2);
IkReal x393=IKsin(j2);
IkReal x394=((1.0)*cj3);
IkReal x395=(cj5*r00);
IkReal x396=((1.0)*cj4);
IkReal x397=(r01*sj5);
IkReal x398=((1.0)*sj4);
IkReal x399=(cj5*sj3);
IkReal x400=(cj5*r20);
IkReal x401=(sj3*sj5);
IkReal x402=(r21*sj5);
IkReal x403=(cj1*x392);
IkReal x404=(cj3*cj4*sj5);
IkReal x405=(cj1*x393);
IkReal x406=(sj1*x393);
IkReal x407=(sj1*x392);
IkReal x408=((1.0)*x406);
evalcond[0]=((((-1.0)*r02*x396))+x405+x407+(((-1.0)*x397*x398))+((sj4*x395)));
evalcond[1]=(x403+(((-1.0)*x398*x402))+(((-1.0)*r22*x396))+((sj4*x400))+(((-1.0)*x408)));
evalcond[2]=((((-1.93e-6)*cj1))+(((9.9e-7)*x400))+(((-1.0)*pz))+(((-0.4)*x406))+(((-9.9e-7)*x402))+(((-0.4)*sj1))+(((0.4)*x403)));
evalcond[3]=((((-9.9e-7)*x397))+(((0.4)*cj1))+(((-1.0)*px))+(((9.9e-7)*x395))+(((-1.93e-6)*sj1))+(((0.4)*x407))+(((0.4)*x405)));
evalcond[4]=((((-1.0)*r02*sj4*x394))+((cj3*cj4*x397))+((r01*x399))+((r00*x401))+x403+(((-1.0)*cj4*x394*x395))+(((-1.0)*x408)));
evalcond[5]=(((cj3*cj4*x402))+(((-1.0)*r22*sj4*x394))+((r20*x401))+((r21*x399))+(((-1.0)*cj4*x394*x400))+(((-1.0)*x405))+(((-1.0)*x407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x409=((1.0)*r01);
CheckValue<IkReal> x410=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)))),-1);
if(!x410.valid){
continue;
}
CheckValue<IkReal> x411 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*x409)))),IkReal((((r02*sj4))+(((-1.0)*cj4*sj5*x409))+((cj4*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x411.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x410.value)))+(x411.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x412=IKsin(j3);
IkReal x413=IKcos(j3);
IkReal x414=(r10*sj5);
IkReal x415=(cj4*sj5);
IkReal x416=(cj5*r11);
IkReal x417=(cj4*cj5);
IkReal x418=(r12*sj4);
IkReal x419=((1.0)*x413);
IkReal x420=((1.0)*x412);
evalcond[0]=((((-1.0)*x418*x419))+(((-1.0)*r10*x417*x419))+((r11*x413*x415))+((x412*x414))+((x412*x416)));
evalcond[1]=((((-1.0)*r22*sj4*x420))+(((-1.0)*cj5*r21*x419))+(((-1.0)*r20*x417*x420))+((r21*x412*x415))+(((-1.0)*r20*sj5*x419)));
evalcond[2]=((((-1.0)*cj5*r01*x419))+(((-1.0)*r00*x417*x420))+(((-1.0)*r02*sj4*x420))+(((-1.0)*r00*sj5*x419))+((r01*x412*x415)));
evalcond[3]=((1.0)+((r11*x412*x415))+(((-1.0)*x416*x419))+(((-1.0)*x418*x420))+(((-1.0)*r10*x417*x420))+(((-1.0)*x414*x419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x421=((4.82499999988767e-6)*sj4);
IkReal x422=(r01*sj5);
IkReal x423=((0.999999999976719)*cj4);
IkReal x424=(cj5*r00);
IkReal x425=(r21*sj5);
IkReal x426=(cj5*r20);
IkReal x427=((0.999999999976719)*sj4);
IkReal x428=((4.82499999988767e-6)*cj4);
if( IKabs(((((-1.0)*x421*x424))+((x425*x427))+((r02*x428))+(((-2.47499999994238e-6)*x425))+(((-1.20624999997192e-5)*px))+(((-1.0)*x426*x427))+((r22*x423))+(((2.47499999994238e-6)*x426))+(((1.1941874999722e-11)*x424))+(((-1.1941874999722e-11)*x422))+(((-2.4999999999418)*pz))+((x421*x422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x422*x427))+(((-1.0)*x421*x426))+((x424*x427))+(((2.4999999999418)*px))+(((-2.47499999994238e-6)*x424))+(((-1.20624999997192e-5)*pz))+(((-1.0)*r02*x423))+((r22*x428))+(((2.47499999994238e-6)*x422))+(((1.1941874999722e-11)*x426))+(((-1.1941874999722e-11)*x425))+((x421*x425)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x421*x424))+((x425*x427))+((r02*x428))+(((-2.47499999994238e-6)*x425))+(((-1.20624999997192e-5)*px))+(((-1.0)*x426*x427))+((r22*x423))+(((2.47499999994238e-6)*x426))+(((1.1941874999722e-11)*x424))+(((-1.1941874999722e-11)*x422))+(((-2.4999999999418)*pz))+((x421*x422))))+IKsqr(((((-1.0)*x422*x427))+(((-1.0)*x421*x426))+((x424*x427))+(((2.4999999999418)*px))+(((-2.47499999994238e-6)*x424))+(((-1.20624999997192e-5)*pz))+(((-1.0)*r02*x423))+((r22*x428))+(((2.47499999994238e-6)*x422))+(((1.1941874999722e-11)*x426))+(((-1.1941874999722e-11)*x425))+((x421*x425))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x421*x424))+((x425*x427))+((r02*x428))+(((-2.47499999994238e-6)*x425))+(((-1.20624999997192e-5)*px))+(((-1.0)*x426*x427))+((r22*x423))+(((2.47499999994238e-6)*x426))+(((1.1941874999722e-11)*x424))+(((-1.1941874999722e-11)*x422))+(((-2.4999999999418)*pz))+((x421*x422))), ((((-1.0)*x422*x427))+(((-1.0)*x421*x426))+((x424*x427))+(((2.4999999999418)*px))+(((-2.47499999994238e-6)*x424))+(((-1.20624999997192e-5)*pz))+(((-1.0)*r02*x423))+((r22*x428))+(((2.47499999994238e-6)*x422))+(((1.1941874999722e-11)*x426))+(((-1.1941874999722e-11)*x425))+((x421*x425))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x429=IKcos(j1);
IkReal x430=IKsin(j1);
IkReal x431=((0.4)*sj4);
IkReal x432=(r21*sj5);
IkReal x433=((0.4)*cj4);
IkReal x434=(cj5*r20);
IkReal x435=(r01*sj5);
IkReal x436=(cj5*r00);
IkReal x437=((9.9e-7)*x435);
IkReal x438=((1.93e-6)*x430);
IkReal x439=((0.4)*x429);
IkReal x440=((9.9e-7)*x436);
IkReal x441=((1.93e-6)*x429);
IkReal x442=((0.4)*x430);
IkReal x443=((9.9e-7)*x432);
IkReal x444=((9.9e-7)*x434);
IkReal x445=((0.4)*sj3*sj5);
IkReal x446=((0.4)*cj5*sj3);
IkReal x447=(x439+x440);
IkReal x448=(x438+x437+px);
IkReal x449=(x441+x443+x442);
evalcond[0]=((((-1.0)*x447))+(((-1.0)*x431*x435))+x448+(((-1.0)*r02*x433))+((x431*x436)));
evalcond[1]=((((-1.0)*x449))+(((-1.0)*x431*x434))+(((-1.0)*pz))+((r22*x433))+x444+((x431*x432)));
evalcond[2]=(((cj3*r22*x431))+(((-1.0)*x447))+((cj3*x433*x434))+x448+(((-1.0)*r21*x446))+(((-1.0)*r20*x445))+(((-1.0)*cj3*x432*x433)));
evalcond[3]=((((-1.0)*x444))+((cj3*x433*x435))+x449+pz+((r01*x446))+(((-1.0)*cj3*r02*x431))+((r00*x445))+(((-1.0)*cj3*x433*x436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x450=(cj4*sj1);
IkReal x451=(cj1*sj4);
IkReal x452=((1.0)*cj5);
IkReal x453=(r21*sj5);
IkReal x454=(cj1*cj4);
IkReal x455=(sj1*sj4);
IkReal x456=(r01*sj4*sj5);
if( IKabs((((r01*sj5*x451))+(((-1.0)*r22*x450))+((cj5*r20*x455))+(((-1.0)*r00*x451*x452))+((r02*x454))+(((-1.0)*x453*x455)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj5*x455))+(((-1.0)*r20*x451*x452))+((r02*x450))+((x451*x453))+(((-1.0)*r00*x452*x455))+((r22*x454)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj5*x451))+(((-1.0)*r22*x450))+((cj5*r20*x455))+(((-1.0)*r00*x451*x452))+((r02*x454))+(((-1.0)*x453*x455))))+IKsqr((((r01*sj5*x455))+(((-1.0)*r20*x451*x452))+((r02*x450))+((x451*x453))+(((-1.0)*r00*x452*x455))+((r22*x454))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj5*x451))+(((-1.0)*r22*x450))+((cj5*r20*x455))+(((-1.0)*r00*x451*x452))+((r02*x454))+(((-1.0)*x453*x455))), (((r01*sj5*x455))+(((-1.0)*r20*x451*x452))+((r02*x450))+((x451*x453))+(((-1.0)*r00*x452*x455))+((r22*x454))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x457=IKcos(j2);
IkReal x458=IKsin(j2);
IkReal x459=((1.0)*cj3);
IkReal x460=(cj5*r00);
IkReal x461=((1.0)*cj4);
IkReal x462=(r01*sj5);
IkReal x463=((1.0)*sj4);
IkReal x464=(cj5*sj3);
IkReal x465=(cj5*r20);
IkReal x466=(sj3*sj5);
IkReal x467=(r21*sj5);
IkReal x468=(cj1*x457);
IkReal x469=(cj3*cj4*sj5);
IkReal x470=(cj1*x458);
IkReal x471=(sj1*x458);
IkReal x472=(sj1*x457);
IkReal x473=((1.0)*x471);
evalcond[0]=((((-1.0)*x462*x463))+((sj4*x460))+x470+x472+(((-1.0)*r02*x461)));
evalcond[1]=((((-1.0)*x463*x467))+(((-1.0)*x473))+((sj4*x465))+x468+(((-1.0)*r22*x461)));
evalcond[2]=((((-0.4)*x471))+(((-1.93e-6)*cj1))+(((9.9e-7)*x465))+(((-9.9e-7)*x467))+(((-1.0)*pz))+(((0.4)*x468))+(((-0.4)*sj1)));
evalcond[3]=((((9.9e-7)*x460))+(((0.4)*cj1))+(((-9.9e-7)*x462))+(((-1.0)*px))+(((0.4)*x472))+(((0.4)*x470))+(((-1.93e-6)*sj1)));
evalcond[4]=((((-1.0)*r02*sj4*x459))+(((-1.0)*x473))+((cj3*cj4*x462))+x468+(((-1.0)*cj4*x459*x460))+((r01*x464))+((r00*x466)));
evalcond[5]=(((r20*x466))+((cj3*cj4*x467))+(((-1.0)*x470))+(((-1.0)*x472))+(((-1.0)*r22*sj4*x459))+(((-1.0)*cj4*x459*x465))+((r21*x464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x474=((1.0)*sj5);
IkReal x475=((1.0)*cj5);
IkReal x476=(((r01*sj4*sj5))+(((-1.0)*r00*sj4*x475))+((cj4*r02)));
j3eval[0]=x476;
j3eval[1]=IKsign(x476);
j3eval[2]=((IKabs(((((-1.0)*r21*x475))+(((-1.0)*r20*x474)))))+(IKabs(((((-1.0)*cj4*r21*x474))+((r22*sj4))+((cj4*cj5*r20))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x477=((1.0)*r01);
IkReal x478=((1.0)*sj5);
IkReal x479=(((cj5*r20*sj4))+(((-1.0)*r21*sj4*x478))+(((-1.0)*cj4*r22)));
j3eval[0]=x479;
j3eval[1]=((IKabs(((((-1.0)*cj4*sj5*x477))+((r02*sj4))+((cj4*cj5*r00)))))+(IKabs(((((-1.0)*cj5*x477))+(((-1.0)*r00*x478))))));
j3eval[2]=IKsign(x479);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x480=cj4*cj4;
IkReal x481=r10*r10;
IkReal x482=cj5*cj5;
IkReal x483=r11*r11;
IkReal x484=r12*r12;
IkReal x485=(r11*sj5);
IkReal x486=((1.0)*r10);
IkReal x487=(r12*sj4);
IkReal x488=((1.0)*x480);
IkReal x489=((2.0)*cj5*r10);
IkReal x490=(x482*x483);
IkReal x491=(x481*x482);
IkReal x492=((((-1.0)*x484*x488))+((x485*x489))+(((-1.0)*x488*x490))+((cj4*x487*x489))+(((-1.0)*x480*x485*x489))+(((-1.0)*x491))+((x480*x491))+x481+x484+x490+(((-2.0)*cj4*x485*x487))+((x480*x483)));
j3eval[0]=x492;
j3eval[1]=IKsign(x492);
j3eval[2]=((IKabs(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x486)))))+(IKabs(((((-1.0)*cj4*cj5*x486))+(((-1.0)*x487))+((cj4*x485))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x493=cj4*cj4;
IkReal x494=r10*r10;
IkReal x495=cj5*cj5;
IkReal x496=r11*r11;
IkReal x497=r12*r12;
IkReal x498=(r11*sj5);
IkReal x499=((1.0)*cj5);
IkReal x500=(r12*sj4);
IkReal x501=((1.0)*x493);
IkReal x502=((2.0)*cj5*r10);
IkReal x503=(x495*x496);
IkReal x504=(x494*x495);
CheckValue<IkReal> x505=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj4*x498*x500))+(((-1.0)*x493*x498*x502))+(((-1.0)*x497*x501))+((x493*x496))+(((-1.0)*x501*x503))+((x493*x504))+x497+x494+((x498*x502))+x503+((cj4*x500*x502))+(((-1.0)*x504)))),-1);
if(!x505.valid){
continue;
}
CheckValue<IkReal> x506 = IKatan2WithCheck(IkReal((((cj4*x498))+(((-1.0)*cj4*r10*x499))+(((-1.0)*x500)))),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x506.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x505.value)))+(x506.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x507=IKsin(j3);
IkReal x508=IKcos(j3);
IkReal x509=(r10*sj5);
IkReal x510=(cj4*sj5);
IkReal x511=(cj5*r11);
IkReal x512=(cj4*cj5);
IkReal x513=(r12*sj4);
IkReal x514=((1.0)*x508);
IkReal x515=((1.0)*x507);
evalcond[0]=(((x507*x511))+((x507*x509))+(((-1.0)*x513*x514))+(((-1.0)*r10*x512*x514))+((r11*x508*x510)));
evalcond[1]=((((-1.0)*r20*sj5*x514))+(((-1.0)*r20*x512*x515))+(((-1.0)*r22*sj4*x515))+((r21*x507*x510))+(((-1.0)*cj5*r21*x514)));
evalcond[2]=((((-1.0)*cj5*r01*x514))+(((-1.0)*r02*sj4*x515))+((r01*x507*x510))+(((-1.0)*r00*x512*x515))+(((-1.0)*r00*sj5*x514)));
evalcond[3]=((-1.0)+(((-1.0)*x511*x514))+(((-1.0)*x513*x515))+(((-1.0)*r10*x512*x515))+(((-1.0)*x509*x514))+((r11*x507*x510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x516=((4.82499999988767e-6)*sj4);
IkReal x517=(r01*sj5);
IkReal x518=((0.999999999976719)*cj4);
IkReal x519=(cj5*r00);
IkReal x520=(r21*sj5);
IkReal x521=(cj5*r20);
IkReal x522=((0.999999999976719)*sj4);
IkReal x523=((4.82499999988767e-6)*cj4);
if( IKabs(((((-1.1941874999722e-11)*x519))+(((-1.0)*x521*x522))+(((1.20624999997192e-5)*px))+(((-2.47499999994238e-6)*x520))+(((-1.0)*r02*x523))+(((-1.0)*x516*x517))+((x520*x522))+((x516*x519))+(((2.47499999994238e-6)*x521))+(((1.1941874999722e-11)*x517))+((r22*x518))+(((-2.4999999999418)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x516*x520))+(((2.47499999994238e-6)*x519))+((x517*x522))+(((-1.20624999997192e-5)*pz))+((r22*x523))+((r02*x518))+(((-1.0)*x516*x521))+(((-2.47499999994238e-6)*x517))+(((1.1941874999722e-11)*x521))+(((-1.1941874999722e-11)*x520))+(((-2.4999999999418)*px))+(((-1.0)*x519*x522)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.1941874999722e-11)*x519))+(((-1.0)*x521*x522))+(((1.20624999997192e-5)*px))+(((-2.47499999994238e-6)*x520))+(((-1.0)*r02*x523))+(((-1.0)*x516*x517))+((x520*x522))+((x516*x519))+(((2.47499999994238e-6)*x521))+(((1.1941874999722e-11)*x517))+((r22*x518))+(((-2.4999999999418)*pz))))+IKsqr((((x516*x520))+(((2.47499999994238e-6)*x519))+((x517*x522))+(((-1.20624999997192e-5)*pz))+((r22*x523))+((r02*x518))+(((-1.0)*x516*x521))+(((-2.47499999994238e-6)*x517))+(((1.1941874999722e-11)*x521))+(((-1.1941874999722e-11)*x520))+(((-2.4999999999418)*px))+(((-1.0)*x519*x522))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.1941874999722e-11)*x519))+(((-1.0)*x521*x522))+(((1.20624999997192e-5)*px))+(((-2.47499999994238e-6)*x520))+(((-1.0)*r02*x523))+(((-1.0)*x516*x517))+((x520*x522))+((x516*x519))+(((2.47499999994238e-6)*x521))+(((1.1941874999722e-11)*x517))+((r22*x518))+(((-2.4999999999418)*pz))), (((x516*x520))+(((2.47499999994238e-6)*x519))+((x517*x522))+(((-1.20624999997192e-5)*pz))+((r22*x523))+((r02*x518))+(((-1.0)*x516*x521))+(((-2.47499999994238e-6)*x517))+(((1.1941874999722e-11)*x521))+(((-1.1941874999722e-11)*x520))+(((-2.4999999999418)*px))+(((-1.0)*x519*x522))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x524=IKcos(j1);
IkReal x525=IKsin(j1);
IkReal x526=((1.0)*pz);
IkReal x527=((0.4)*sj4);
IkReal x528=(r21*sj5);
IkReal x529=((0.4)*cj4);
IkReal x530=(cj5*r20);
IkReal x531=(r01*sj5);
IkReal x532=(cj5*r00);
IkReal x533=((0.4)*x524);
IkReal x534=((9.9e-7)*x531);
IkReal x535=((9.9e-7)*x532);
IkReal x536=((1.93e-6)*x525);
IkReal x537=((9.9e-7)*x530);
IkReal x538=((1.93e-6)*x524);
IkReal x539=((0.4)*x525);
IkReal x540=((9.9e-7)*x528);
IkReal x541=((0.4)*sj3*sj5);
IkReal x542=((0.4)*cj5*sj3);
IkReal x543=(x533+x534);
IkReal x544=(x535+x536);
IkReal x545=(x540+x539+x538+x526);
evalcond[0]=(((r02*x529))+(((-1.0)*x527*x532))+(((-1.0)*x543))+(((-1.0)*px))+x544+((x527*x531)));
evalcond[1]=((((-1.0)*x527*x530))+(((-1.0)*x545))+((r22*x529))+x537+((x527*x528)));
evalcond[2]=((((-1.0)*cj3*x529*x530))+((r21*x542))+((r20*x541))+(((-1.0)*x544))+((cj3*x528*x529))+px+x543+(((-1.0)*cj3*r22*x527)));
evalcond[3]=((((-1.0)*cj3*x529*x532))+(((-1.0)*cj3*r02*x527))+((cj3*x529*x531))+(((-1.0)*x545))+x537+((r00*x541))+((r01*x542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x546=((1.0)*r01);
IkReal x547=(sj1*sj4);
IkReal x548=(cj5*r00);
IkReal x549=(cj1*cj4);
IkReal x550=(cj5*r20);
IkReal x551=(cj1*sj4);
IkReal x552=(sj5*x551);
IkReal x553=((1.0)*cj4*sj1);
if( IKabs((((x548*x551))+(((-1.0)*r22*x553))+((x547*x550))+(((-1.0)*r21*sj5*x547))+(((-1.0)*x546*x552))+(((-1.0)*r02*x549)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x550*x551))+((x547*x548))+(((-1.0)*r02*x553))+((r22*x549))+((r21*x552))+(((-1.0)*sj5*x546*x547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x548*x551))+(((-1.0)*r22*x553))+((x547*x550))+(((-1.0)*r21*sj5*x547))+(((-1.0)*x546*x552))+(((-1.0)*r02*x549))))+IKsqr(((((-1.0)*x550*x551))+((x547*x548))+(((-1.0)*r02*x553))+((r22*x549))+((r21*x552))+(((-1.0)*sj5*x546*x547))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x548*x551))+(((-1.0)*r22*x553))+((x547*x550))+(((-1.0)*r21*sj5*x547))+(((-1.0)*x546*x552))+(((-1.0)*r02*x549))), ((((-1.0)*x550*x551))+((x547*x548))+(((-1.0)*r02*x553))+((r22*x549))+((r21*x552))+(((-1.0)*sj5*x546*x547))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x554=IKcos(j2);
IkReal x555=IKsin(j2);
IkReal x556=((1.0)*cj3);
IkReal x557=(cj5*r00);
IkReal x558=((1.0)*cj4);
IkReal x559=(r01*sj5);
IkReal x560=((1.0)*sj4);
IkReal x561=(cj5*sj3);
IkReal x562=(cj5*r20);
IkReal x563=((1.0)*sj1);
IkReal x564=(sj3*sj5);
IkReal x565=((0.4)*sj1);
IkReal x566=(r21*sj5);
IkReal x567=(cj1*x554);
IkReal x568=(cj3*cj4*sj5);
IkReal x569=((0.4)*x555);
IkReal x570=(x554*x563);
IkReal x571=((1.0)*cj1*x555);
IkReal x572=(x571+x570);
evalcond[0]=((((-1.0)*r22*x558))+(((-1.0)*x555*x563))+((sj4*x562))+(((-1.0)*x560*x566))+x567);
evalcond[1]=(((sj4*x557))+(((-1.0)*r02*x558))+(((-1.0)*x559*x560))+(((-1.0)*x572)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x555*x565))+(((9.9e-7)*x562))+(((-1.0)*pz))+(((0.4)*x567))+(((-9.9e-7)*x566))+(((-1.0)*x565)));
evalcond[3]=((((-9.9e-7)*x559))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-1.0)*cj1*x569))+(((-1.0)*x554*x565))+(((9.9e-7)*x557))+(((-0.4)*cj1)));
evalcond[4]=(((sj1*x555))+(((-1.0)*r02*sj4*x556))+(((-1.0)*cj4*x556*x557))+((r01*x561))+((r00*x564))+((cj3*cj4*x559))+(((-1.0)*x567)));
evalcond[5]=(((cj3*cj4*x566))+((r21*x561))+(((-1.0)*r22*sj4*x556))+(((-1.0)*x572))+((r20*x564))+(((-1.0)*cj4*x556*x562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x573=((1.0)*r01);
IkReal x574=((1.0)*sj5);
CheckValue<IkReal> x575=IKPowWithIntegerCheck(IKsign((((cj5*r20*sj4))+(((-1.0)*r21*sj4*x574))+(((-1.0)*cj4*r22)))),-1);
if(!x575.valid){
continue;
}
CheckValue<IkReal> x576 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x574))+(((-1.0)*cj5*x573)))),IkReal((((r02*sj4))+((cj4*cj5*r00))+(((-1.0)*cj4*sj5*x573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x576.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x575.value)))+(x576.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x577=IKsin(j3);
IkReal x578=IKcos(j3);
IkReal x579=(r10*sj5);
IkReal x580=(cj4*sj5);
IkReal x581=(cj5*r11);
IkReal x582=(cj4*cj5);
IkReal x583=(r12*sj4);
IkReal x584=((1.0)*x578);
IkReal x585=((1.0)*x577);
evalcond[0]=(((r11*x578*x580))+((x577*x581))+(((-1.0)*r10*x582*x584))+(((-1.0)*x583*x584))+((x577*x579)));
evalcond[1]=((((-1.0)*r22*sj4*x585))+(((-1.0)*r20*x582*x585))+((r21*x577*x580))+(((-1.0)*cj5*r21*x584))+(((-1.0)*r20*sj5*x584)));
evalcond[2]=((((-1.0)*r02*sj4*x585))+(((-1.0)*cj5*r01*x584))+(((-1.0)*r00*sj5*x584))+((r01*x577*x580))+(((-1.0)*r00*x582*x585)));
evalcond[3]=((-1.0)+(((-1.0)*x579*x584))+(((-1.0)*r10*x582*x585))+(((-1.0)*x583*x585))+((r11*x577*x580))+(((-1.0)*x581*x584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x586=((4.82499999988767e-6)*sj4);
IkReal x587=(r01*sj5);
IkReal x588=((0.999999999976719)*cj4);
IkReal x589=(cj5*r00);
IkReal x590=(r21*sj5);
IkReal x591=(cj5*r20);
IkReal x592=((0.999999999976719)*sj4);
IkReal x593=((4.82499999988767e-6)*cj4);
if( IKabs(((((-1.1941874999722e-11)*x589))+(((-2.47499999994238e-6)*x590))+(((-1.0)*x586*x587))+((x586*x589))+(((1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x591))+(((-1.0)*r02*x593))+(((1.1941874999722e-11)*x587))+((x590*x592))+((r22*x588))+(((-2.4999999999418)*pz))+(((-1.0)*x591*x592)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.47499999994238e-6)*x589))+((r22*x593))+(((-1.0)*x586*x591))+(((-1.0)*x589*x592))+((r02*x588))+(((1.1941874999722e-11)*x591))+(((-1.20624999997192e-5)*pz))+(((-2.4999999999418)*px))+(((-1.1941874999722e-11)*x590))+(((-2.47499999994238e-6)*x587))+((x586*x590))+((x587*x592)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.1941874999722e-11)*x589))+(((-2.47499999994238e-6)*x590))+(((-1.0)*x586*x587))+((x586*x589))+(((1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x591))+(((-1.0)*r02*x593))+(((1.1941874999722e-11)*x587))+((x590*x592))+((r22*x588))+(((-2.4999999999418)*pz))+(((-1.0)*x591*x592))))+IKsqr(((((2.47499999994238e-6)*x589))+((r22*x593))+(((-1.0)*x586*x591))+(((-1.0)*x589*x592))+((r02*x588))+(((1.1941874999722e-11)*x591))+(((-1.20624999997192e-5)*pz))+(((-2.4999999999418)*px))+(((-1.1941874999722e-11)*x590))+(((-2.47499999994238e-6)*x587))+((x586*x590))+((x587*x592))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.1941874999722e-11)*x589))+(((-2.47499999994238e-6)*x590))+(((-1.0)*x586*x587))+((x586*x589))+(((1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x591))+(((-1.0)*r02*x593))+(((1.1941874999722e-11)*x587))+((x590*x592))+((r22*x588))+(((-2.4999999999418)*pz))+(((-1.0)*x591*x592))), ((((2.47499999994238e-6)*x589))+((r22*x593))+(((-1.0)*x586*x591))+(((-1.0)*x589*x592))+((r02*x588))+(((1.1941874999722e-11)*x591))+(((-1.20624999997192e-5)*pz))+(((-2.4999999999418)*px))+(((-1.1941874999722e-11)*x590))+(((-2.47499999994238e-6)*x587))+((x586*x590))+((x587*x592))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x594=IKcos(j1);
IkReal x595=IKsin(j1);
IkReal x596=((1.0)*pz);
IkReal x597=((0.4)*sj4);
IkReal x598=(r21*sj5);
IkReal x599=((0.4)*cj4);
IkReal x600=(cj5*r20);
IkReal x601=(r01*sj5);
IkReal x602=(cj5*r00);
IkReal x603=((0.4)*x594);
IkReal x604=((9.9e-7)*x601);
IkReal x605=((9.9e-7)*x602);
IkReal x606=((1.93e-6)*x595);
IkReal x607=((9.9e-7)*x600);
IkReal x608=((1.93e-6)*x594);
IkReal x609=((0.4)*x595);
IkReal x610=((9.9e-7)*x598);
IkReal x611=((0.4)*sj3*sj5);
IkReal x612=((0.4)*cj5*sj3);
IkReal x613=(x603+x604);
IkReal x614=(x606+x605);
IkReal x615=(x596+x609+x608+x610);
evalcond[0]=((((-1.0)*x597*x602))+((x597*x601))+(((-1.0)*px))+((r02*x599))+(((-1.0)*x613))+x614);
evalcond[1]=(((r22*x599))+(((-1.0)*x597*x600))+(((-1.0)*x615))+x607+((x597*x598)));
evalcond[2]=(((r20*x611))+(((-1.0)*cj3*r22*x597))+(((-1.0)*cj3*x599*x600))+((cj3*x598*x599))+px+((r21*x612))+(((-1.0)*x614))+x613);
evalcond[3]=(((r00*x611))+((cj3*x599*x601))+((r01*x612))+(((-1.0)*cj3*r02*x597))+(((-1.0)*cj3*x599*x602))+(((-1.0)*x615))+x607);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x616=((1.0)*r01);
IkReal x617=(sj1*sj4);
IkReal x618=(cj5*r00);
IkReal x619=(cj1*cj4);
IkReal x620=(cj5*r20);
IkReal x621=(cj1*sj4);
IkReal x622=(sj5*x621);
IkReal x623=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r21*sj5*x617))+((x617*x620))+((x618*x621))+(((-1.0)*r02*x619))+(((-1.0)*x616*x622))+(((-1.0)*r22*x623)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x622))+(((-1.0)*r02*x623))+(((-1.0)*x620*x621))+((x617*x618))+(((-1.0)*sj5*x616*x617))+((r22*x619)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*sj5*x617))+((x617*x620))+((x618*x621))+(((-1.0)*r02*x619))+(((-1.0)*x616*x622))+(((-1.0)*r22*x623))))+IKsqr((((r21*x622))+(((-1.0)*r02*x623))+(((-1.0)*x620*x621))+((x617*x618))+(((-1.0)*sj5*x616*x617))+((r22*x619))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*sj5*x617))+((x617*x620))+((x618*x621))+(((-1.0)*r02*x619))+(((-1.0)*x616*x622))+(((-1.0)*r22*x623))), (((r21*x622))+(((-1.0)*r02*x623))+(((-1.0)*x620*x621))+((x617*x618))+(((-1.0)*sj5*x616*x617))+((r22*x619))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x624=IKcos(j2);
IkReal x625=IKsin(j2);
IkReal x626=((1.0)*cj3);
IkReal x627=(cj5*r00);
IkReal x628=((1.0)*cj4);
IkReal x629=(r01*sj5);
IkReal x630=((1.0)*sj4);
IkReal x631=(cj5*sj3);
IkReal x632=(cj5*r20);
IkReal x633=((1.0)*sj1);
IkReal x634=(sj3*sj5);
IkReal x635=((0.4)*sj1);
IkReal x636=(r21*sj5);
IkReal x637=(cj1*x624);
IkReal x638=(cj3*cj4*sj5);
IkReal x639=((0.4)*x625);
IkReal x640=(x624*x633);
IkReal x641=((1.0)*cj1*x625);
IkReal x642=(x641+x640);
evalcond[0]=(((sj4*x632))+(((-1.0)*x630*x636))+x637+(((-1.0)*x625*x633))+(((-1.0)*r22*x628)));
evalcond[1]=((((-1.0)*x629*x630))+((sj4*x627))+(((-1.0)*r02*x628))+(((-1.0)*x642)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x635))+(((-1.0)*pz))+(((-1.0)*x625*x635))+(((-9.9e-7)*x636))+(((0.4)*x637))+(((9.9e-7)*x632)));
evalcond[3]=((((-1.0)*cj1*x639))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-1.0)*x624*x635))+(((-9.9e-7)*x629))+(((9.9e-7)*x627))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*r02*sj4*x626))+(((-1.0)*cj4*x626*x627))+((r01*x631))+((sj1*x625))+((r00*x634))+(((-1.0)*x637))+((cj3*cj4*x629)));
evalcond[5]=(((r21*x631))+((cj3*cj4*x636))+(((-1.0)*x642))+(((-1.0)*cj4*x626*x632))+(((-1.0)*r22*sj4*x626))+((r20*x634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x643=((1.0)*cj5);
IkReal x644=((1.0)*sj5);
CheckValue<IkReal> x645=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj4*x643))+((r01*sj4*sj5))+((cj4*r02)))),-1);
if(!x645.valid){
continue;
}
CheckValue<IkReal> x646 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x643))+(((-1.0)*r20*x644)))),IkReal((((r22*sj4))+(((-1.0)*cj4*r21*x644))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x646.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x645.value)))+(x646.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x647=IKsin(j3);
IkReal x648=IKcos(j3);
IkReal x649=(r10*sj5);
IkReal x650=(cj4*sj5);
IkReal x651=(cj5*r11);
IkReal x652=(cj4*cj5);
IkReal x653=(r12*sj4);
IkReal x654=((1.0)*x648);
IkReal x655=((1.0)*x647);
evalcond[0]=(((x647*x651))+((r11*x648*x650))+(((-1.0)*r10*x652*x654))+(((-1.0)*x653*x654))+((x647*x649)));
evalcond[1]=(((r21*x647*x650))+(((-1.0)*r20*sj5*x654))+(((-1.0)*r22*sj4*x655))+(((-1.0)*r20*x652*x655))+(((-1.0)*cj5*r21*x654)));
evalcond[2]=((((-1.0)*cj5*r01*x654))+((r01*x647*x650))+(((-1.0)*r00*x652*x655))+(((-1.0)*r02*sj4*x655))+(((-1.0)*r00*sj5*x654)));
evalcond[3]=((-1.0)+(((-1.0)*x651*x654))+((r11*x647*x650))+(((-1.0)*x649*x654))+(((-1.0)*r10*x652*x655))+(((-1.0)*x653*x655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x656=((4.82499999988767e-6)*sj4);
IkReal x657=(r01*sj5);
IkReal x658=((0.999999999976719)*cj4);
IkReal x659=(cj5*r00);
IkReal x660=(r21*sj5);
IkReal x661=(cj5*r20);
IkReal x662=((0.999999999976719)*sj4);
IkReal x663=((4.82499999988767e-6)*cj4);
if( IKabs(((((-1.1941874999722e-11)*x659))+(((1.1941874999722e-11)*x657))+(((-1.0)*x656*x657))+(((-1.0)*x661*x662))+((r22*x658))+(((1.20624999997192e-5)*px))+((x660*x662))+((x656*x659))+(((2.47499999994238e-6)*x661))+(((-2.4999999999418)*pz))+(((-1.0)*r02*x663))+(((-2.47499999994238e-6)*x660)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.1941874999722e-11)*x661))+(((-1.0)*x659*x662))+((x657*x662))+((r02*x658))+((x656*x660))+(((-1.1941874999722e-11)*x660))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x656*x661))+(((-2.47499999994238e-6)*x657))+(((2.47499999994238e-6)*x659))+((r22*x663))+(((-2.4999999999418)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.1941874999722e-11)*x659))+(((1.1941874999722e-11)*x657))+(((-1.0)*x656*x657))+(((-1.0)*x661*x662))+((r22*x658))+(((1.20624999997192e-5)*px))+((x660*x662))+((x656*x659))+(((2.47499999994238e-6)*x661))+(((-2.4999999999418)*pz))+(((-1.0)*r02*x663))+(((-2.47499999994238e-6)*x660))))+IKsqr(((((1.1941874999722e-11)*x661))+(((-1.0)*x659*x662))+((x657*x662))+((r02*x658))+((x656*x660))+(((-1.1941874999722e-11)*x660))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x656*x661))+(((-2.47499999994238e-6)*x657))+(((2.47499999994238e-6)*x659))+((r22*x663))+(((-2.4999999999418)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.1941874999722e-11)*x659))+(((1.1941874999722e-11)*x657))+(((-1.0)*x656*x657))+(((-1.0)*x661*x662))+((r22*x658))+(((1.20624999997192e-5)*px))+((x660*x662))+((x656*x659))+(((2.47499999994238e-6)*x661))+(((-2.4999999999418)*pz))+(((-1.0)*r02*x663))+(((-2.47499999994238e-6)*x660))), ((((1.1941874999722e-11)*x661))+(((-1.0)*x659*x662))+((x657*x662))+((r02*x658))+((x656*x660))+(((-1.1941874999722e-11)*x660))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x656*x661))+(((-2.47499999994238e-6)*x657))+(((2.47499999994238e-6)*x659))+((r22*x663))+(((-2.4999999999418)*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x664=IKcos(j1);
IkReal x665=IKsin(j1);
IkReal x666=((1.0)*pz);
IkReal x667=((0.4)*sj4);
IkReal x668=(r21*sj5);
IkReal x669=((0.4)*cj4);
IkReal x670=(cj5*r20);
IkReal x671=(r01*sj5);
IkReal x672=(cj5*r00);
IkReal x673=((0.4)*x664);
IkReal x674=((9.9e-7)*x671);
IkReal x675=((9.9e-7)*x672);
IkReal x676=((1.93e-6)*x665);
IkReal x677=((9.9e-7)*x670);
IkReal x678=((1.93e-6)*x664);
IkReal x679=((0.4)*x665);
IkReal x680=((9.9e-7)*x668);
IkReal x681=((0.4)*sj3*sj5);
IkReal x682=((0.4)*cj5*sj3);
IkReal x683=(x673+x674);
IkReal x684=(x676+x675);
IkReal x685=(x666+x678+x679+x680);
evalcond[0]=((((-1.0)*x683))+(((-1.0)*px))+((x667*x671))+((r02*x669))+(((-1.0)*x667*x672))+x684);
evalcond[1]=(((x667*x668))+(((-1.0)*x685))+(((-1.0)*x667*x670))+x677+((r22*x669)));
evalcond[2]=((((-1.0)*cj3*r22*x667))+((r21*x682))+(((-1.0)*x684))+(((-1.0)*cj3*x669*x670))+px+x683+((r20*x681))+((cj3*x668*x669)));
evalcond[3]=((((-1.0)*x685))+(((-1.0)*cj3*r02*x667))+(((-1.0)*cj3*x669*x672))+((cj3*x669*x671))+x677+((r01*x682))+((r00*x681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x686=((1.0)*r01);
IkReal x687=(sj1*sj4);
IkReal x688=(cj5*r00);
IkReal x689=(cj1*cj4);
IkReal x690=(cj5*r20);
IkReal x691=(cj1*sj4);
IkReal x692=(sj5*x691);
IkReal x693=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r21*sj5*x687))+((x688*x691))+((x687*x690))+(((-1.0)*x686*x692))+(((-1.0)*r22*x693))+(((-1.0)*r02*x689)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x687*x688))+((r22*x689))+(((-1.0)*x690*x691))+(((-1.0)*r02*x693))+((r21*x692))+(((-1.0)*sj5*x686*x687)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*sj5*x687))+((x688*x691))+((x687*x690))+(((-1.0)*x686*x692))+(((-1.0)*r22*x693))+(((-1.0)*r02*x689))))+IKsqr((((x687*x688))+((r22*x689))+(((-1.0)*x690*x691))+(((-1.0)*r02*x693))+((r21*x692))+(((-1.0)*sj5*x686*x687))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*sj5*x687))+((x688*x691))+((x687*x690))+(((-1.0)*x686*x692))+(((-1.0)*r22*x693))+(((-1.0)*r02*x689))), (((x687*x688))+((r22*x689))+(((-1.0)*x690*x691))+(((-1.0)*r02*x693))+((r21*x692))+(((-1.0)*sj5*x686*x687))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x694=IKcos(j2);
IkReal x695=IKsin(j2);
IkReal x696=((1.0)*cj3);
IkReal x697=(cj5*r00);
IkReal x698=((1.0)*cj4);
IkReal x699=(r01*sj5);
IkReal x700=((1.0)*sj4);
IkReal x701=(cj5*sj3);
IkReal x702=(cj5*r20);
IkReal x703=((1.0)*sj1);
IkReal x704=(sj3*sj5);
IkReal x705=((0.4)*sj1);
IkReal x706=(r21*sj5);
IkReal x707=(cj1*x694);
IkReal x708=(cj3*cj4*sj5);
IkReal x709=((0.4)*x695);
IkReal x710=(x694*x703);
IkReal x711=((1.0)*cj1*x695);
IkReal x712=(x711+x710);
evalcond[0]=((((-1.0)*x695*x703))+(((-1.0)*r22*x698))+x707+(((-1.0)*x700*x706))+((sj4*x702)));
evalcond[1]=(((sj4*x697))+(((-1.0)*x712))+(((-1.0)*x699*x700))+(((-1.0)*r02*x698)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x706))+(((0.4)*x707))+(((-1.0)*x695*x705))+(((-1.0)*pz))+(((-1.0)*x705))+(((9.9e-7)*x702)));
evalcond[3]=((((-9.9e-7)*x699))+(((1.93e-6)*sj1))+(((-1.0)*x694*x705))+(((-1.0)*cj1*x709))+(((-1.0)*px))+(((9.9e-7)*x697))+(((-0.4)*cj1)));
evalcond[4]=(((r01*x701))+((sj1*x695))+((r00*x704))+(((-1.0)*x707))+(((-1.0)*r02*sj4*x696))+((cj3*cj4*x699))+(((-1.0)*cj4*x696*x697)));
evalcond[5]=(((cj3*cj4*x706))+(((-1.0)*cj4*x696*x702))+((r20*x704))+(((-1.0)*x712))+((r21*x701))+(((-1.0)*r22*sj4*x696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x713=((1.0)*r11);
IkReal x714=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)));
j3eval[0]=x714;
j3eval[1]=IKsign(x714);
j3eval[2]=((IKabs(((((-1.0)*cj4*sj5*x713))+((cj4*cj5*r10))+((r12*sj4)))))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*cj5*x713))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x715=((1.0)*sj5);
IkReal x716=(((cj5*r10*sj4))+(((-1.0)*r11*sj4*x715))+(((-1.0)*cj4*r12)));
j3eval[0]=x716;
j3eval[1]=((IKabs((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x715)))))+(IKabs(((((-1.0)*r20*x715))+(((-1.0)*cj5*r21))))));
j3eval[2]=IKsign(x716);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x717=r00*r00;
IkReal x718=cj5*cj5;
IkReal x719=cj4*cj4;
IkReal x720=r01*r01;
IkReal x721=r02*r02;
IkReal x722=(cj5*r00);
IkReal x723=(r02*sj4);
IkReal x724=((2.0)*r01*sj5);
IkReal x725=((1.0)*x719);
IkReal x726=(x717*x718);
IkReal x727=(x718*x720);
IkReal x728=(((x722*x724))+(((2.0)*cj4*x722*x723))+(((-1.0)*x725*x727))+(((-1.0)*x726))+(((-1.0)*x721*x725))+(((-1.0)*cj4*x723*x724))+((x719*x726))+((x719*x720))+x717+x721+x727+(((-1.0)*x719*x722*x724)));
j3eval[0]=x728;
j3eval[1]=((IKabs(((((-1.0)*x723))+((cj4*r01*sj5))+(((-1.0)*cj4*x722)))))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))));
j3eval[2]=IKsign(x728);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x729=r00*r00;
IkReal x730=cj5*cj5;
IkReal x731=cj4*cj4;
IkReal x732=r01*r01;
IkReal x733=r02*r02;
IkReal x734=(cj5*r00);
IkReal x735=(r02*sj4);
IkReal x736=((2.0)*r01*sj5);
IkReal x737=((1.0)*x731);
IkReal x738=(x729*x730);
IkReal x739=(x730*x732);
CheckValue<IkReal> x740=IKPowWithIntegerCheck(IKsign(((((2.0)*cj4*x734*x735))+((x731*x732))+((x731*x738))+((x734*x736))+(((-1.0)*x733*x737))+(((-1.0)*x738))+(((-1.0)*x737*x739))+(((-1.0)*cj4*x735*x736))+x733+x739+x729+(((-1.0)*x731*x734*x736)))),-1);
if(!x740.valid){
continue;
}
CheckValue<IkReal> x741 = IKatan2WithCheck(IkReal(((((-1.0)*x735))+((cj4*r01*sj5))+(((-1.0)*cj4*x734)))),IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x741.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x740.value)))+(x741.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x742=IKsin(j3);
IkReal x743=IKcos(j3);
IkReal x744=(r02*sj4);
IkReal x745=(cj4*cj5);
IkReal x746=(cj4*sj5);
IkReal x747=(cj5*r01);
IkReal x748=(r00*sj5);
IkReal x749=((1.0)*x743);
IkReal x750=((1.0)*x742);
evalcond[0]=(((x742*x748))+((x742*x747))+((r01*x743*x746))+(((-1.0)*x744*x749))+(((-1.0)*r00*x745*x749)));
evalcond[1]=((((-1.0)*r22*sj4*x750))+((r21*x742*x746))+(((-1.0)*cj5*r21*x749))+(((-1.0)*r20*x745*x750))+(((-1.0)*r20*sj5*x749)));
evalcond[2]=(((r11*x742*x746))+(((-1.0)*r12*sj4*x750))+(((-1.0)*cj5*r11*x749))+(((-1.0)*r10*sj5*x749))+(((-1.0)*r10*x745*x750)));
evalcond[3]=((-1.0)+((r01*x742*x746))+(((-1.0)*x747*x749))+(((-1.0)*x744*x750))+(((-1.0)*r00*x745*x750))+(((-1.0)*x748*x749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x751=((4.82499999988767e-6)*sj4);
IkReal x752=(cj5*r20);
IkReal x753=(r11*sj5);
IkReal x754=(r21*sj5);
IkReal x755=(cj5*r10);
IkReal x756=((0.999999999976719)*sj4);
IkReal x757=((4.82499999988767e-6)*cj4);
IkReal x758=((0.999999999976719)*cj4);
if( IKabs(((((2.47499999994238e-6)*x752))+(((-1.1941874999722e-11)*x753))+((x751*x753))+((r22*x758))+(((-1.20624999997192e-5)*py))+((r12*x757))+(((-2.47499999994238e-6)*x754))+(((-1.0)*x751*x755))+(((1.1941874999722e-11)*x755))+(((-1.0)*x752*x756))+(((-2.4999999999418)*pz))+((x754*x756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.4999999999418)*py))+(((2.47499999994238e-6)*x753))+(((-1.1941874999722e-11)*x754))+((x751*x754))+((r22*x757))+(((-1.0)*x753*x756))+(((-1.0)*r12*x758))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x755))+(((-1.0)*x751*x752))+(((1.1941874999722e-11)*x752))+((x755*x756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.47499999994238e-6)*x752))+(((-1.1941874999722e-11)*x753))+((x751*x753))+((r22*x758))+(((-1.20624999997192e-5)*py))+((r12*x757))+(((-2.47499999994238e-6)*x754))+(((-1.0)*x751*x755))+(((1.1941874999722e-11)*x755))+(((-1.0)*x752*x756))+(((-2.4999999999418)*pz))+((x754*x756))))+IKsqr(((((2.4999999999418)*py))+(((2.47499999994238e-6)*x753))+(((-1.1941874999722e-11)*x754))+((x751*x754))+((r22*x757))+(((-1.0)*x753*x756))+(((-1.0)*r12*x758))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x755))+(((-1.0)*x751*x752))+(((1.1941874999722e-11)*x752))+((x755*x756))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.47499999994238e-6)*x752))+(((-1.1941874999722e-11)*x753))+((x751*x753))+((r22*x758))+(((-1.20624999997192e-5)*py))+((r12*x757))+(((-2.47499999994238e-6)*x754))+(((-1.0)*x751*x755))+(((1.1941874999722e-11)*x755))+(((-1.0)*x752*x756))+(((-2.4999999999418)*pz))+((x754*x756))), ((((2.4999999999418)*py))+(((2.47499999994238e-6)*x753))+(((-1.1941874999722e-11)*x754))+((x751*x754))+((r22*x757))+(((-1.0)*x753*x756))+(((-1.0)*r12*x758))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x755))+(((-1.0)*x751*x752))+(((1.1941874999722e-11)*x752))+((x755*x756))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x759=IKcos(j1);
IkReal x760=IKsin(j1);
IkReal x761=((0.4)*sj4);
IkReal x762=(r21*sj5);
IkReal x763=(cj5*r10);
IkReal x764=((0.4)*cj4);
IkReal x765=(cj5*r20);
IkReal x766=((0.4)*sj3);
IkReal x767=(r11*sj5);
IkReal x768=((1.93e-6)*x760);
IkReal x769=((9.9e-7)*x767);
IkReal x770=((0.4)*x759);
IkReal x771=((9.9e-7)*x763);
IkReal x772=((1.93e-6)*x759);
IkReal x773=((0.4)*x760);
IkReal x774=((9.9e-7)*x762);
IkReal x775=((9.9e-7)*x765);
IkReal x776=(x771+x770);
IkReal x777=(py+x768+x769);
IkReal x778=(x773+x772+x774);
evalcond[0]=(((x761*x763))+(((-1.0)*r12*x764))+x777+(((-1.0)*x776))+(((-1.0)*x761*x767)));
evalcond[1]=(((x761*x762))+(((-1.0)*pz))+((r22*x764))+x775+(((-1.0)*x778))+(((-1.0)*x761*x765)));
evalcond[2]=((((-1.0)*r20*sj5*x766))+((cj3*r22*x761))+(((-1.0)*cj3*x762*x764))+((cj3*x764*x765))+x777+(((-1.0)*x776))+(((-1.0)*cj5*r21*x766)));
evalcond[3]=((((-1.0)*cj3*r12*x761))+(((-1.0)*cj3*x763*x764))+((r10*sj5*x766))+((cj3*x764*x767))+pz+x778+(((-1.0)*x775))+((cj5*r11*x766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x779=(cj4*r12);
IkReal x780=(cj4*r22);
IkReal x781=(cj1*sj4);
IkReal x782=(r11*sj5);
IkReal x783=(r21*sj5);
IkReal x784=((1.0)*sj1);
IkReal x785=(sj1*sj4);
IkReal x786=(cj5*r20);
IkReal x787=((1.0)*cj5*r10);
if( IKabs((((x781*x782))+(((-1.0)*sj4*x783*x784))+((x785*x786))+((cj1*x779))+(((-1.0)*x781*x787))+(((-1.0)*x780*x784)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x781*x783))+(((-1.0)*cj5*r10*sj4*x784))+((cj1*x780))+((x782*x785))+(((-1.0)*x781*x786))+((sj1*x779)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x781*x782))+(((-1.0)*sj4*x783*x784))+((x785*x786))+((cj1*x779))+(((-1.0)*x781*x787))+(((-1.0)*x780*x784))))+IKsqr((((x781*x783))+(((-1.0)*cj5*r10*sj4*x784))+((cj1*x780))+((x782*x785))+(((-1.0)*x781*x786))+((sj1*x779))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x781*x782))+(((-1.0)*sj4*x783*x784))+((x785*x786))+((cj1*x779))+(((-1.0)*x781*x787))+(((-1.0)*x780*x784))), (((x781*x783))+(((-1.0)*cj5*r10*sj4*x784))+((cj1*x780))+((x782*x785))+(((-1.0)*x781*x786))+((sj1*x779))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x788=IKcos(j2);
IkReal x789=IKsin(j2);
IkReal x790=(cj3*cj4);
IkReal x791=(r21*sj5);
IkReal x792=((1.0)*r22);
IkReal x793=(cj5*r10);
IkReal x794=(cj5*r20);
IkReal x795=(cj5*sj3);
IkReal x796=(cj3*sj4);
IkReal x797=(r11*sj5);
IkReal x798=((1.0)*sj4);
IkReal x799=((1.0)*r12);
IkReal x800=(sj3*sj5);
IkReal x801=(cj1*x788);
IkReal x802=(cj1*x789);
IkReal x803=(sj1*x789);
IkReal x804=(sj1*x788);
IkReal x805=((1.0)*x803);
evalcond[0]=((((-1.0)*x797*x798))+((sj4*x793))+x804+x802+(((-1.0)*cj4*x799)));
evalcond[1]=((((-1.0)*x791*x798))+((sj4*x794))+x801+(((-1.0)*x805))+(((-1.0)*cj4*x792)));
evalcond[2]=((((-1.93e-6)*cj1))+(((9.9e-7)*x794))+(((-1.0)*pz))+(((-0.4)*x803))+(((-0.4)*sj1))+(((-9.9e-7)*x791))+(((0.4)*x801)));
evalcond[3]=((((9.9e-7)*x793))+(((0.4)*cj1))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x797))+(((0.4)*x802))+(((0.4)*x804)));
evalcond[4]=((((-1.0)*x796*x799))+((x790*x797))+((r11*x795))+(((-1.0)*x790*x793))+x801+((r10*x800))+(((-1.0)*x805)));
evalcond[5]=((((-1.0)*x802))+(((-1.0)*x804))+(((-1.0)*x792*x796))+((x790*x791))+((r21*x795))+((r20*x800))+(((-1.0)*x790*x794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x806=((1.0)*sj5);
CheckValue<IkReal> x807 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x806))+(((-1.0)*cj5*r21)))),IkReal((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x806)))),IKFAST_ATAN2_MAGTHRESH);
if(!x807.valid){
continue;
}
CheckValue<IkReal> x808=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj4*x806))+((cj5*r10*sj4))+(((-1.0)*cj4*r12)))),-1);
if(!x808.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x807.value)+(((1.5707963267949)*(x808.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x809=IKsin(j3);
IkReal x810=IKcos(j3);
IkReal x811=(r02*sj4);
IkReal x812=(cj4*cj5);
IkReal x813=(cj4*sj5);
IkReal x814=(cj5*r01);
IkReal x815=(r00*sj5);
IkReal x816=((1.0)*x810);
IkReal x817=((1.0)*x809);
evalcond[0]=(((x809*x814))+((x809*x815))+((r01*x810*x813))+(((-1.0)*x811*x816))+(((-1.0)*r00*x812*x816)));
evalcond[1]=((((-1.0)*r22*sj4*x817))+((r21*x809*x813))+(((-1.0)*r20*sj5*x816))+(((-1.0)*cj5*r21*x816))+(((-1.0)*r20*x812*x817)));
evalcond[2]=((((-1.0)*r12*sj4*x817))+(((-1.0)*r10*sj5*x816))+((r11*x809*x813))+(((-1.0)*r10*x812*x817))+(((-1.0)*cj5*r11*x816)));
evalcond[3]=((-1.0)+(((-1.0)*x811*x817))+(((-1.0)*x815*x816))+(((-1.0)*x814*x816))+(((-1.0)*r00*x812*x817))+((r01*x809*x813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x818=((4.82499999988767e-6)*sj4);
IkReal x819=(cj5*r20);
IkReal x820=(r11*sj5);
IkReal x821=(r21*sj5);
IkReal x822=(cj5*r10);
IkReal x823=((0.999999999976719)*sj4);
IkReal x824=((4.82499999988767e-6)*cj4);
IkReal x825=((0.999999999976719)*cj4);
if( IKabs((((r12*x824))+((x821*x823))+(((-1.0)*x818*x822))+(((1.1941874999722e-11)*x822))+(((-1.0)*x819*x823))+(((2.47499999994238e-6)*x819))+(((-1.20624999997192e-5)*py))+((r22*x825))+((x818*x820))+(((-2.47499999994238e-6)*x821))+(((-1.1941874999722e-11)*x820))+(((-2.4999999999418)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x818*x819))+(((2.4999999999418)*py))+(((-1.0)*r12*x825))+(((1.1941874999722e-11)*x819))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x820))+((r22*x824))+((x822*x823))+(((-1.0)*x820*x823))+((x818*x821))+(((-2.47499999994238e-6)*x822))+(((-1.1941874999722e-11)*x821)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x824))+((x821*x823))+(((-1.0)*x818*x822))+(((1.1941874999722e-11)*x822))+(((-1.0)*x819*x823))+(((2.47499999994238e-6)*x819))+(((-1.20624999997192e-5)*py))+((r22*x825))+((x818*x820))+(((-2.47499999994238e-6)*x821))+(((-1.1941874999722e-11)*x820))+(((-2.4999999999418)*pz))))+IKsqr(((((-1.0)*x818*x819))+(((2.4999999999418)*py))+(((-1.0)*r12*x825))+(((1.1941874999722e-11)*x819))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x820))+((r22*x824))+((x822*x823))+(((-1.0)*x820*x823))+((x818*x821))+(((-2.47499999994238e-6)*x822))+(((-1.1941874999722e-11)*x821))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r12*x824))+((x821*x823))+(((-1.0)*x818*x822))+(((1.1941874999722e-11)*x822))+(((-1.0)*x819*x823))+(((2.47499999994238e-6)*x819))+(((-1.20624999997192e-5)*py))+((r22*x825))+((x818*x820))+(((-2.47499999994238e-6)*x821))+(((-1.1941874999722e-11)*x820))+(((-2.4999999999418)*pz))), ((((-1.0)*x818*x819))+(((2.4999999999418)*py))+(((-1.0)*r12*x825))+(((1.1941874999722e-11)*x819))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x820))+((r22*x824))+((x822*x823))+(((-1.0)*x820*x823))+((x818*x821))+(((-2.47499999994238e-6)*x822))+(((-1.1941874999722e-11)*x821))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x826=IKcos(j1);
IkReal x827=IKsin(j1);
IkReal x828=((0.4)*sj4);
IkReal x829=(r21*sj5);
IkReal x830=(cj5*r10);
IkReal x831=((0.4)*cj4);
IkReal x832=(cj5*r20);
IkReal x833=((0.4)*sj3);
IkReal x834=(r11*sj5);
IkReal x835=((1.93e-6)*x827);
IkReal x836=((9.9e-7)*x834);
IkReal x837=((0.4)*x826);
IkReal x838=((9.9e-7)*x830);
IkReal x839=((1.93e-6)*x826);
IkReal x840=((0.4)*x827);
IkReal x841=((9.9e-7)*x829);
IkReal x842=((9.9e-7)*x832);
IkReal x843=(x837+x838);
IkReal x844=(py+x835+x836);
IkReal x845=(x839+x841+x840);
evalcond[0]=((((-1.0)*x828*x834))+(((-1.0)*x843))+(((-1.0)*r12*x831))+x844+((x828*x830)));
evalcond[1]=(((r22*x831))+(((-1.0)*x828*x832))+(((-1.0)*pz))+(((-1.0)*x845))+x842+((x828*x829)));
evalcond[2]=((((-1.0)*cj3*x829*x831))+((cj3*x831*x832))+((cj3*r22*x828))+(((-1.0)*x843))+(((-1.0)*r20*sj5*x833))+(((-1.0)*cj5*r21*x833))+x844);
evalcond[3]=(((r10*sj5*x833))+((cj3*x831*x834))+((cj5*r11*x833))+(((-1.0)*x842))+pz+(((-1.0)*cj3*r12*x828))+x845+(((-1.0)*cj3*x830*x831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x846=(cj4*r12);
IkReal x847=(cj4*r22);
IkReal x848=(cj1*sj4);
IkReal x849=(r11*sj5);
IkReal x850=(r21*sj5);
IkReal x851=((1.0)*sj1);
IkReal x852=(sj1*sj4);
IkReal x853=(cj5*r20);
IkReal x854=((1.0)*cj5*r10);
if( IKabs((((cj1*x846))+((x848*x849))+(((-1.0)*x847*x851))+(((-1.0)*x848*x854))+((x852*x853))+(((-1.0)*sj4*x850*x851)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x848*x850))+((cj1*x847))+(((-1.0)*cj5*r10*sj4*x851))+(((-1.0)*x848*x853))+((x849*x852))+((sj1*x846)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x846))+((x848*x849))+(((-1.0)*x847*x851))+(((-1.0)*x848*x854))+((x852*x853))+(((-1.0)*sj4*x850*x851))))+IKsqr((((x848*x850))+((cj1*x847))+(((-1.0)*cj5*r10*sj4*x851))+(((-1.0)*x848*x853))+((x849*x852))+((sj1*x846))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x846))+((x848*x849))+(((-1.0)*x847*x851))+(((-1.0)*x848*x854))+((x852*x853))+(((-1.0)*sj4*x850*x851))), (((x848*x850))+((cj1*x847))+(((-1.0)*cj5*r10*sj4*x851))+(((-1.0)*x848*x853))+((x849*x852))+((sj1*x846))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x855=IKcos(j2);
IkReal x856=IKsin(j2);
IkReal x857=(cj3*cj4);
IkReal x858=(r21*sj5);
IkReal x859=((1.0)*r22);
IkReal x860=(cj5*r10);
IkReal x861=(cj5*r20);
IkReal x862=(cj5*sj3);
IkReal x863=(cj3*sj4);
IkReal x864=(r11*sj5);
IkReal x865=((1.0)*sj4);
IkReal x866=((1.0)*r12);
IkReal x867=(sj3*sj5);
IkReal x868=(cj1*x855);
IkReal x869=(cj1*x856);
IkReal x870=(sj1*x856);
IkReal x871=(sj1*x855);
IkReal x872=((1.0)*x870);
evalcond[0]=((((-1.0)*x864*x865))+((sj4*x860))+x869+x871+(((-1.0)*cj4*x866)));
evalcond[1]=(((sj4*x861))+(((-1.0)*x858*x865))+x868+(((-1.0)*cj4*x859))+(((-1.0)*x872)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x858))+(((-1.0)*pz))+(((-0.4)*x870))+(((9.9e-7)*x861))+(((0.4)*x868))+(((-0.4)*sj1)));
evalcond[3]=((((-9.9e-7)*x864))+(((0.4)*cj1))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((0.4)*x871))+(((9.9e-7)*x860))+(((0.4)*x869)));
evalcond[4]=(((r10*x867))+((r11*x862))+(((-1.0)*x857*x860))+x868+((x857*x864))+(((-1.0)*x863*x866))+(((-1.0)*x872)));
evalcond[5]=(((r21*x862))+(((-1.0)*x869))+(((-1.0)*x857*x861))+(((-1.0)*x871))+(((-1.0)*x859*x863))+((x857*x858))+((r20*x867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x873=((1.0)*r11);
CheckValue<IkReal> x874=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)))),-1);
if(!x874.valid){
continue;
}
CheckValue<IkReal> x875 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5))+(((-1.0)*cj5*x873)))),IkReal((((cj4*cj5*r10))+(((-1.0)*cj4*sj5*x873))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x875.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x874.value)))+(x875.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x876=IKsin(j3);
IkReal x877=IKcos(j3);
IkReal x878=(r02*sj4);
IkReal x879=(cj4*cj5);
IkReal x880=(cj4*sj5);
IkReal x881=(cj5*r01);
IkReal x882=(r00*sj5);
IkReal x883=((1.0)*x877);
IkReal x884=((1.0)*x876);
evalcond[0]=(((r01*x877*x880))+((x876*x882))+((x876*x881))+(((-1.0)*r00*x879*x883))+(((-1.0)*x878*x883)));
evalcond[1]=((((-1.0)*cj5*r21*x883))+(((-1.0)*r20*sj5*x883))+((r21*x876*x880))+(((-1.0)*r20*x879*x884))+(((-1.0)*r22*sj4*x884)));
evalcond[2]=((((-1.0)*r12*sj4*x884))+(((-1.0)*r10*sj5*x883))+((r11*x876*x880))+(((-1.0)*r10*x879*x884))+(((-1.0)*cj5*r11*x883)));
evalcond[3]=((-1.0)+(((-1.0)*x882*x883))+((r01*x876*x880))+(((-1.0)*x881*x883))+(((-1.0)*r00*x879*x884))+(((-1.0)*x878*x884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x885=((4.82499999988767e-6)*sj4);
IkReal x886=(cj5*r20);
IkReal x887=(r11*sj5);
IkReal x888=(r21*sj5);
IkReal x889=(cj5*r10);
IkReal x890=((0.999999999976719)*sj4);
IkReal x891=((4.82499999988767e-6)*cj4);
IkReal x892=((0.999999999976719)*cj4);
if( IKabs(((((2.47499999994238e-6)*x886))+(((1.1941874999722e-11)*x889))+(((-1.20624999997192e-5)*py))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x888))+(((-1.0)*x885*x889))+((x885*x887))+((r22*x892))+((x888*x890))+((r12*x891))+(((-1.1941874999722e-11)*x887))+(((-1.0)*x886*x890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.4999999999418)*py))+(((2.47499999994238e-6)*x887))+(((1.1941874999722e-11)*x886))+(((-1.0)*r12*x892))+(((-1.20624999997192e-5)*pz))+((x889*x890))+(((-2.47499999994238e-6)*x889))+(((-1.0)*x885*x886))+((x885*x888))+((r22*x891))+(((-1.1941874999722e-11)*x888))+(((-1.0)*x887*x890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.47499999994238e-6)*x886))+(((1.1941874999722e-11)*x889))+(((-1.20624999997192e-5)*py))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x888))+(((-1.0)*x885*x889))+((x885*x887))+((r22*x892))+((x888*x890))+((r12*x891))+(((-1.1941874999722e-11)*x887))+(((-1.0)*x886*x890))))+IKsqr(((((2.4999999999418)*py))+(((2.47499999994238e-6)*x887))+(((1.1941874999722e-11)*x886))+(((-1.0)*r12*x892))+(((-1.20624999997192e-5)*pz))+((x889*x890))+(((-2.47499999994238e-6)*x889))+(((-1.0)*x885*x886))+((x885*x888))+((r22*x891))+(((-1.1941874999722e-11)*x888))+(((-1.0)*x887*x890))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.47499999994238e-6)*x886))+(((1.1941874999722e-11)*x889))+(((-1.20624999997192e-5)*py))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x888))+(((-1.0)*x885*x889))+((x885*x887))+((r22*x892))+((x888*x890))+((r12*x891))+(((-1.1941874999722e-11)*x887))+(((-1.0)*x886*x890))), ((((2.4999999999418)*py))+(((2.47499999994238e-6)*x887))+(((1.1941874999722e-11)*x886))+(((-1.0)*r12*x892))+(((-1.20624999997192e-5)*pz))+((x889*x890))+(((-2.47499999994238e-6)*x889))+(((-1.0)*x885*x886))+((x885*x888))+((r22*x891))+(((-1.1941874999722e-11)*x888))+(((-1.0)*x887*x890))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x893=IKcos(j1);
IkReal x894=IKsin(j1);
IkReal x895=((0.4)*sj4);
IkReal x896=(r21*sj5);
IkReal x897=(cj5*r10);
IkReal x898=((0.4)*cj4);
IkReal x899=(cj5*r20);
IkReal x900=((0.4)*sj3);
IkReal x901=(r11*sj5);
IkReal x902=((1.93e-6)*x894);
IkReal x903=((9.9e-7)*x901);
IkReal x904=((0.4)*x893);
IkReal x905=((9.9e-7)*x897);
IkReal x906=((1.93e-6)*x893);
IkReal x907=((0.4)*x894);
IkReal x908=((9.9e-7)*x896);
IkReal x909=((9.9e-7)*x899);
IkReal x910=(x904+x905);
IkReal x911=(py+x902+x903);
IkReal x912=(x906+x907+x908);
evalcond[0]=((((-1.0)*x895*x901))+((x895*x897))+(((-1.0)*x910))+(((-1.0)*r12*x898))+x911);
evalcond[1]=((((-1.0)*x895*x899))+((x895*x896))+(((-1.0)*x912))+(((-1.0)*pz))+x909+((r22*x898)));
evalcond[2]=(((cj3*x898*x899))+(((-1.0)*r20*sj5*x900))+(((-1.0)*x910))+(((-1.0)*cj5*r21*x900))+((cj3*r22*x895))+x911+(((-1.0)*cj3*x896*x898)));
evalcond[3]=(((r10*sj5*x900))+((cj3*x898*x901))+(((-1.0)*x909))+(((-1.0)*cj3*x897*x898))+pz+(((-1.0)*cj3*r12*x895))+((cj5*r11*x900))+x912);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x913=(cj4*r12);
IkReal x914=(cj4*r22);
IkReal x915=(cj1*sj4);
IkReal x916=(r11*sj5);
IkReal x917=(r21*sj5);
IkReal x918=((1.0)*sj1);
IkReal x919=(sj1*sj4);
IkReal x920=(cj5*r20);
IkReal x921=((1.0)*cj5*r10);
if( IKabs((((x919*x920))+(((-1.0)*x914*x918))+((x915*x916))+(((-1.0)*x915*x921))+(((-1.0)*sj4*x917*x918))+((cj1*x913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x915*x920))+((x916*x919))+((x915*x917))+((sj1*x913))+((cj1*x914))+(((-1.0)*cj5*r10*sj4*x918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x919*x920))+(((-1.0)*x914*x918))+((x915*x916))+(((-1.0)*x915*x921))+(((-1.0)*sj4*x917*x918))+((cj1*x913))))+IKsqr(((((-1.0)*x915*x920))+((x916*x919))+((x915*x917))+((sj1*x913))+((cj1*x914))+(((-1.0)*cj5*r10*sj4*x918))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x919*x920))+(((-1.0)*x914*x918))+((x915*x916))+(((-1.0)*x915*x921))+(((-1.0)*sj4*x917*x918))+((cj1*x913))), ((((-1.0)*x915*x920))+((x916*x919))+((x915*x917))+((sj1*x913))+((cj1*x914))+(((-1.0)*cj5*r10*sj4*x918))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x922=IKcos(j2);
IkReal x923=IKsin(j2);
IkReal x924=(cj3*cj4);
IkReal x925=(r21*sj5);
IkReal x926=((1.0)*r22);
IkReal x927=(cj5*r10);
IkReal x928=(cj5*r20);
IkReal x929=(cj5*sj3);
IkReal x930=(cj3*sj4);
IkReal x931=(r11*sj5);
IkReal x932=((1.0)*sj4);
IkReal x933=((1.0)*r12);
IkReal x934=(sj3*sj5);
IkReal x935=(cj1*x922);
IkReal x936=(cj1*x923);
IkReal x937=(sj1*x923);
IkReal x938=(sj1*x922);
IkReal x939=((1.0)*x937);
evalcond[0]=((((-1.0)*x931*x932))+((sj4*x927))+(((-1.0)*cj4*x933))+x938+x936);
evalcond[1]=((((-1.0)*x925*x932))+((sj4*x928))+(((-1.0)*cj4*x926))+x935+(((-1.0)*x939)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-0.4)*x937))+(((-9.9e-7)*x925))+(((-1.0)*pz))+(((9.9e-7)*x928))+(((0.4)*x935))+(((-0.4)*sj1)));
evalcond[3]=((((-9.9e-7)*x931))+(((0.4)*cj1))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((9.9e-7)*x927))+(((0.4)*x936))+(((0.4)*x938)));
evalcond[4]=((((-1.0)*x930*x933))+((x924*x931))+((r10*x934))+((r11*x929))+x935+(((-1.0)*x924*x927))+(((-1.0)*x939)));
evalcond[5]=(((x924*x925))+((r21*x929))+(((-1.0)*x936))+(((-1.0)*x938))+(((-1.0)*x926*x930))+((r20*x934))+(((-1.0)*x924*x928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x940=((1.0)*cj5);
IkReal x941=((1.0)*sj5);
IkReal x942=((((-1.0)*r10*sj4*x940))+((r11*sj4*sj5))+((cj4*r12)));
j3eval[0]=x942;
j3eval[1]=((IKabs((((r22*sj4))+(((-1.0)*cj4*r21*x941))+((cj4*cj5*r20)))))+(IKabs(((((-1.0)*r21*x940))+(((-1.0)*r20*x941))))));
j3eval[2]=IKsign(x942);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x943=((1.0)*r11);
IkReal x944=((1.0)*sj5);
IkReal x945=(((cj5*r20*sj4))+(((-1.0)*r21*sj4*x944))+(((-1.0)*cj4*r22)));
j3eval[0]=x945;
j3eval[1]=((IKabs(((((-1.0)*r10*x944))+(((-1.0)*cj5*x943)))))+(IKabs(((((-1.0)*cj4*sj5*x943))+((cj4*cj5*r10))+((r12*sj4))))));
j3eval[2]=IKsign(x945);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x946=cj4*cj4;
IkReal x947=cj5*cj5;
IkReal x948=r01*r01;
IkReal x949=r02*r02;
IkReal x950=r00*r00;
IkReal x951=(cj5*r00);
IkReal x952=(r01*sj5);
IkReal x953=(r02*sj4);
IkReal x954=((2.0)*cj4);
IkReal x955=((1.0)*x946);
IkReal x956=(x947*x950);
IkReal x957=(x947*x948);
IkReal x958=(((x952*x953*x954))+((x946*x949))+(((-2.0)*x951*x952))+(((-1.0)*x950))+(((-1.0)*x957))+(((-1.0)*x949))+(((-1.0)*x951*x953*x954))+((x946*x957))+(((2.0)*x946*x951*x952))+(((-1.0)*x955*x956))+x956+(((-1.0)*x948*x955)));
j3eval[0]=x958;
j3eval[1]=IKsign(x958);
j3eval[2]=((IKabs(((((-1.0)*x953))+(((-1.0)*cj4*x951))+((cj4*x952)))))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x959=cj4*cj4;
IkReal x960=cj5*cj5;
IkReal x961=r01*r01;
IkReal x962=r02*r02;
IkReal x963=r00*r00;
IkReal x964=((1.0)*cj5);
IkReal x965=(cj4*r00);
IkReal x966=(r02*sj4);
IkReal x967=((2.0)*cj5);
IkReal x968=(r00*sj5);
IkReal x969=((1.0)*x960);
IkReal x970=(cj4*r01*sj5);
IkReal x971=(x959*x961);
CheckValue<IkReal> x972=IKPowWithIntegerCheck(IKsign((((r01*x959*x967*x968))+(((-1.0)*x961*x969))+(((-1.0)*x971))+(((-1.0)*x963))+(((-1.0)*x962))+(((2.0)*x966*x970))+((x960*x963))+((x960*x971))+((x959*x962))+(((-1.0)*r01*x967*x968))+(((-1.0)*x959*x963*x969))+(((-1.0)*x965*x966*x967)))),-1);
if(!x972.valid){
continue;
}
CheckValue<IkReal> x973 = IKatan2WithCheck(IkReal(((((-1.0)*x966))+(((-1.0)*x964*x965))+x970)),IkReal(((((-1.0)*x968))+(((-1.0)*r01*x964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x973.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x972.value)))+(x973.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x974=IKsin(j3);
IkReal x975=IKcos(j3);
IkReal x976=(r02*sj4);
IkReal x977=(cj4*cj5);
IkReal x978=(cj4*sj5);
IkReal x979=(cj5*r01);
IkReal x980=(r00*sj5);
IkReal x981=((1.0)*x975);
IkReal x982=((1.0)*x974);
evalcond[0]=(((r01*x975*x978))+(((-1.0)*r00*x977*x981))+((x974*x980))+((x974*x979))+(((-1.0)*x976*x981)));
evalcond[1]=(((r21*x974*x978))+(((-1.0)*r20*sj5*x981))+(((-1.0)*r20*x977*x982))+(((-1.0)*cj5*r21*x981))+(((-1.0)*r22*sj4*x982)));
evalcond[2]=(((r11*x974*x978))+(((-1.0)*r10*sj5*x981))+(((-1.0)*r12*sj4*x982))+(((-1.0)*cj5*r11*x981))+(((-1.0)*r10*x977*x982)));
evalcond[3]=((1.0)+((r01*x974*x978))+(((-1.0)*r00*x977*x982))+(((-1.0)*x980*x981))+(((-1.0)*x976*x982))+(((-1.0)*x979*x981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x983=((4.82499999988767e-6)*sj4);
IkReal x984=(cj5*r20);
IkReal x985=(r11*sj5);
IkReal x986=(r21*sj5);
IkReal x987=(cj5*r10);
IkReal x988=((0.999999999976719)*sj4);
IkReal x989=((4.82499999988767e-6)*cj4);
IkReal x990=((0.999999999976719)*cj4);
if( IKabs(((((2.47499999994238e-6)*x984))+((x983*x987))+(((-2.47499999994238e-6)*x986))+((x986*x988))+(((-1.1941874999722e-11)*x987))+(((1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x985))+(((-1.0)*x984*x988))+((r22*x990))+(((-1.0)*r12*x989))+(((-2.4999999999418)*pz))+(((-1.0)*x983*x985)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.47499999994238e-6)*x987))+((x983*x986))+((r12*x990))+((r22*x989))+(((-2.47499999994238e-6)*x985))+(((-1.1941874999722e-11)*x986))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x984))+(((-1.0)*x987*x988))+((x985*x988))+(((-2.4999999999418)*py))+(((-1.0)*x983*x984)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.47499999994238e-6)*x984))+((x983*x987))+(((-2.47499999994238e-6)*x986))+((x986*x988))+(((-1.1941874999722e-11)*x987))+(((1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x985))+(((-1.0)*x984*x988))+((r22*x990))+(((-1.0)*r12*x989))+(((-2.4999999999418)*pz))+(((-1.0)*x983*x985))))+IKsqr(((((2.47499999994238e-6)*x987))+((x983*x986))+((r12*x990))+((r22*x989))+(((-2.47499999994238e-6)*x985))+(((-1.1941874999722e-11)*x986))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x984))+(((-1.0)*x987*x988))+((x985*x988))+(((-2.4999999999418)*py))+(((-1.0)*x983*x984))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.47499999994238e-6)*x984))+((x983*x987))+(((-2.47499999994238e-6)*x986))+((x986*x988))+(((-1.1941874999722e-11)*x987))+(((1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x985))+(((-1.0)*x984*x988))+((r22*x990))+(((-1.0)*r12*x989))+(((-2.4999999999418)*pz))+(((-1.0)*x983*x985))), ((((2.47499999994238e-6)*x987))+((x983*x986))+((r12*x990))+((r22*x989))+(((-2.47499999994238e-6)*x985))+(((-1.1941874999722e-11)*x986))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x984))+(((-1.0)*x987*x988))+((x985*x988))+(((-2.4999999999418)*py))+(((-1.0)*x983*x984))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x991=IKcos(j1);
IkReal x992=IKsin(j1);
IkReal x993=((1.0)*pz);
IkReal x994=((0.4)*sj4);
IkReal x995=(r21*sj5);
IkReal x996=(cj5*r10);
IkReal x997=((0.4)*cj4);
IkReal x998=(cj5*r20);
IkReal x999=((0.4)*sj3);
IkReal x1000=(r11*sj5);
IkReal x1001=((0.4)*x991);
IkReal x1002=((9.9e-7)*x1000);
IkReal x1003=((9.9e-7)*x996);
IkReal x1004=((1.93e-6)*x992);
IkReal x1005=((9.9e-7)*x998);
IkReal x1006=((1.93e-6)*x991);
IkReal x1007=((0.4)*x992);
IkReal x1008=((9.9e-7)*x995);
IkReal x1009=(x1004+x1003);
IkReal x1010=(x1002+x1001);
IkReal x1011=(x1008+x1007+x1006+x993);
evalcond[0]=(((x1000*x994))+((r12*x997))+x1009+(((-1.0)*x994*x996))+(((-1.0)*x1010))+(((-1.0)*py)));
evalcond[1]=(((x994*x995))+x1005+(((-1.0)*x994*x998))+(((-1.0)*x1011))+((r22*x997)));
evalcond[2]=(x1010+(((-1.0)*x1009))+(((-1.0)*cj3*r22*x994))+py+(((-1.0)*cj3*x997*x998))+((cj5*r21*x999))+((r20*sj5*x999))+((cj3*x995*x997)));
evalcond[3]=(x1005+(((-1.0)*x1011))+((cj5*r11*x999))+(((-1.0)*cj3*r12*x994))+((r10*sj5*x999))+(((-1.0)*cj3*x996*x997))+((cj3*x1000*x997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1012=((1.0)*cj1);
IkReal x1013=(sj4*sj5);
IkReal x1014=(cj5*sj4);
IkReal x1015=((1.0)*sj1);
IkReal x1016=(sj1*x1014);
IkReal x1017=(cj4*x1015);
if( IKabs(((((-1.0)*r22*x1017))+(((-1.0)*r21*x1013*x1015))+(((-1.0)*r11*x1012*x1013))+((r20*x1016))+((cj1*r10*x1014))+(((-1.0)*cj4*r12*x1012)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r11*x1013*x1015))+(((-1.0)*r20*x1012*x1014))+(((-1.0)*r12*x1017))+((cj1*r21*x1013))+((r10*x1016)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1017))+(((-1.0)*r21*x1013*x1015))+(((-1.0)*r11*x1012*x1013))+((r20*x1016))+((cj1*r10*x1014))+(((-1.0)*cj4*r12*x1012))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r11*x1013*x1015))+(((-1.0)*r20*x1012*x1014))+(((-1.0)*r12*x1017))+((cj1*r21*x1013))+((r10*x1016))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1017))+(((-1.0)*r21*x1013*x1015))+(((-1.0)*r11*x1012*x1013))+((r20*x1016))+((cj1*r10*x1014))+(((-1.0)*cj4*r12*x1012))), (((cj1*cj4*r22))+(((-1.0)*r11*x1013*x1015))+(((-1.0)*r20*x1012*x1014))+(((-1.0)*r12*x1017))+((cj1*r21*x1013))+((r10*x1016))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1018=IKcos(j2);
IkReal x1019=IKsin(j2);
IkReal x1020=(cj3*cj4);
IkReal x1021=(r21*sj5);
IkReal x1022=((1.0)*r22);
IkReal x1023=(cj5*r10);
IkReal x1024=(cj5*r20);
IkReal x1025=(cj5*sj3);
IkReal x1026=((1.0)*sj1);
IkReal x1027=(cj3*sj4);
IkReal x1028=(sj3*sj5);
IkReal x1029=(r11*sj5);
IkReal x1030=((1.0)*sj4);
IkReal x1031=((1.0)*r12);
IkReal x1032=((0.4)*sj1);
IkReal x1033=(cj1*x1018);
IkReal x1034=((0.4)*x1019);
IkReal x1035=(x1018*x1026);
IkReal x1036=((1.0)*cj1*x1019);
IkReal x1037=(x1036+x1035);
evalcond[0]=((((-1.0)*cj4*x1022))+x1033+(((-1.0)*x1021*x1030))+(((-1.0)*x1019*x1026))+((sj4*x1024)));
evalcond[1]=((((-1.0)*x1037))+(((-1.0)*cj4*x1031))+(((-1.0)*x1029*x1030))+((sj4*x1023)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x1033))+(((-1.0)*x1032))+(((-9.9e-7)*x1021))+(((-1.0)*pz))+(((-1.0)*x1019*x1032))+(((9.9e-7)*x1024)));
evalcond[3]=((((1.93e-6)*sj1))+(((-9.9e-7)*x1029))+(((-1.0)*py))+(((-1.0)*cj1*x1034))+(((-1.0)*x1018*x1032))+(((9.9e-7)*x1023))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*x1027*x1031))+(((-1.0)*x1033))+((sj1*x1019))+((r11*x1025))+((x1020*x1029))+(((-1.0)*x1020*x1023))+((r10*x1028)));
evalcond[5]=(((r20*x1028))+(((-1.0)*x1037))+((r21*x1025))+(((-1.0)*x1022*x1027))+((x1020*x1021))+(((-1.0)*x1020*x1024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1038=((1.0)*r11);
IkReal x1039=((1.0)*sj5);
CheckValue<IkReal> x1040 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1039))+(((-1.0)*cj5*x1038)))),IkReal(((((-1.0)*cj4*sj5*x1038))+((cj4*cj5*r10))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1040.valid){
continue;
}
CheckValue<IkReal> x1041=IKPowWithIntegerCheck(IKsign((((cj5*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x1039)))),-1);
if(!x1041.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1040.value)+(((1.5707963267949)*(x1041.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1042=IKsin(j3);
IkReal x1043=IKcos(j3);
IkReal x1044=(r02*sj4);
IkReal x1045=(cj4*cj5);
IkReal x1046=(cj4*sj5);
IkReal x1047=(cj5*r01);
IkReal x1048=(r00*sj5);
IkReal x1049=((1.0)*x1043);
IkReal x1050=((1.0)*x1042);
evalcond[0]=(((x1042*x1047))+((x1042*x1048))+(((-1.0)*x1044*x1049))+(((-1.0)*r00*x1045*x1049))+((r01*x1043*x1046)));
evalcond[1]=((((-1.0)*r20*sj5*x1049))+(((-1.0)*cj5*r21*x1049))+(((-1.0)*r20*x1045*x1050))+((r21*x1042*x1046))+(((-1.0)*r22*sj4*x1050)));
evalcond[2]=(((r11*x1042*x1046))+(((-1.0)*r10*x1045*x1050))+(((-1.0)*r10*sj5*x1049))+(((-1.0)*r12*sj4*x1050))+(((-1.0)*cj5*r11*x1049)));
evalcond[3]=((1.0)+(((-1.0)*x1044*x1050))+(((-1.0)*r00*x1045*x1050))+((r01*x1042*x1046))+(((-1.0)*x1048*x1049))+(((-1.0)*x1047*x1049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1051=((4.82499999988767e-6)*sj4);
IkReal x1052=(cj5*r20);
IkReal x1053=(r11*sj5);
IkReal x1054=(r21*sj5);
IkReal x1055=(cj5*r10);
IkReal x1056=((0.999999999976719)*sj4);
IkReal x1057=((4.82499999988767e-6)*cj4);
IkReal x1058=((0.999999999976719)*cj4);
if( IKabs(((((1.1941874999722e-11)*x1053))+(((-1.0)*x1052*x1056))+((x1054*x1056))+(((-1.0)*r12*x1057))+(((1.20624999997192e-5)*py))+((x1051*x1055))+(((-1.1941874999722e-11)*x1055))+(((-2.47499999994238e-6)*x1054))+((r22*x1058))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x1052))+(((-1.0)*x1051*x1053)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.1941874999722e-11)*x1052))+((r12*x1058))+((x1053*x1056))+(((-1.20624999997192e-5)*pz))+((x1051*x1054))+(((-1.0)*x1055*x1056))+(((-1.1941874999722e-11)*x1054))+(((-2.47499999994238e-6)*x1053))+((r22*x1057))+(((-2.4999999999418)*py))+(((2.47499999994238e-6)*x1055))+(((-1.0)*x1051*x1052)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.1941874999722e-11)*x1053))+(((-1.0)*x1052*x1056))+((x1054*x1056))+(((-1.0)*r12*x1057))+(((1.20624999997192e-5)*py))+((x1051*x1055))+(((-1.1941874999722e-11)*x1055))+(((-2.47499999994238e-6)*x1054))+((r22*x1058))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x1052))+(((-1.0)*x1051*x1053))))+IKsqr(((((1.1941874999722e-11)*x1052))+((r12*x1058))+((x1053*x1056))+(((-1.20624999997192e-5)*pz))+((x1051*x1054))+(((-1.0)*x1055*x1056))+(((-1.1941874999722e-11)*x1054))+(((-2.47499999994238e-6)*x1053))+((r22*x1057))+(((-2.4999999999418)*py))+(((2.47499999994238e-6)*x1055))+(((-1.0)*x1051*x1052))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.1941874999722e-11)*x1053))+(((-1.0)*x1052*x1056))+((x1054*x1056))+(((-1.0)*r12*x1057))+(((1.20624999997192e-5)*py))+((x1051*x1055))+(((-1.1941874999722e-11)*x1055))+(((-2.47499999994238e-6)*x1054))+((r22*x1058))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x1052))+(((-1.0)*x1051*x1053))), ((((1.1941874999722e-11)*x1052))+((r12*x1058))+((x1053*x1056))+(((-1.20624999997192e-5)*pz))+((x1051*x1054))+(((-1.0)*x1055*x1056))+(((-1.1941874999722e-11)*x1054))+(((-2.47499999994238e-6)*x1053))+((r22*x1057))+(((-2.4999999999418)*py))+(((2.47499999994238e-6)*x1055))+(((-1.0)*x1051*x1052))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1059=IKcos(j1);
IkReal x1060=IKsin(j1);
IkReal x1061=((1.0)*pz);
IkReal x1062=((0.4)*sj4);
IkReal x1063=(r21*sj5);
IkReal x1064=(cj5*r10);
IkReal x1065=((0.4)*cj4);
IkReal x1066=(cj5*r20);
IkReal x1067=((0.4)*sj3);
IkReal x1068=(r11*sj5);
IkReal x1069=((0.4)*x1059);
IkReal x1070=((9.9e-7)*x1068);
IkReal x1071=((9.9e-7)*x1064);
IkReal x1072=((1.93e-6)*x1060);
IkReal x1073=((9.9e-7)*x1066);
IkReal x1074=((1.93e-6)*x1059);
IkReal x1075=((0.4)*x1060);
IkReal x1076=((9.9e-7)*x1063);
IkReal x1077=(x1072+x1071);
IkReal x1078=(x1070+x1069);
IkReal x1079=(x1076+x1074+x1075+x1061);
evalcond[0]=(((r12*x1065))+x1077+(((-1.0)*x1062*x1064))+(((-1.0)*py))+((x1062*x1068))+(((-1.0)*x1078)));
evalcond[1]=(x1073+(((-1.0)*x1062*x1066))+((x1062*x1063))+((r22*x1065))+(((-1.0)*x1079)));
evalcond[2]=(((cj5*r21*x1067))+(((-1.0)*cj3*x1065*x1066))+x1078+(((-1.0)*cj3*r22*x1062))+py+((cj3*x1063*x1065))+((r20*sj5*x1067))+(((-1.0)*x1077)));
evalcond[3]=(x1073+((cj5*r11*x1067))+((cj3*x1065*x1068))+(((-1.0)*cj3*r12*x1062))+(((-1.0)*cj3*x1064*x1065))+((r10*sj5*x1067))+(((-1.0)*x1079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1080=((1.0)*cj1);
IkReal x1081=(sj4*sj5);
IkReal x1082=(cj5*sj4);
IkReal x1083=((1.0)*sj1);
IkReal x1084=(sj1*x1082);
IkReal x1085=(cj4*x1083);
if( IKabs(((((-1.0)*r21*x1081*x1083))+((r20*x1084))+(((-1.0)*r11*x1080*x1081))+(((-1.0)*r22*x1085))+(((-1.0)*cj4*r12*x1080))+((cj1*r10*x1082)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((r10*x1084))+((cj1*r21*x1081))+(((-1.0)*r20*x1080*x1082))+(((-1.0)*r11*x1081*x1083))+(((-1.0)*r12*x1085)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x1081*x1083))+((r20*x1084))+(((-1.0)*r11*x1080*x1081))+(((-1.0)*r22*x1085))+(((-1.0)*cj4*r12*x1080))+((cj1*r10*x1082))))+IKsqr((((cj1*cj4*r22))+((r10*x1084))+((cj1*r21*x1081))+(((-1.0)*r20*x1080*x1082))+(((-1.0)*r11*x1081*x1083))+(((-1.0)*r12*x1085))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x1081*x1083))+((r20*x1084))+(((-1.0)*r11*x1080*x1081))+(((-1.0)*r22*x1085))+(((-1.0)*cj4*r12*x1080))+((cj1*r10*x1082))), (((cj1*cj4*r22))+((r10*x1084))+((cj1*r21*x1081))+(((-1.0)*r20*x1080*x1082))+(((-1.0)*r11*x1081*x1083))+(((-1.0)*r12*x1085))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1086=IKcos(j2);
IkReal x1087=IKsin(j2);
IkReal x1088=(cj3*cj4);
IkReal x1089=(r21*sj5);
IkReal x1090=((1.0)*r22);
IkReal x1091=(cj5*r10);
IkReal x1092=(cj5*r20);
IkReal x1093=(cj5*sj3);
IkReal x1094=((1.0)*sj1);
IkReal x1095=(cj3*sj4);
IkReal x1096=(sj3*sj5);
IkReal x1097=(r11*sj5);
IkReal x1098=((1.0)*sj4);
IkReal x1099=((1.0)*r12);
IkReal x1100=((0.4)*sj1);
IkReal x1101=(cj1*x1086);
IkReal x1102=((0.4)*x1087);
IkReal x1103=(x1086*x1094);
IkReal x1104=((1.0)*cj1*x1087);
IkReal x1105=(x1104+x1103);
evalcond[0]=(x1101+(((-1.0)*x1089*x1098))+((sj4*x1092))+(((-1.0)*x1087*x1094))+(((-1.0)*cj4*x1090)));
evalcond[1]=((((-1.0)*x1097*x1098))+((sj4*x1091))+(((-1.0)*cj4*x1099))+(((-1.0)*x1105)));
evalcond[2]=((((-1.0)*x1087*x1100))+(((-1.93e-6)*cj1))+(((-1.0)*pz))+(((0.4)*x1101))+(((-9.9e-7)*x1089))+(((-1.0)*x1100))+(((9.9e-7)*x1092)));
evalcond[3]=((((-9.9e-7)*x1097))+(((1.93e-6)*sj1))+(((-1.0)*cj1*x1102))+(((-1.0)*py))+(((-1.0)*x1086*x1100))+(((9.9e-7)*x1091))+(((-0.4)*cj1)));
evalcond[4]=(((r10*x1096))+(((-1.0)*x1101))+((x1088*x1097))+(((-1.0)*x1095*x1099))+((r11*x1093))+((sj1*x1087))+(((-1.0)*x1088*x1091)));
evalcond[5]=((((-1.0)*x1090*x1095))+((r21*x1093))+(((-1.0)*x1105))+((x1088*x1089))+((r20*x1096))+(((-1.0)*x1088*x1092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1106=((1.0)*r21);
CheckValue<IkReal> x1107=IKPowWithIntegerCheck(IKsign((((r11*sj4*sj5))+((cj4*r12))+(((-1.0)*cj5*r10*sj4)))),-1);
if(!x1107.valid){
continue;
}
CheckValue<IkReal> x1108 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x1106))+(((-1.0)*r20*sj5)))),IkReal((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*sj5*x1106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1108.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1107.value)))+(x1108.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1109=IKsin(j3);
IkReal x1110=IKcos(j3);
IkReal x1111=(r02*sj4);
IkReal x1112=(cj4*cj5);
IkReal x1113=(cj4*sj5);
IkReal x1114=(cj5*r01);
IkReal x1115=(r00*sj5);
IkReal x1116=((1.0)*x1110);
IkReal x1117=((1.0)*x1109);
evalcond[0]=(((x1109*x1114))+((x1109*x1115))+(((-1.0)*r00*x1112*x1116))+((r01*x1110*x1113))+(((-1.0)*x1111*x1116)));
evalcond[1]=((((-1.0)*r20*x1112*x1117))+(((-1.0)*r20*sj5*x1116))+((r21*x1109*x1113))+(((-1.0)*r22*sj4*x1117))+(((-1.0)*cj5*r21*x1116)));
evalcond[2]=((((-1.0)*cj5*r11*x1116))+(((-1.0)*r10*sj5*x1116))+((r11*x1109*x1113))+(((-1.0)*r12*sj4*x1117))+(((-1.0)*r10*x1112*x1117)));
evalcond[3]=((1.0)+(((-1.0)*x1114*x1116))+((r01*x1109*x1113))+(((-1.0)*r00*x1112*x1117))+(((-1.0)*x1111*x1117))+(((-1.0)*x1115*x1116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1118=((4.82499999988767e-6)*sj4);
IkReal x1119=(cj5*r20);
IkReal x1120=(r11*sj5);
IkReal x1121=(r21*sj5);
IkReal x1122=(cj5*r10);
IkReal x1123=((0.999999999976719)*sj4);
IkReal x1124=((4.82499999988767e-6)*cj4);
IkReal x1125=((0.999999999976719)*cj4);
if( IKabs(((((1.1941874999722e-11)*x1120))+(((-1.0)*r12*x1124))+((x1121*x1123))+(((1.20624999997192e-5)*py))+((r22*x1125))+(((-1.0)*x1119*x1123))+(((-1.0)*x1118*x1120))+(((-2.4999999999418)*pz))+((x1118*x1122))+(((-2.47499999994238e-6)*x1121))+(((2.47499999994238e-6)*x1119))+(((-1.1941874999722e-11)*x1122)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1120*x1123))+(((-1.0)*x1122*x1123))+((r22*x1124))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x1118*x1119))+((r12*x1125))+(((2.47499999994238e-6)*x1122))+(((-2.4999999999418)*py))+((x1118*x1121))+(((1.1941874999722e-11)*x1119))+(((-2.47499999994238e-6)*x1120))+(((-1.1941874999722e-11)*x1121)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.1941874999722e-11)*x1120))+(((-1.0)*r12*x1124))+((x1121*x1123))+(((1.20624999997192e-5)*py))+((r22*x1125))+(((-1.0)*x1119*x1123))+(((-1.0)*x1118*x1120))+(((-2.4999999999418)*pz))+((x1118*x1122))+(((-2.47499999994238e-6)*x1121))+(((2.47499999994238e-6)*x1119))+(((-1.1941874999722e-11)*x1122))))+IKsqr((((x1120*x1123))+(((-1.0)*x1122*x1123))+((r22*x1124))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x1118*x1119))+((r12*x1125))+(((2.47499999994238e-6)*x1122))+(((-2.4999999999418)*py))+((x1118*x1121))+(((1.1941874999722e-11)*x1119))+(((-2.47499999994238e-6)*x1120))+(((-1.1941874999722e-11)*x1121))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.1941874999722e-11)*x1120))+(((-1.0)*r12*x1124))+((x1121*x1123))+(((1.20624999997192e-5)*py))+((r22*x1125))+(((-1.0)*x1119*x1123))+(((-1.0)*x1118*x1120))+(((-2.4999999999418)*pz))+((x1118*x1122))+(((-2.47499999994238e-6)*x1121))+(((2.47499999994238e-6)*x1119))+(((-1.1941874999722e-11)*x1122))), (((x1120*x1123))+(((-1.0)*x1122*x1123))+((r22*x1124))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x1118*x1119))+((r12*x1125))+(((2.47499999994238e-6)*x1122))+(((-2.4999999999418)*py))+((x1118*x1121))+(((1.1941874999722e-11)*x1119))+(((-2.47499999994238e-6)*x1120))+(((-1.1941874999722e-11)*x1121))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1126=IKcos(j1);
IkReal x1127=IKsin(j1);
IkReal x1128=((1.0)*pz);
IkReal x1129=((0.4)*sj4);
IkReal x1130=(r21*sj5);
IkReal x1131=(cj5*r10);
IkReal x1132=((0.4)*cj4);
IkReal x1133=(cj5*r20);
IkReal x1134=((0.4)*sj3);
IkReal x1135=(r11*sj5);
IkReal x1136=((0.4)*x1126);
IkReal x1137=((9.9e-7)*x1135);
IkReal x1138=((9.9e-7)*x1131);
IkReal x1139=((1.93e-6)*x1127);
IkReal x1140=((9.9e-7)*x1133);
IkReal x1141=((1.93e-6)*x1126);
IkReal x1142=((0.4)*x1127);
IkReal x1143=((9.9e-7)*x1130);
IkReal x1144=(x1139+x1138);
IkReal x1145=(x1137+x1136);
IkReal x1146=(x1142+x1143+x1141+x1128);
evalcond[0]=(x1144+((x1129*x1135))+(((-1.0)*x1145))+(((-1.0)*py))+((r12*x1132))+(((-1.0)*x1129*x1131)));
evalcond[1]=(x1140+((x1129*x1130))+(((-1.0)*x1146))+((r22*x1132))+(((-1.0)*x1129*x1133)));
evalcond[2]=(x1145+(((-1.0)*x1144))+((r20*sj5*x1134))+((cj5*r21*x1134))+py+(((-1.0)*cj3*r22*x1129))+(((-1.0)*cj3*x1132*x1133))+((cj3*x1130*x1132)));
evalcond[3]=(x1140+((cj5*r11*x1134))+(((-1.0)*x1146))+(((-1.0)*cj3*r12*x1129))+((cj3*x1132*x1135))+(((-1.0)*cj3*x1131*x1132))+((r10*sj5*x1134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1147=((1.0)*cj1);
IkReal x1148=(sj4*sj5);
IkReal x1149=(cj5*sj4);
IkReal x1150=((1.0)*sj1);
IkReal x1151=(sj1*x1149);
IkReal x1152=(cj4*x1150);
if( IKabs(((((-1.0)*r11*x1147*x1148))+((cj1*r10*x1149))+((r20*x1151))+(((-1.0)*r21*x1148*x1150))+(((-1.0)*cj4*r12*x1147))+(((-1.0)*r22*x1152)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r12*x1152))+(((-1.0)*r20*x1147*x1149))+((cj1*r21*x1148))+(((-1.0)*r11*x1148*x1150))+((r10*x1151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1147*x1148))+((cj1*r10*x1149))+((r20*x1151))+(((-1.0)*r21*x1148*x1150))+(((-1.0)*cj4*r12*x1147))+(((-1.0)*r22*x1152))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r12*x1152))+(((-1.0)*r20*x1147*x1149))+((cj1*r21*x1148))+(((-1.0)*r11*x1148*x1150))+((r10*x1151))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x1147*x1148))+((cj1*r10*x1149))+((r20*x1151))+(((-1.0)*r21*x1148*x1150))+(((-1.0)*cj4*r12*x1147))+(((-1.0)*r22*x1152))), (((cj1*cj4*r22))+(((-1.0)*r12*x1152))+(((-1.0)*r20*x1147*x1149))+((cj1*r21*x1148))+(((-1.0)*r11*x1148*x1150))+((r10*x1151))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1153=IKcos(j2);
IkReal x1154=IKsin(j2);
IkReal x1155=(cj3*cj4);
IkReal x1156=(r21*sj5);
IkReal x1157=((1.0)*r22);
IkReal x1158=(cj5*r10);
IkReal x1159=(cj5*r20);
IkReal x1160=(cj5*sj3);
IkReal x1161=((1.0)*sj1);
IkReal x1162=(cj3*sj4);
IkReal x1163=(sj3*sj5);
IkReal x1164=(r11*sj5);
IkReal x1165=((1.0)*sj4);
IkReal x1166=((1.0)*r12);
IkReal x1167=((0.4)*sj1);
IkReal x1168=(cj1*x1153);
IkReal x1169=((0.4)*x1154);
IkReal x1170=(x1153*x1161);
IkReal x1171=((1.0)*cj1*x1154);
IkReal x1172=(x1171+x1170);
evalcond[0]=((((-1.0)*x1156*x1165))+x1168+(((-1.0)*cj4*x1157))+(((-1.0)*x1154*x1161))+((sj4*x1159)));
evalcond[1]=((((-1.0)*cj4*x1166))+(((-1.0)*x1172))+(((-1.0)*x1164*x1165))+((sj4*x1158)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x1156))+(((0.4)*x1168))+(((-1.0)*pz))+(((-1.0)*x1167))+(((9.9e-7)*x1159))+(((-1.0)*x1154*x1167)));
evalcond[3]=((((1.93e-6)*sj1))+(((-1.0)*x1153*x1167))+(((-1.0)*py))+(((-1.0)*cj1*x1169))+(((9.9e-7)*x1158))+(((-9.9e-7)*x1164))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*x1162*x1166))+((r10*x1163))+((x1155*x1164))+(((-1.0)*x1155*x1158))+((r11*x1160))+((sj1*x1154))+(((-1.0)*x1168)));
evalcond[5]=(((r20*x1163))+((r21*x1160))+(((-1.0)*x1155*x1159))+(((-1.0)*x1172))+(((-1.0)*x1157*x1162))+((x1155*x1156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1173=((1.0)*sj0);
IkReal x1174=(cj4*cj5);
IkReal x1175=(cj0*r00);
IkReal x1176=((1.0)*cj5);
IkReal x1177=(cj4*sj5);
IkReal x1178=(cj0*r01);
CheckValue<IkReal> x1179 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5*x1173))+(((-1.0)*sj5*x1175))+(((-1.0)*x1176*x1178))+(((-1.0)*cj5*r11*x1173)))),IkReal((((x1174*x1175))+((r12*sj0*sj4))+(((-1.0)*r11*x1173*x1177))+((r10*sj0*x1174))+(((-1.0)*x1177*x1178))+((cj0*r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1179.valid){
continue;
}
CheckValue<IkReal> x1180=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x1176)))),-1);
if(!x1180.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1179.value)+(((1.5707963267949)*(x1180.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1181=IKsin(j3);
IkReal x1182=IKcos(j3);
IkReal x1183=((1.0)*cj5);
IkReal x1184=(cj4*x1181);
IkReal x1185=((1.0)*sj5*x1182);
IkReal x1186=((1.0)*sj4*x1181);
evalcond[0]=(((r21*sj5*x1184))+(((-1.0)*r22*x1186))+(((-1.0)*r21*x1182*x1183))+(((-1.0)*r20*x1183*x1184))+(((-1.0)*r20*x1185)));
evalcond[1]=(cj0+(((-1.0)*r10*x1183*x1184))+(((-1.0)*r11*x1182*x1183))+((r11*sj5*x1184))+(((-1.0)*r10*x1185))+(((-1.0)*r12*x1186)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1183*x1184))+(((-1.0)*r01*x1182*x1183))+((r01*sj5*x1184))+(((-1.0)*r00*x1185))+(((-1.0)*r02*x1186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x1187=sj0*sj0;
j1eval[0]=x1187;
j1eval[1]=IKsign(x1187);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1188=cj0*cj0;
j1eval[0]=x1188;
j1eval[1]=IKsign(x1188);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=sj0;
j1eval[1]=IKsign(sj0);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1189=((4.82499999988767e-6)*sj4);
IkReal x1190=(r01*sj5);
IkReal x1191=((0.999999999976719)*cj4);
IkReal x1192=(cj5*r00);
IkReal x1193=(r21*sj5);
IkReal x1194=(cj5*r20);
IkReal x1195=((0.999999999976719)*sj4);
IkReal x1196=((4.82499999988767e-6)*cj4);
if( IKabs(((((2.47499999994238e-6)*x1194))+(((-1.0)*x1189*x1192))+(((-1.0)*x1194*x1195))+((x1189*x1190))+((r22*x1191))+(((-1.20624999997192e-5)*px))+((r02*x1196))+((x1193*x1195))+(((1.1941874999722e-11)*x1192))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x1193))+(((-1.1941874999722e-11)*x1190)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.47499999994238e-6)*x1190))+(((-1.0)*x1189*x1194))+(((-1.0)*x1190*x1195))+(((2.4999999999418)*px))+((x1189*x1193))+((r22*x1196))+(((-1.20624999997192e-5)*pz))+((x1192*x1195))+(((1.1941874999722e-11)*x1194))+(((-2.47499999994238e-6)*x1192))+(((-1.0)*r02*x1191))+(((-1.1941874999722e-11)*x1193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.47499999994238e-6)*x1194))+(((-1.0)*x1189*x1192))+(((-1.0)*x1194*x1195))+((x1189*x1190))+((r22*x1191))+(((-1.20624999997192e-5)*px))+((r02*x1196))+((x1193*x1195))+(((1.1941874999722e-11)*x1192))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x1193))+(((-1.1941874999722e-11)*x1190))))+IKsqr(((((2.47499999994238e-6)*x1190))+(((-1.0)*x1189*x1194))+(((-1.0)*x1190*x1195))+(((2.4999999999418)*px))+((x1189*x1193))+((r22*x1196))+(((-1.20624999997192e-5)*pz))+((x1192*x1195))+(((1.1941874999722e-11)*x1194))+(((-2.47499999994238e-6)*x1192))+(((-1.0)*r02*x1191))+(((-1.1941874999722e-11)*x1193))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.47499999994238e-6)*x1194))+(((-1.0)*x1189*x1192))+(((-1.0)*x1194*x1195))+((x1189*x1190))+((r22*x1191))+(((-1.20624999997192e-5)*px))+((r02*x1196))+((x1193*x1195))+(((1.1941874999722e-11)*x1192))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x1193))+(((-1.1941874999722e-11)*x1190))), ((((2.47499999994238e-6)*x1190))+(((-1.0)*x1189*x1194))+(((-1.0)*x1190*x1195))+(((2.4999999999418)*px))+((x1189*x1193))+((r22*x1196))+(((-1.20624999997192e-5)*pz))+((x1192*x1195))+(((1.1941874999722e-11)*x1194))+(((-2.47499999994238e-6)*x1192))+(((-1.0)*r02*x1191))+(((-1.1941874999722e-11)*x1193))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1197=IKcos(j1);
IkReal x1198=IKsin(j1);
IkReal x1199=((0.4)*sj4);
IkReal x1200=(r21*sj5);
IkReal x1201=((0.4)*cj4);
IkReal x1202=(cj5*r20);
IkReal x1203=(r01*sj5);
IkReal x1204=(cj5*r00);
IkReal x1205=((9.9e-7)*x1203);
IkReal x1206=((1.93e-6)*x1198);
IkReal x1207=((0.4)*x1197);
IkReal x1208=((9.9e-7)*x1204);
IkReal x1209=((1.93e-6)*x1197);
IkReal x1210=((0.4)*x1198);
IkReal x1211=((9.9e-7)*x1200);
IkReal x1212=((9.9e-7)*x1202);
IkReal x1213=((0.4)*sj3*sj5);
IkReal x1214=((0.4)*cj5*sj3);
IkReal x1215=(x1208+x1207);
IkReal x1216=(x1205+x1206+px);
IkReal x1217=(x1209+x1210+x1211);
evalcond[0]=((((-1.0)*x1199*x1203))+x1216+(((-1.0)*r02*x1201))+((x1199*x1204))+(((-1.0)*x1215)));
evalcond[1]=((((-1.0)*x1199*x1202))+x1212+((x1199*x1200))+(((-1.0)*pz))+(((-1.0)*x1217))+((r22*x1201)));
evalcond[2]=(x1216+((cj3*x1201*x1202))+(((-1.0)*cj3*x1200*x1201))+(((-1.0)*r20*x1213))+(((-1.0)*r21*x1214))+(((-1.0)*x1215))+((cj3*r22*x1199)));
evalcond[3]=(x1217+((cj3*x1201*x1203))+(((-1.0)*cj3*x1201*x1204))+((r00*x1213))+((r01*x1214))+(((-1.0)*cj3*r02*x1199))+pz+(((-1.0)*x1212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1218=(cj4*sj1);
IkReal x1219=(cj1*sj4);
IkReal x1220=((1.0)*cj5);
IkReal x1221=(r21*sj5);
IkReal x1222=(cj1*cj4);
IkReal x1223=(sj1*sj4);
IkReal x1224=(r01*sj4*sj5);
if( IKabs(((((-1.0)*r00*x1219*x1220))+(((-1.0)*x1221*x1223))+((r02*x1222))+(((-1.0)*r22*x1218))+((r01*sj5*x1219))+((cj5*r20*x1223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x1218))+((x1219*x1221))+((r01*sj5*x1223))+((r22*x1222))+(((-1.0)*r00*x1220*x1223))+(((-1.0)*r20*x1219*x1220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1219*x1220))+(((-1.0)*x1221*x1223))+((r02*x1222))+(((-1.0)*r22*x1218))+((r01*sj5*x1219))+((cj5*r20*x1223))))+IKsqr((((r02*x1218))+((x1219*x1221))+((r01*sj5*x1223))+((r22*x1222))+(((-1.0)*r00*x1220*x1223))+(((-1.0)*r20*x1219*x1220))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x1219*x1220))+(((-1.0)*x1221*x1223))+((r02*x1222))+(((-1.0)*r22*x1218))+((r01*sj5*x1219))+((cj5*r20*x1223))), (((r02*x1218))+((x1219*x1221))+((r01*sj5*x1223))+((r22*x1222))+(((-1.0)*r00*x1220*x1223))+(((-1.0)*r20*x1219*x1220))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1225=IKcos(j2);
IkReal x1226=IKsin(j2);
IkReal x1227=((1.0)*cj3);
IkReal x1228=(cj5*r00);
IkReal x1229=((1.0)*cj4);
IkReal x1230=(r01*sj5);
IkReal x1231=((1.0)*sj4);
IkReal x1232=(cj5*sj3);
IkReal x1233=(cj5*r20);
IkReal x1234=(sj3*sj5);
IkReal x1235=(r21*sj5);
IkReal x1236=(cj1*x1225);
IkReal x1237=(cj3*cj4*sj5);
IkReal x1238=(cj1*x1226);
IkReal x1239=(sj1*x1226);
IkReal x1240=(sj1*x1225);
IkReal x1241=((1.0)*x1239);
evalcond[0]=(x1240+x1238+(((-1.0)*x1230*x1231))+((sj4*x1228))+(((-1.0)*r02*x1229)));
evalcond[1]=(x1236+(((-1.0)*x1241))+((sj4*x1233))+(((-1.0)*x1231*x1235))+(((-1.0)*r22*x1229)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*pz))+(((-9.9e-7)*x1235))+(((0.4)*x1236))+(((-0.4)*x1239))+(((-0.4)*sj1))+(((9.9e-7)*x1233)));
evalcond[3]=((((9.9e-7)*x1228))+(((0.4)*x1240))+(((0.4)*cj1))+(((-1.0)*px))+(((-9.9e-7)*x1230))+(((-1.93e-6)*sj1))+(((0.4)*x1238)));
evalcond[4]=(x1236+((r00*x1234))+((r01*x1232))+((cj3*cj4*x1230))+(((-1.0)*cj4*x1227*x1228))+(((-1.0)*x1241))+(((-1.0)*r02*sj4*x1227)));
evalcond[5]=((((-1.0)*r22*sj4*x1227))+(((-1.0)*x1238))+((r20*x1234))+(((-1.0)*x1240))+((cj3*cj4*x1235))+(((-1.0)*cj4*x1227*x1233))+((r21*x1232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1242=((4.82499999988767e-6)*sj4);
IkReal x1243=(r01*sj5);
IkReal x1244=((0.999999999976719)*cj4);
IkReal x1245=(cj5*r00);
IkReal x1246=(r21*sj5);
IkReal x1247=(cj5*r20);
IkReal x1248=((0.999999999976719)*sj4);
IkReal x1249=((4.82499999988767e-6)*cj4);
if( IKabs(((((-1.0)*r02*x1249))+(((-1.1941874999722e-11)*x1245))+(((1.1941874999722e-11)*x1243))+(((-2.47499999994238e-6)*x1246))+(((2.47499999994238e-6)*x1247))+(((1.20624999997192e-5)*px))+(((-1.0)*x1242*x1243))+((x1246*x1248))+((x1242*x1245))+((r22*x1244))+(((-2.4999999999418)*pz))+(((-1.0)*x1247*x1248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.1941874999722e-11)*x1246))+(((1.1941874999722e-11)*x1247))+(((-2.47499999994238e-6)*x1243))+(((-1.0)*x1245*x1248))+(((2.47499999994238e-6)*x1245))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x1242*x1247))+((x1242*x1246))+((r02*x1244))+((x1243*x1248))+((r22*x1249))+(((-2.4999999999418)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x1249))+(((-1.1941874999722e-11)*x1245))+(((1.1941874999722e-11)*x1243))+(((-2.47499999994238e-6)*x1246))+(((2.47499999994238e-6)*x1247))+(((1.20624999997192e-5)*px))+(((-1.0)*x1242*x1243))+((x1246*x1248))+((x1242*x1245))+((r22*x1244))+(((-2.4999999999418)*pz))+(((-1.0)*x1247*x1248))))+IKsqr(((((-1.1941874999722e-11)*x1246))+(((1.1941874999722e-11)*x1247))+(((-2.47499999994238e-6)*x1243))+(((-1.0)*x1245*x1248))+(((2.47499999994238e-6)*x1245))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x1242*x1247))+((x1242*x1246))+((r02*x1244))+((x1243*x1248))+((r22*x1249))+(((-2.4999999999418)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x1249))+(((-1.1941874999722e-11)*x1245))+(((1.1941874999722e-11)*x1243))+(((-2.47499999994238e-6)*x1246))+(((2.47499999994238e-6)*x1247))+(((1.20624999997192e-5)*px))+(((-1.0)*x1242*x1243))+((x1246*x1248))+((x1242*x1245))+((r22*x1244))+(((-2.4999999999418)*pz))+(((-1.0)*x1247*x1248))), ((((-1.1941874999722e-11)*x1246))+(((1.1941874999722e-11)*x1247))+(((-2.47499999994238e-6)*x1243))+(((-1.0)*x1245*x1248))+(((2.47499999994238e-6)*x1245))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x1242*x1247))+((x1242*x1246))+((r02*x1244))+((x1243*x1248))+((r22*x1249))+(((-2.4999999999418)*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1250=IKcos(j1);
IkReal x1251=IKsin(j1);
IkReal x1252=((1.0)*pz);
IkReal x1253=((0.4)*sj4);
IkReal x1254=(r21*sj5);
IkReal x1255=((0.4)*cj4);
IkReal x1256=(cj5*r20);
IkReal x1257=(r01*sj5);
IkReal x1258=(cj5*r00);
IkReal x1259=((0.4)*x1250);
IkReal x1260=((9.9e-7)*x1257);
IkReal x1261=((9.9e-7)*x1258);
IkReal x1262=((1.93e-6)*x1251);
IkReal x1263=((9.9e-7)*x1256);
IkReal x1264=((1.93e-6)*x1250);
IkReal x1265=((0.4)*x1251);
IkReal x1266=((9.9e-7)*x1254);
IkReal x1267=((0.4)*sj3*sj5);
IkReal x1268=((0.4)*cj5*sj3);
IkReal x1269=(x1260+x1259);
IkReal x1270=(x1262+x1261);
IkReal x1271=(x1266+x1265+x1264+x1252);
evalcond[0]=(x1270+(((-1.0)*x1253*x1258))+((r02*x1255))+((x1253*x1257))+(((-1.0)*px))+(((-1.0)*x1269)));
evalcond[1]=(x1263+(((-1.0)*x1253*x1256))+(((-1.0)*x1271))+((r22*x1255))+((x1253*x1254)));
evalcond[2]=((((-1.0)*cj3*x1255*x1256))+x1269+((cj3*x1254*x1255))+(((-1.0)*x1270))+((r21*x1268))+(((-1.0)*cj3*r22*x1253))+px+((r20*x1267)));
evalcond[3]=((((-1.0)*cj3*r02*x1253))+(((-1.0)*cj3*x1255*x1258))+x1263+(((-1.0)*x1271))+((cj3*x1255*x1257))+((r00*x1267))+((r01*x1268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1272=((1.0)*r01);
IkReal x1273=(sj1*sj4);
IkReal x1274=(cj5*r00);
IkReal x1275=(cj1*cj4);
IkReal x1276=(cj5*r20);
IkReal x1277=(cj1*sj4);
IkReal x1278=(sj5*x1277);
IkReal x1279=((1.0)*cj4*sj1);
if( IKabs((((x1273*x1276))+(((-1.0)*r22*x1279))+((x1274*x1277))+(((-1.0)*x1272*x1278))+(((-1.0)*r02*x1275))+(((-1.0)*r21*sj5*x1273)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1278))+((r22*x1275))+((x1273*x1274))+(((-1.0)*x1276*x1277))+(((-1.0)*r02*x1279))+(((-1.0)*sj5*x1272*x1273)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1273*x1276))+(((-1.0)*r22*x1279))+((x1274*x1277))+(((-1.0)*x1272*x1278))+(((-1.0)*r02*x1275))+(((-1.0)*r21*sj5*x1273))))+IKsqr((((r21*x1278))+((r22*x1275))+((x1273*x1274))+(((-1.0)*x1276*x1277))+(((-1.0)*r02*x1279))+(((-1.0)*sj5*x1272*x1273))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1273*x1276))+(((-1.0)*r22*x1279))+((x1274*x1277))+(((-1.0)*x1272*x1278))+(((-1.0)*r02*x1275))+(((-1.0)*r21*sj5*x1273))), (((r21*x1278))+((r22*x1275))+((x1273*x1274))+(((-1.0)*x1276*x1277))+(((-1.0)*r02*x1279))+(((-1.0)*sj5*x1272*x1273))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1280=IKcos(j2);
IkReal x1281=IKsin(j2);
IkReal x1282=((1.0)*cj3);
IkReal x1283=(cj5*r00);
IkReal x1284=((1.0)*cj4);
IkReal x1285=(r01*sj5);
IkReal x1286=((1.0)*sj4);
IkReal x1287=(cj5*sj3);
IkReal x1288=(cj5*r20);
IkReal x1289=((1.0)*sj1);
IkReal x1290=(sj3*sj5);
IkReal x1291=((0.4)*sj1);
IkReal x1292=(r21*sj5);
IkReal x1293=(cj1*x1280);
IkReal x1294=(cj3*cj4*sj5);
IkReal x1295=((0.4)*x1281);
IkReal x1296=(x1280*x1289);
IkReal x1297=((1.0)*cj1*x1281);
IkReal x1298=(x1296+x1297);
evalcond[0]=(x1293+(((-1.0)*x1286*x1292))+(((-1.0)*r22*x1284))+((sj4*x1288))+(((-1.0)*x1281*x1289)));
evalcond[1]=((((-1.0)*r02*x1284))+(((-1.0)*x1298))+(((-1.0)*x1285*x1286))+((sj4*x1283)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x1291))+(((-1.0)*x1281*x1291))+(((0.4)*x1293))+(((-1.0)*pz))+(((-9.9e-7)*x1292))+(((9.9e-7)*x1288)));
evalcond[3]=((((-9.9e-7)*x1285))+(((-1.0)*x1280*x1291))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-1.0)*cj1*x1295))+(((-0.4)*cj1))+(((9.9e-7)*x1283)));
evalcond[4]=(((r01*x1287))+(((-1.0)*cj4*x1282*x1283))+(((-1.0)*r02*sj4*x1282))+(((-1.0)*x1293))+((sj1*x1281))+((cj3*cj4*x1285))+((r00*x1290)));
evalcond[5]=(((r20*x1290))+(((-1.0)*x1298))+((cj3*cj4*x1292))+(((-1.0)*r22*sj4*x1282))+(((-1.0)*cj4*x1282*x1288))+((r21*x1287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1299=((4.82499999988767e-6)*sj4);
IkReal x1300=(cj5*r20);
IkReal x1301=(r11*sj5);
IkReal x1302=(r21*sj5);
IkReal x1303=(cj5*r10);
IkReal x1304=((0.999999999976719)*sj4);
IkReal x1305=((4.82499999988767e-6)*cj4);
IkReal x1306=((0.999999999976719)*cj4);
if( IKabs((((x1299*x1301))+(((-2.47499999994238e-6)*x1302))+(((-1.0)*x1299*x1303))+((r12*x1305))+(((-1.0)*x1300*x1304))+(((-1.20624999997192e-5)*py))+(((-1.1941874999722e-11)*x1301))+((x1302*x1304))+((r22*x1306))+(((2.47499999994238e-6)*x1300))+(((1.1941874999722e-11)*x1303))+(((-2.4999999999418)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1299*x1302))+(((-2.47499999994238e-6)*x1303))+(((2.4999999999418)*py))+(((-1.0)*x1299*x1300))+((x1303*x1304))+(((-1.20624999997192e-5)*pz))+(((-1.1941874999722e-11)*x1302))+(((-1.0)*r12*x1306))+((r22*x1305))+(((2.47499999994238e-6)*x1301))+(((-1.0)*x1301*x1304))+(((1.1941874999722e-11)*x1300)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1299*x1301))+(((-2.47499999994238e-6)*x1302))+(((-1.0)*x1299*x1303))+((r12*x1305))+(((-1.0)*x1300*x1304))+(((-1.20624999997192e-5)*py))+(((-1.1941874999722e-11)*x1301))+((x1302*x1304))+((r22*x1306))+(((2.47499999994238e-6)*x1300))+(((1.1941874999722e-11)*x1303))+(((-2.4999999999418)*pz))))+IKsqr((((x1299*x1302))+(((-2.47499999994238e-6)*x1303))+(((2.4999999999418)*py))+(((-1.0)*x1299*x1300))+((x1303*x1304))+(((-1.20624999997192e-5)*pz))+(((-1.1941874999722e-11)*x1302))+(((-1.0)*r12*x1306))+((r22*x1305))+(((2.47499999994238e-6)*x1301))+(((-1.0)*x1301*x1304))+(((1.1941874999722e-11)*x1300))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x1299*x1301))+(((-2.47499999994238e-6)*x1302))+(((-1.0)*x1299*x1303))+((r12*x1305))+(((-1.0)*x1300*x1304))+(((-1.20624999997192e-5)*py))+(((-1.1941874999722e-11)*x1301))+((x1302*x1304))+((r22*x1306))+(((2.47499999994238e-6)*x1300))+(((1.1941874999722e-11)*x1303))+(((-2.4999999999418)*pz))), (((x1299*x1302))+(((-2.47499999994238e-6)*x1303))+(((2.4999999999418)*py))+(((-1.0)*x1299*x1300))+((x1303*x1304))+(((-1.20624999997192e-5)*pz))+(((-1.1941874999722e-11)*x1302))+(((-1.0)*r12*x1306))+((r22*x1305))+(((2.47499999994238e-6)*x1301))+(((-1.0)*x1301*x1304))+(((1.1941874999722e-11)*x1300))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1307=IKcos(j1);
IkReal x1308=IKsin(j1);
IkReal x1309=((0.4)*sj4);
IkReal x1310=(r21*sj5);
IkReal x1311=(cj5*r10);
IkReal x1312=((0.4)*cj4);
IkReal x1313=(cj5*r20);
IkReal x1314=((0.4)*sj3);
IkReal x1315=(r11*sj5);
IkReal x1316=((1.93e-6)*x1308);
IkReal x1317=((9.9e-7)*x1315);
IkReal x1318=((0.4)*x1307);
IkReal x1319=((9.9e-7)*x1311);
IkReal x1320=((1.93e-6)*x1307);
IkReal x1321=((0.4)*x1308);
IkReal x1322=((9.9e-7)*x1310);
IkReal x1323=((9.9e-7)*x1313);
IkReal x1324=(x1319+x1318);
IkReal x1325=(x1317+x1316+py);
IkReal x1326=(x1322+x1320+x1321);
evalcond[0]=(x1325+(((-1.0)*x1324))+((x1309*x1311))+(((-1.0)*r12*x1312))+(((-1.0)*x1309*x1315)));
evalcond[1]=(x1323+(((-1.0)*x1326))+((x1309*x1310))+((r22*x1312))+(((-1.0)*pz))+(((-1.0)*x1309*x1313)));
evalcond[2]=(x1325+(((-1.0)*x1324))+((cj3*x1312*x1313))+(((-1.0)*r20*sj5*x1314))+(((-1.0)*cj3*x1310*x1312))+((cj3*r22*x1309))+(((-1.0)*cj5*r21*x1314)));
evalcond[3]=(x1326+(((-1.0)*x1323))+((cj5*r11*x1314))+((cj3*x1312*x1315))+(((-1.0)*cj3*x1311*x1312))+pz+(((-1.0)*cj3*r12*x1309))+((r10*sj5*x1314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1327=(cj4*r12);
IkReal x1328=(cj4*r22);
IkReal x1329=(cj1*sj4);
IkReal x1330=(r11*sj5);
IkReal x1331=(r21*sj5);
IkReal x1332=((1.0)*sj1);
IkReal x1333=(sj1*sj4);
IkReal x1334=(cj5*r20);
IkReal x1335=((1.0)*cj5*r10);
if( IKabs((((x1329*x1330))+(((-1.0)*x1328*x1332))+(((-1.0)*sj4*x1331*x1332))+(((-1.0)*x1329*x1335))+((cj1*x1327))+((x1333*x1334)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1329*x1331))+(((-1.0)*cj5*r10*sj4*x1332))+(((-1.0)*x1329*x1334))+((cj1*x1328))+((x1330*x1333))+((sj1*x1327)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1329*x1330))+(((-1.0)*x1328*x1332))+(((-1.0)*sj4*x1331*x1332))+(((-1.0)*x1329*x1335))+((cj1*x1327))+((x1333*x1334))))+IKsqr((((x1329*x1331))+(((-1.0)*cj5*r10*sj4*x1332))+(((-1.0)*x1329*x1334))+((cj1*x1328))+((x1330*x1333))+((sj1*x1327))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1329*x1330))+(((-1.0)*x1328*x1332))+(((-1.0)*sj4*x1331*x1332))+(((-1.0)*x1329*x1335))+((cj1*x1327))+((x1333*x1334))), (((x1329*x1331))+(((-1.0)*cj5*r10*sj4*x1332))+(((-1.0)*x1329*x1334))+((cj1*x1328))+((x1330*x1333))+((sj1*x1327))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1336=IKcos(j2);
IkReal x1337=IKsin(j2);
IkReal x1338=(cj3*cj4);
IkReal x1339=(r21*sj5);
IkReal x1340=((1.0)*r22);
IkReal x1341=(cj5*r10);
IkReal x1342=(cj5*r20);
IkReal x1343=(cj5*sj3);
IkReal x1344=(cj3*sj4);
IkReal x1345=(r11*sj5);
IkReal x1346=((1.0)*sj4);
IkReal x1347=((1.0)*r12);
IkReal x1348=(sj3*sj5);
IkReal x1349=(cj1*x1336);
IkReal x1350=(cj1*x1337);
IkReal x1351=(sj1*x1337);
IkReal x1352=(sj1*x1336);
IkReal x1353=((1.0)*x1351);
evalcond[0]=(x1352+x1350+((sj4*x1341))+(((-1.0)*cj4*x1347))+(((-1.0)*x1345*x1346)));
evalcond[1]=(x1349+(((-1.0)*x1353))+((sj4*x1342))+(((-1.0)*x1339*x1346))+(((-1.0)*cj4*x1340)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x1339))+(((-1.0)*pz))+(((-0.4)*x1351))+(((0.4)*x1349))+(((9.9e-7)*x1342))+(((-0.4)*sj1)));
evalcond[3]=((((-9.9e-7)*x1345))+(((0.4)*cj1))+(((0.4)*x1352))+(((0.4)*x1350))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((9.9e-7)*x1341)));
evalcond[4]=(x1349+(((-1.0)*x1353))+((x1338*x1345))+((r11*x1343))+(((-1.0)*x1344*x1347))+((r10*x1348))+(((-1.0)*x1338*x1341)));
evalcond[5]=((((-1.0)*x1350))+(((-1.0)*x1352))+((x1338*x1339))+(((-1.0)*x1340*x1344))+((r20*x1348))+((r21*x1343))+(((-1.0)*x1338*x1342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1354=((4.82499999988767e-6)*sj4);
IkReal x1355=(cj5*r20);
IkReal x1356=(r11*sj5);
IkReal x1357=(r21*sj5);
IkReal x1358=(cj5*r10);
IkReal x1359=((0.999999999976719)*sj4);
IkReal x1360=((4.82499999988767e-6)*cj4);
IkReal x1361=((0.999999999976719)*cj4);
if( IKabs(((((1.1941874999722e-11)*x1356))+(((-1.1941874999722e-11)*x1358))+((x1357*x1359))+(((-1.0)*r12*x1360))+(((-1.0)*x1354*x1356))+((r22*x1361))+((x1354*x1358))+(((-1.0)*x1355*x1359))+(((1.20624999997192e-5)*py))+(((-2.47499999994238e-6)*x1357))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x1355)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.1941874999722e-11)*x1355))+(((-1.1941874999722e-11)*x1357))+(((-1.0)*x1354*x1355))+((r22*x1360))+((x1354*x1357))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x1356))+((r12*x1361))+(((-2.4999999999418)*py))+(((-1.0)*x1358*x1359))+((x1356*x1359))+(((2.47499999994238e-6)*x1358)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.1941874999722e-11)*x1356))+(((-1.1941874999722e-11)*x1358))+((x1357*x1359))+(((-1.0)*r12*x1360))+(((-1.0)*x1354*x1356))+((r22*x1361))+((x1354*x1358))+(((-1.0)*x1355*x1359))+(((1.20624999997192e-5)*py))+(((-2.47499999994238e-6)*x1357))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x1355))))+IKsqr(((((1.1941874999722e-11)*x1355))+(((-1.1941874999722e-11)*x1357))+(((-1.0)*x1354*x1355))+((r22*x1360))+((x1354*x1357))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x1356))+((r12*x1361))+(((-2.4999999999418)*py))+(((-1.0)*x1358*x1359))+((x1356*x1359))+(((2.47499999994238e-6)*x1358))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.1941874999722e-11)*x1356))+(((-1.1941874999722e-11)*x1358))+((x1357*x1359))+(((-1.0)*r12*x1360))+(((-1.0)*x1354*x1356))+((r22*x1361))+((x1354*x1358))+(((-1.0)*x1355*x1359))+(((1.20624999997192e-5)*py))+(((-2.47499999994238e-6)*x1357))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x1355))), ((((1.1941874999722e-11)*x1355))+(((-1.1941874999722e-11)*x1357))+(((-1.0)*x1354*x1355))+((r22*x1360))+((x1354*x1357))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x1356))+((r12*x1361))+(((-2.4999999999418)*py))+(((-1.0)*x1358*x1359))+((x1356*x1359))+(((2.47499999994238e-6)*x1358))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1362=IKcos(j1);
IkReal x1363=IKsin(j1);
IkReal x1364=((1.0)*pz);
IkReal x1365=((0.4)*sj4);
IkReal x1366=(r21*sj5);
IkReal x1367=(cj5*r10);
IkReal x1368=((0.4)*cj4);
IkReal x1369=(cj5*r20);
IkReal x1370=((0.4)*sj3);
IkReal x1371=(r11*sj5);
IkReal x1372=((0.4)*x1362);
IkReal x1373=((9.9e-7)*x1371);
IkReal x1374=((9.9e-7)*x1367);
IkReal x1375=((1.93e-6)*x1363);
IkReal x1376=((9.9e-7)*x1369);
IkReal x1377=((1.93e-6)*x1362);
IkReal x1378=((0.4)*x1363);
IkReal x1379=((9.9e-7)*x1366);
IkReal x1380=(x1375+x1374);
IkReal x1381=(x1373+x1372);
IkReal x1382=(x1364+x1377+x1379+x1378);
evalcond[0]=(((x1365*x1371))+(((-1.0)*x1381))+x1380+(((-1.0)*py))+(((-1.0)*x1365*x1367))+((r12*x1368)));
evalcond[1]=((((-1.0)*x1382))+x1376+((r22*x1368))+((x1365*x1366))+(((-1.0)*x1365*x1369)));
evalcond[2]=((((-1.0)*x1380))+x1381+((r20*sj5*x1370))+(((-1.0)*cj3*x1368*x1369))+((cj3*x1366*x1368))+((cj5*r21*x1370))+(((-1.0)*cj3*r22*x1365))+py);
evalcond[3]=((((-1.0)*x1382))+x1376+(((-1.0)*cj3*r12*x1365))+((cj5*r11*x1370))+(((-1.0)*cj3*x1367*x1368))+((cj3*x1368*x1371))+((r10*sj5*x1370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1383=((1.0)*cj1);
IkReal x1384=(sj4*sj5);
IkReal x1385=(cj5*sj4);
IkReal x1386=((1.0)*sj1);
IkReal x1387=(sj1*x1385);
IkReal x1388=(cj4*x1386);
if( IKabs((((cj1*r10*x1385))+(((-1.0)*r11*x1383*x1384))+((r20*x1387))+(((-1.0)*r21*x1384*x1386))+(((-1.0)*r22*x1388))+(((-1.0)*cj4*r12*x1383)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x1388))+((cj1*cj4*r22))+((r10*x1387))+((cj1*r21*x1384))+(((-1.0)*r20*x1383*x1385))+(((-1.0)*r11*x1384*x1386)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r10*x1385))+(((-1.0)*r11*x1383*x1384))+((r20*x1387))+(((-1.0)*r21*x1384*x1386))+(((-1.0)*r22*x1388))+(((-1.0)*cj4*r12*x1383))))+IKsqr(((((-1.0)*r12*x1388))+((cj1*cj4*r22))+((r10*x1387))+((cj1*r21*x1384))+(((-1.0)*r20*x1383*x1385))+(((-1.0)*r11*x1384*x1386))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r10*x1385))+(((-1.0)*r11*x1383*x1384))+((r20*x1387))+(((-1.0)*r21*x1384*x1386))+(((-1.0)*r22*x1388))+(((-1.0)*cj4*r12*x1383))), ((((-1.0)*r12*x1388))+((cj1*cj4*r22))+((r10*x1387))+((cj1*r21*x1384))+(((-1.0)*r20*x1383*x1385))+(((-1.0)*r11*x1384*x1386))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1389=IKcos(j2);
IkReal x1390=IKsin(j2);
IkReal x1391=(cj3*cj4);
IkReal x1392=(r21*sj5);
IkReal x1393=((1.0)*r22);
IkReal x1394=(cj5*r10);
IkReal x1395=(cj5*r20);
IkReal x1396=(cj5*sj3);
IkReal x1397=((1.0)*sj1);
IkReal x1398=(cj3*sj4);
IkReal x1399=(sj3*sj5);
IkReal x1400=(r11*sj5);
IkReal x1401=((1.0)*sj4);
IkReal x1402=((1.0)*r12);
IkReal x1403=((0.4)*sj1);
IkReal x1404=(cj1*x1389);
IkReal x1405=((0.4)*x1390);
IkReal x1406=(x1389*x1397);
IkReal x1407=((1.0)*cj1*x1390);
IkReal x1408=(x1407+x1406);
evalcond[0]=((((-1.0)*cj4*x1393))+((sj4*x1395))+(((-1.0)*x1390*x1397))+x1404+(((-1.0)*x1392*x1401)));
evalcond[1]=(((sj4*x1394))+(((-1.0)*x1408))+(((-1.0)*x1400*x1401))+(((-1.0)*cj4*x1402)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x1404))+(((9.9e-7)*x1395))+(((-1.0)*x1390*x1403))+(((-1.0)*x1403))+(((-1.0)*pz))+(((-9.9e-7)*x1392)));
evalcond[3]=((((-1.0)*x1389*x1403))+(((9.9e-7)*x1394))+(((-1.0)*cj1*x1405))+(((1.93e-6)*sj1))+(((-1.0)*py))+(((-9.9e-7)*x1400))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*x1404))+((r10*x1399))+((x1391*x1400))+(((-1.0)*x1398*x1402))+((sj1*x1390))+(((-1.0)*x1391*x1394))+((r11*x1396)));
evalcond[5]=((((-1.0)*x1393*x1398))+((r21*x1396))+((r20*x1399))+(((-1.0)*x1408))+(((-1.0)*x1391*x1395))+((x1391*x1392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1409=(cj5*r10);
IkReal x1410=((0.4)*sj4);
IkReal x1411=(r21*sj5);
IkReal x1412=(cj5*r21);
IkReal x1413=(r11*sj5);
IkReal x1414=(r20*sj5);
IkReal x1415=(cj5*r20);
IkReal x1416=((7720000000.0)*sj0);
IkReal x1417=(cj3*cj4);
IkReal x1418=((1.6e+15)*sj0);
IkReal x1419=(cj3*r22*sj4);
IkReal x1420=((-1.6e+15)*sj0*sj3);
IkReal x1421=((((-9.9e-7)*x1411))+(((-1.0)*pz))+(((-1.0)*x1410*x1415))+((x1410*x1411))+(((9.9e-7)*x1415))+(((0.4)*cj4*r22)));
IkReal x1422=(sj0*x1421);
CheckValue<IkReal> x1423=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1423.valid){
continue;
}
CheckValue<IkReal> x1424 = IKatan2WithCheck(IkReal(((((-1.0)*x1415*x1416*x1417))+((x1411*x1416*x1417))+((sj3*x1414*x1416))+(((-1.0)*x1416*x1419))+(((19107.0)*x1409))+((sj3*x1412*x1416))+(((-19300000000.0)*py))+(((-19107.0)*x1413))+(((4.0e+15)*x1422)))),IkReal((((x1418*x1419))+(((-3960000000.0)*x1409))+((x1414*x1420))+(((-1.6e+15)*sj0*x1411*x1417))+(((4.0e+15)*py))+((x1415*x1417*x1418))+(((3960000000.0)*x1413))+((x1412*x1420))+(((19300000000.0)*x1422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1424.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1423.value)))+(x1424.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1425=IKsin(j1);
IkReal x1426=sj0*sj0;
IkReal x1427=IKcos(j1);
IkReal x1428=cj0*cj0;
IkReal x1429=((0.4)*cj5);
IkReal x1430=(r21*sj0);
IkReal x1431=((0.4)*sj4);
IkReal x1432=(r21*sj5);
IkReal x1433=(cj3*r22);
IkReal x1434=(r11*sj5);
IkReal x1435=((9.9e-7)*cj0);
IkReal x1436=((0.4)*cj4);
IkReal x1437=(cj3*cj4);
IkReal x1438=(cj5*r00);
IkReal x1439=(r01*sj5);
IkReal x1440=(r20*sj0);
IkReal x1441=(r00*sj4);
IkReal x1442=((9.9e-7)*cj5);
IkReal x1443=(cj0*sj0);
IkReal x1444=((9.9e-7)*sj0);
IkReal x1445=(r10*sj4);
IkReal x1446=((0.4)*x1427);
IkReal x1447=(r20*x1437);
IkReal x1448=((1.93e-6)*x1425);
IkReal x1449=(r10*x1442);
IkReal x1450=((1.93e-6)*x1427);
IkReal x1451=((0.4)*sj3*sj5);
IkReal x1452=((0.4)*x1425);
IkReal x1453=(x1443*x1448);
IkReal x1454=(x1443*x1446);
evalcond[0]=((((-1.0)*x1450))+(((-1.0)*x1452))+(((-1.0)*pz))+(((-9.9e-7)*x1432))+((r20*x1442))+((r22*x1436))+((x1431*x1432))+(((-1.0)*r20*sj4*x1429)));
evalcond[1]=((((-1.0)*x1426*x1446))+((x1434*x1444))+((x1426*x1448))+(((-1.0)*r12*sj0*x1436))+((sj0*x1429*x1445))+(((-1.0)*sj0*x1431*x1434))+(((-1.0)*sj0*x1449))+((py*sj0)));
evalcond[2]=((((-1.0)*x1428*x1446))+(((-1.0)*x1435*x1438))+((x1435*x1439))+((x1428*x1448))+((cj0*x1429*x1441))+(((-1.0)*cj0*r02*x1436))+(((-1.0)*cj0*x1431*x1439))+((cj0*px)));
evalcond[3]=(((cj3*x1434*x1436))+((r10*x1451))+(((9.9e-7)*sj5*x1430))+((r11*sj3*x1429))+(((-1.0)*r10*x1429*x1437))+((sj0*x1450))+((sj0*x1452))+((pz*sj0))+(((-1.0)*cj3*r12*x1431))+(((-1.0)*x1440*x1442)));
evalcond[4]=((((-1.0)*cj5*r20*x1435))+((x1432*x1435))+(((-1.0)*r00*x1429*x1437))+((r01*sj3*x1429))+(((-1.0)*cj3*r02*x1431))+((cj0*x1450))+((cj0*x1452))+((r00*x1451))+((cj0*pz))+((cj3*x1436*x1439)));
evalcond[5]=(((sj0*x1448))+((sj0*x1431*x1433))+(((-1.0)*x1440*x1451))+py+(((-1.0)*cj3*sj5*x1430*x1436))+(((-1.0)*sj3*x1429*x1430))+(((-1.0)*x1449))+(((-1.0)*sj0*x1446))+((x1429*x1437*x1440))+(((9.9e-7)*x1434)));
evalcond[6]=((((-1.0)*cj0*r20*x1451))+(((-1.0)*cj0*x1446))+(((-1.0)*cj0*cj3*x1432*x1436))+((cj0*x1431*x1433))+((cj0*x1429*x1447))+px+(((-1.0)*cj0*r21*sj3*x1429))+(((-9.9e-7)*x1438))+((cj0*x1448))+(((9.9e-7)*x1439)));
evalcond[7]=(((x1439*x1444))+(((-1.0)*x1438*x1444))+(((-1.0)*x1454))+(((-1.0)*cj0*r12*x1436))+((cj0*x1429*x1445))+x1453+((px*sj0))+(((-1.0)*cj0*x1431*x1434)));
evalcond[8]=((((-1.0)*x1454))+((x1434*x1435))+(((-1.0)*r02*sj0*x1436))+(((-1.0)*cj5*r10*x1435))+((sj0*x1429*x1441))+x1453+(((-1.0)*sj0*x1431*x1439))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1455=(cj4*sj1);
IkReal x1456=(cj1*sj4);
IkReal x1457=((1.0)*cj5);
IkReal x1458=(r21*sj5);
IkReal x1459=(cj1*cj4);
IkReal x1460=(sj1*sj4);
IkReal x1461=(r01*sj4*sj5);
if( IKabs((((r01*sj5*x1456))+(((-1.0)*r00*x1456*x1457))+(((-1.0)*x1458*x1460))+((cj5*r20*x1460))+(((-1.0)*r22*x1455))+((r02*x1459)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1456*x1457))+((x1456*x1458))+((r01*sj5*x1460))+((r22*x1459))+(((-1.0)*r00*x1457*x1460))+((r02*x1455)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj5*x1456))+(((-1.0)*r00*x1456*x1457))+(((-1.0)*x1458*x1460))+((cj5*r20*x1460))+(((-1.0)*r22*x1455))+((r02*x1459))))+IKsqr(((((-1.0)*r20*x1456*x1457))+((x1456*x1458))+((r01*sj5*x1460))+((r22*x1459))+(((-1.0)*r00*x1457*x1460))+((r02*x1455))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj5*x1456))+(((-1.0)*r00*x1456*x1457))+(((-1.0)*x1458*x1460))+((cj5*r20*x1460))+(((-1.0)*r22*x1455))+((r02*x1459))), ((((-1.0)*r20*x1456*x1457))+((x1456*x1458))+((r01*sj5*x1460))+((r22*x1459))+(((-1.0)*r00*x1457*x1460))+((r02*x1455))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1462=IKcos(j2);
IkReal x1463=IKsin(j2);
IkReal x1464=((1.0)*cj3);
IkReal x1465=(cj5*r00);
IkReal x1466=((1.0)*cj4);
IkReal x1467=(r01*sj5);
IkReal x1468=((1.0)*sj4);
IkReal x1469=(cj5*sj3);
IkReal x1470=(cj5*r20);
IkReal x1471=(sj3*sj5);
IkReal x1472=(r21*sj5);
IkReal x1473=(cj1*x1462);
IkReal x1474=(cj3*cj4*sj5);
IkReal x1475=(cj1*x1463);
IkReal x1476=(sj1*x1463);
IkReal x1477=(sj1*x1462);
IkReal x1478=((1.0)*x1476);
evalcond[0]=((((-1.0)*r02*x1466))+(((-1.0)*x1467*x1468))+x1477+x1475+((sj4*x1465)));
evalcond[1]=(((sj4*x1470))+(((-1.0)*r22*x1466))+(((-1.0)*x1468*x1472))+x1473+(((-1.0)*x1478)));
evalcond[2]=((((-9.9e-7)*x1472))+(((-1.93e-6)*cj1))+(((-1.0)*pz))+(((0.4)*x1473))+(((-0.4)*x1476))+(((9.9e-7)*x1470))+(((-0.4)*sj1)));
evalcond[3]=((((9.9e-7)*x1465))+(((0.4)*cj1))+(((-1.0)*px))+(((-9.9e-7)*x1467))+(((-1.93e-6)*sj1))+(((0.4)*x1477))+(((0.4)*x1475)));
evalcond[4]=(((r01*x1469))+(((-1.0)*cj4*x1464*x1465))+x1473+(((-1.0)*x1478))+(((-1.0)*r02*sj4*x1464))+((r00*x1471))+((cj3*cj4*x1467)));
evalcond[5]=((((-1.0)*cj4*x1464*x1470))+(((-1.0)*r22*sj4*x1464))+((cj3*cj4*x1472))+(((-1.0)*x1475))+(((-1.0)*x1477))+((r20*x1471))+((r21*x1469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1479=((1.0)*r01);
IkReal x1480=(sj1*sj4);
IkReal x1481=(cj5*r00);
IkReal x1482=(cj1*cj4);
IkReal x1483=(cj5*r20);
IkReal x1484=(cj1*sj4);
IkReal x1485=(sj5*x1484);
IkReal x1486=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*x1479*x1485))+(((-1.0)*r02*x1482))+((x1480*x1483))+((x1481*x1484))+(((-1.0)*r22*x1486))+(((-1.0)*r21*sj5*x1480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1483*x1484))+((x1480*x1481))+((r21*x1485))+(((-1.0)*r02*x1486))+(((-1.0)*sj5*x1479*x1480))+((r22*x1482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1479*x1485))+(((-1.0)*r02*x1482))+((x1480*x1483))+((x1481*x1484))+(((-1.0)*r22*x1486))+(((-1.0)*r21*sj5*x1480))))+IKsqr(((((-1.0)*x1483*x1484))+((x1480*x1481))+((r21*x1485))+(((-1.0)*r02*x1486))+(((-1.0)*sj5*x1479*x1480))+((r22*x1482))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1479*x1485))+(((-1.0)*r02*x1482))+((x1480*x1483))+((x1481*x1484))+(((-1.0)*r22*x1486))+(((-1.0)*r21*sj5*x1480))), ((((-1.0)*x1483*x1484))+((x1480*x1481))+((r21*x1485))+(((-1.0)*r02*x1486))+(((-1.0)*sj5*x1479*x1480))+((r22*x1482))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1487=IKcos(j2);
IkReal x1488=IKsin(j2);
IkReal x1489=((1.0)*cj3);
IkReal x1490=(cj5*r00);
IkReal x1491=((1.0)*cj4);
IkReal x1492=(r01*sj5);
IkReal x1493=((1.0)*sj4);
IkReal x1494=(cj5*sj3);
IkReal x1495=(cj5*r20);
IkReal x1496=((1.0)*sj1);
IkReal x1497=(sj3*sj5);
IkReal x1498=((0.4)*sj1);
IkReal x1499=(r21*sj5);
IkReal x1500=(cj1*x1487);
IkReal x1501=(cj3*cj4*sj5);
IkReal x1502=((0.4)*x1488);
IkReal x1503=(x1487*x1496);
IkReal x1504=((1.0)*cj1*x1488);
IkReal x1505=(x1503+x1504);
evalcond[0]=((((-1.0)*x1493*x1499))+x1500+((sj4*x1495))+(((-1.0)*r22*x1491))+(((-1.0)*x1488*x1496)));
evalcond[1]=((((-1.0)*x1505))+(((-1.0)*x1492*x1493))+(((-1.0)*r02*x1491))+((sj4*x1490)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x1498))+(((-1.0)*pz))+(((9.9e-7)*x1495))+(((-1.0)*x1488*x1498))+(((-9.9e-7)*x1499))+(((0.4)*x1500)));
evalcond[3]=((((-1.0)*cj1*x1502))+(((-1.0)*x1487*x1498))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((9.9e-7)*x1490))+(((-9.9e-7)*x1492))+(((-0.4)*cj1)));
evalcond[4]=(((r00*x1497))+(((-1.0)*x1500))+((sj1*x1488))+((r01*x1494))+(((-1.0)*r02*sj4*x1489))+(((-1.0)*cj4*x1489*x1490))+((cj3*cj4*x1492)));
evalcond[5]=((((-1.0)*x1505))+((r20*x1497))+((r21*x1494))+(((-1.0)*cj4*x1489*x1495))+((cj3*cj4*x1499))+(((-1.0)*r22*sj4*x1489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1506=(cj4*r12);
IkReal x1507=(cj4*r22);
IkReal x1508=(cj1*sj4);
IkReal x1509=(r11*sj5);
IkReal x1510=(r21*sj5);
IkReal x1511=((1.0)*sj1);
IkReal x1512=(sj1*sj4);
IkReal x1513=(cj5*r20);
IkReal x1514=((1.0)*cj5*r10);
if( IKabs((((x1508*x1509))+(((-1.0)*x1507*x1511))+((cj1*x1506))+(((-1.0)*sj4*x1510*x1511))+(((-1.0)*x1508*x1514))+((x1512*x1513)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1509*x1512))+((x1508*x1510))+(((-1.0)*cj5*r10*sj4*x1511))+((sj1*x1506))+((cj1*x1507))+(((-1.0)*x1508*x1513)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1508*x1509))+(((-1.0)*x1507*x1511))+((cj1*x1506))+(((-1.0)*sj4*x1510*x1511))+(((-1.0)*x1508*x1514))+((x1512*x1513))))+IKsqr((((x1509*x1512))+((x1508*x1510))+(((-1.0)*cj5*r10*sj4*x1511))+((sj1*x1506))+((cj1*x1507))+(((-1.0)*x1508*x1513))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1508*x1509))+(((-1.0)*x1507*x1511))+((cj1*x1506))+(((-1.0)*sj4*x1510*x1511))+(((-1.0)*x1508*x1514))+((x1512*x1513))), (((x1509*x1512))+((x1508*x1510))+(((-1.0)*cj5*r10*sj4*x1511))+((sj1*x1506))+((cj1*x1507))+(((-1.0)*x1508*x1513))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1515=IKcos(j2);
IkReal x1516=IKsin(j2);
IkReal x1517=(cj3*cj4);
IkReal x1518=(r21*sj5);
IkReal x1519=((1.0)*r22);
IkReal x1520=(cj5*r10);
IkReal x1521=(cj5*r20);
IkReal x1522=(cj5*sj3);
IkReal x1523=(cj3*sj4);
IkReal x1524=(r11*sj5);
IkReal x1525=((1.0)*sj4);
IkReal x1526=((1.0)*r12);
IkReal x1527=(sj3*sj5);
IkReal x1528=(cj1*x1515);
IkReal x1529=(cj1*x1516);
IkReal x1530=(sj1*x1516);
IkReal x1531=(sj1*x1515);
IkReal x1532=((1.0)*x1530);
evalcond[0]=((((-1.0)*x1524*x1525))+(((-1.0)*cj4*x1526))+x1529+x1531+((sj4*x1520)));
evalcond[1]=((((-1.0)*cj4*x1519))+(((-1.0)*x1532))+(((-1.0)*x1518*x1525))+x1528+((sj4*x1521)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x1528))+(((-9.9e-7)*x1518))+(((-1.0)*pz))+(((-0.4)*x1530))+(((9.9e-7)*x1521))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*x1531))+(((0.4)*x1529))+(((0.4)*cj1))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x1524))+(((9.9e-7)*x1520)));
evalcond[4]=((((-1.0)*x1517*x1520))+((r10*x1527))+(((-1.0)*x1532))+((r11*x1522))+((x1517*x1524))+x1528+(((-1.0)*x1523*x1526)));
evalcond[5]=((((-1.0)*x1531))+(((-1.0)*x1517*x1521))+(((-1.0)*x1519*x1523))+((r20*x1527))+((r21*x1522))+((x1517*x1518))+(((-1.0)*x1529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1533=((1.0)*cj1);
IkReal x1534=(sj4*sj5);
IkReal x1535=(cj5*sj4);
IkReal x1536=((1.0)*sj1);
IkReal x1537=(sj1*x1535);
IkReal x1538=(cj4*x1536);
if( IKabs((((cj1*r10*x1535))+(((-1.0)*r22*x1538))+(((-1.0)*r11*x1533*x1534))+(((-1.0)*cj4*r12*x1533))+((r20*x1537))+(((-1.0)*r21*x1534*x1536)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r11*x1534*x1536))+(((-1.0)*r12*x1538))+((r10*x1537))+(((-1.0)*r20*x1533*x1535))+((cj1*r21*x1534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r10*x1535))+(((-1.0)*r22*x1538))+(((-1.0)*r11*x1533*x1534))+(((-1.0)*cj4*r12*x1533))+((r20*x1537))+(((-1.0)*r21*x1534*x1536))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r11*x1534*x1536))+(((-1.0)*r12*x1538))+((r10*x1537))+(((-1.0)*r20*x1533*x1535))+((cj1*r21*x1534))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r10*x1535))+(((-1.0)*r22*x1538))+(((-1.0)*r11*x1533*x1534))+(((-1.0)*cj4*r12*x1533))+((r20*x1537))+(((-1.0)*r21*x1534*x1536))), (((cj1*cj4*r22))+(((-1.0)*r11*x1534*x1536))+(((-1.0)*r12*x1538))+((r10*x1537))+(((-1.0)*r20*x1533*x1535))+((cj1*r21*x1534))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1539=IKcos(j2);
IkReal x1540=IKsin(j2);
IkReal x1541=(cj3*cj4);
IkReal x1542=(r21*sj5);
IkReal x1543=((1.0)*r22);
IkReal x1544=(cj5*r10);
IkReal x1545=(cj5*r20);
IkReal x1546=(cj5*sj3);
IkReal x1547=((1.0)*sj1);
IkReal x1548=(cj3*sj4);
IkReal x1549=(sj3*sj5);
IkReal x1550=(r11*sj5);
IkReal x1551=((1.0)*sj4);
IkReal x1552=((1.0)*r12);
IkReal x1553=((0.4)*sj1);
IkReal x1554=(cj1*x1539);
IkReal x1555=((0.4)*x1540);
IkReal x1556=(x1539*x1547);
IkReal x1557=((1.0)*cj1*x1540);
IkReal x1558=(x1557+x1556);
evalcond[0]=((((-1.0)*cj4*x1543))+(((-1.0)*x1540*x1547))+((sj4*x1545))+x1554+(((-1.0)*x1542*x1551)));
evalcond[1]=((((-1.0)*cj4*x1552))+((sj4*x1544))+(((-1.0)*x1550*x1551))+(((-1.0)*x1558)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x1540*x1553))+(((-9.9e-7)*x1542))+(((0.4)*x1554))+(((-1.0)*pz))+(((-1.0)*x1553))+(((9.9e-7)*x1545)));
evalcond[3]=((((-9.9e-7)*x1550))+(((1.93e-6)*sj1))+(((-1.0)*cj1*x1555))+(((-1.0)*py))+(((-1.0)*x1539*x1553))+(((-0.4)*cj1))+(((9.9e-7)*x1544)));
evalcond[4]=((((-1.0)*x1541*x1544))+(((-1.0)*x1554))+((x1541*x1550))+(((-1.0)*x1548*x1552))+((r11*x1546))+((sj1*x1540))+((r10*x1549)));
evalcond[5]=((((-1.0)*x1541*x1545))+(((-1.0)*x1543*x1548))+((x1541*x1542))+((r21*x1546))+(((-1.0)*x1558))+((r20*x1549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1559=((1.0)*sj1);
IkReal x1560=(cj5*sj4);
IkReal x1561=(r20*sj0);
IkReal x1562=((1.0)*cj1);
IkReal x1563=(cj4*r12);
IkReal x1564=(cj4*r22*sj0);
IkReal x1565=(r11*sj4*sj5);
IkReal x1566=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x1567=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1567.valid){
continue;
}
CheckValue<IkReal> x1568 = IKatan2WithCheck(IkReal(((((-1.0)*x1559*x1566))+(((-1.0)*x1559*x1564))+((cj1*x1563))+((cj1*x1565))+((sj1*x1560*x1561))+(((-1.0)*r10*x1560*x1562)))),IkReal((((cj1*x1566))+((cj1*x1564))+((sj1*x1565))+((sj1*x1563))+(((-1.0)*x1560*x1561*x1562))+(((-1.0)*r10*x1559*x1560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1568.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1567.value)))+(x1568.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1569=IKsin(j2);
IkReal x1570=IKcos(j2);
IkReal x1571=((1.0)*cj3);
IkReal x1572=(cj5*r00);
IkReal x1573=(cj0*cj1);
IkReal x1574=(cj5*r10);
IkReal x1575=(r01*sj5);
IkReal x1576=((1.0)*sj4);
IkReal x1577=(cj5*sj3);
IkReal x1578=(cj1*sj0);
IkReal x1579=(sj3*sj5);
IkReal x1580=(cj5*r20);
IkReal x1581=((1.0)*cj4);
IkReal x1582=((1.93e-6)*sj1);
IkReal x1583=(r11*sj5);
IkReal x1584=(r21*sj5);
IkReal x1585=(cj1*x1570);
IkReal x1586=(cj3*cj4*sj5);
IkReal x1587=((0.4)*x1569);
IkReal x1588=(sj1*x1570);
IkReal x1589=((1.0)*sj1*x1569);
evalcond[0]=((((-1.0)*x1589))+((sj4*x1580))+x1585+(((-1.0)*r22*x1581))+(((-1.0)*x1576*x1584)));
evalcond[1]=(((x1569*x1573))+(((-1.0)*x1575*x1576))+(((-1.0)*r02*x1581))+((sj4*x1572))+((cj0*x1588)));
evalcond[2]=(((x1569*x1578))+((sj4*x1574))+((sj0*x1588))+(((-1.0)*x1576*x1583))+(((-1.0)*r12*x1581)));
evalcond[3]=((((-1.93e-6)*cj1))+(((9.9e-7)*x1580))+(((-9.9e-7)*x1584))+(((0.4)*x1585))+(((-1.0)*pz))+(((-1.0)*sj1*x1587))+(((-0.4)*sj1)));
evalcond[4]=((((9.9e-7)*x1572))+(((-1.0)*cj0*x1582))+(((-9.9e-7)*x1575))+((x1573*x1587))+(((0.4)*x1573))+(((-1.0)*px))+(((0.4)*cj0*x1588)));
evalcond[5]=((((9.9e-7)*x1574))+(((-9.9e-7)*x1583))+(((-1.0)*sj0*x1582))+(((0.4)*x1578))+(((-1.0)*py))+(((0.4)*sj0*x1588))+((x1578*x1587)));
evalcond[6]=(((r20*x1579))+((cj3*cj4*x1584))+(((-1.0)*cj4*x1571*x1580))+((r21*x1577))+(((-1.0)*r22*sj4*x1571))+(((-1.0)*x1588))+(((-1.0)*cj1*x1569)));
evalcond[7]=(((cj3*cj4*x1575))+(((-1.0)*cj0*x1589))+((x1570*x1573))+(((-1.0)*cj4*x1571*x1572))+((r01*x1577))+((r00*x1579))+(((-1.0)*r02*sj4*x1571)));
evalcond[8]=(((cj3*cj4*x1583))+((x1570*x1578))+(((-1.0)*sj0*x1589))+(((-1.0)*r12*sj4*x1571))+(((-1.0)*cj4*x1571*x1574))+((r11*x1577))+((r10*x1579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1590=((1.0)*cj0);
IkReal x1591=(cj4*r02);
IkReal x1592=(cj1*sj4);
IkReal x1593=(cj4*r22);
IkReal x1594=(cj5*r20);
IkReal x1595=(sj1*sj4);
IkReal x1596=(sj5*x1595);
IkReal x1597=((1.0)*cj5*r00);
CheckValue<IkReal> x1598=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1598.valid){
continue;
}
CheckValue<IkReal> x1599 = IKatan2WithCheck(IkReal((((cj1*x1591))+(((-1.0)*x1592*x1597))+(((-1.0)*r21*x1590*x1596))+((r01*sj5*x1592))+((cj0*x1594*x1595))+(((-1.0)*sj1*x1590*x1593)))),IkReal((((r01*x1596))+((cj0*cj1*x1593))+((cj0*r21*sj5*x1592))+(((-1.0)*x1595*x1597))+((sj1*x1591))+(((-1.0)*x1590*x1592*x1594)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1599.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1598.value)))+(x1599.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1600=IKsin(j2);
IkReal x1601=IKcos(j2);
IkReal x1602=((1.0)*cj3);
IkReal x1603=(cj5*r00);
IkReal x1604=(cj0*cj1);
IkReal x1605=(cj5*r10);
IkReal x1606=(r01*sj5);
IkReal x1607=((1.0)*sj4);
IkReal x1608=(cj5*sj3);
IkReal x1609=(cj1*sj0);
IkReal x1610=(sj3*sj5);
IkReal x1611=(cj5*r20);
IkReal x1612=((1.0)*cj4);
IkReal x1613=((1.93e-6)*sj1);
IkReal x1614=(r11*sj5);
IkReal x1615=(r21*sj5);
IkReal x1616=(cj1*x1601);
IkReal x1617=(cj3*cj4*sj5);
IkReal x1618=((0.4)*x1600);
IkReal x1619=(sj1*x1601);
IkReal x1620=((1.0)*sj1*x1600);
evalcond[0]=(x1616+(((-1.0)*x1620))+(((-1.0)*r22*x1612))+((sj4*x1611))+(((-1.0)*x1607*x1615)));
evalcond[1]=(((cj0*x1619))+((x1600*x1604))+(((-1.0)*r02*x1612))+((sj4*x1603))+(((-1.0)*x1606*x1607)));
evalcond[2]=((((-1.0)*r12*x1612))+((x1600*x1609))+((sj0*x1619))+((sj4*x1605))+(((-1.0)*x1607*x1614)));
evalcond[3]=((((-1.93e-6)*cj1))+(((0.4)*x1616))+(((-9.9e-7)*x1615))+(((-1.0)*pz))+(((9.9e-7)*x1611))+(((-0.4)*sj1))+(((-1.0)*sj1*x1618)));
evalcond[4]=((((0.4)*x1604))+(((-9.9e-7)*x1606))+(((9.9e-7)*x1603))+(((-1.0)*cj0*x1613))+(((-1.0)*px))+(((0.4)*cj0*x1619))+((x1604*x1618)));
evalcond[5]=((((-1.0)*sj0*x1613))+(((0.4)*x1609))+(((9.9e-7)*x1605))+(((-9.9e-7)*x1614))+((x1609*x1618))+(((-1.0)*py))+(((0.4)*sj0*x1619)));
evalcond[6]=(((r20*x1610))+((cj3*cj4*x1615))+(((-1.0)*x1619))+(((-1.0)*cj4*x1602*x1611))+(((-1.0)*r22*sj4*x1602))+((r21*x1608))+(((-1.0)*cj1*x1600)));
evalcond[7]=((((-1.0)*cj4*x1602*x1603))+((r00*x1610))+((cj3*cj4*x1606))+((r01*x1608))+((x1601*x1604))+(((-1.0)*cj0*x1620))+(((-1.0)*r02*sj4*x1602)));
evalcond[8]=((((-1.0)*cj4*x1602*x1605))+(((-1.0)*sj0*x1620))+((cj3*cj4*x1614))+(((-1.0)*r12*sj4*x1602))+((r11*x1608))+((x1601*x1609))+((r10*x1610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1621=cj0*cj0;
IkReal x1622=(cj0*px);
IkReal x1623=(cj5*r20);
IkReal x1624=(r21*sj5);
IkReal x1625=((0.4)*sj4);
IkReal x1626=((77.2)*sj4);
IkReal x1627=(cj0*cj4*r02);
IkReal x1628=(cj0*r01*sj5);
IkReal x1629=(cj0*cj5*r00);
IkReal x1630=((((-1.0)*pz))+(((-9.9e-7)*x1624))+(((9.9e-7)*x1623))+(((-1.0)*x1623*x1625))+((x1624*x1625))+(((0.4)*cj4*r22)));
IkReal x1631=(x1621*x1630);
CheckValue<IkReal> x1632 = IKatan2WithCheck(IkReal(((((-0.00019107)*x1629))+((x1626*x1629))+(((-77.2)*x1627))+(((193.0)*x1622))+(((-40000000.0)*x1631))+(((0.00019107)*x1628))+(((-1.0)*x1626*x1628)))),IkReal(((((-16000000.0)*sj4*x1629))+(((-39.6)*x1628))+(((-193.0)*x1631))+(((16000000.0)*x1627))+(((16000000.0)*sj4*x1628))+(((-40000000.0)*x1622))+(((39.6)*x1629)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1632.valid){
continue;
}
CheckValue<IkReal> x1633=IKPowWithIntegerCheck(IKsign(x1621),-1);
if(!x1633.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1632.value)+(((-1.5707963267949)*(x1633.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1634=IKsin(j1);
IkReal x1635=sj0*sj0;
IkReal x1636=IKcos(j1);
IkReal x1637=cj0*cj0;
IkReal x1638=((0.4)*cj5);
IkReal x1639=(r21*sj0);
IkReal x1640=((0.4)*sj4);
IkReal x1641=(r21*sj5);
IkReal x1642=(cj3*r22);
IkReal x1643=(r11*sj5);
IkReal x1644=((9.9e-7)*cj0);
IkReal x1645=((0.4)*cj4);
IkReal x1646=(cj3*cj4);
IkReal x1647=(cj5*r00);
IkReal x1648=(r01*sj5);
IkReal x1649=(r20*sj0);
IkReal x1650=(r00*sj4);
IkReal x1651=((9.9e-7)*cj5);
IkReal x1652=(cj0*sj0);
IkReal x1653=((9.9e-7)*sj0);
IkReal x1654=(r10*sj4);
IkReal x1655=((0.4)*x1636);
IkReal x1656=(r20*x1646);
IkReal x1657=((1.93e-6)*x1634);
IkReal x1658=(r10*x1651);
IkReal x1659=((1.93e-6)*x1636);
IkReal x1660=((0.4)*sj3*sj5);
IkReal x1661=((0.4)*x1634);
IkReal x1662=(x1652*x1657);
IkReal x1663=(x1652*x1655);
evalcond[0]=(((x1640*x1641))+((r20*x1651))+(((-1.0)*pz))+(((-1.0)*x1659))+(((-1.0)*x1661))+(((-9.9e-7)*x1641))+(((-1.0)*r20*sj4*x1638))+((r22*x1645)));
evalcond[1]=((((-1.0)*x1635*x1655))+((sj0*x1638*x1654))+(((-1.0)*sj0*x1640*x1643))+(((-1.0)*r12*sj0*x1645))+(((-1.0)*sj0*x1658))+((x1643*x1653))+((x1635*x1657))+((py*sj0)));
evalcond[2]=(((cj0*x1638*x1650))+(((-1.0)*cj0*r02*x1645))+(((-1.0)*cj0*x1640*x1648))+(((-1.0)*x1644*x1647))+(((-1.0)*x1637*x1655))+((x1644*x1648))+((cj0*px))+((x1637*x1657)));
evalcond[3]=(((sj0*x1659))+(((-1.0)*cj3*r12*x1640))+((r10*x1660))+((sj0*x1661))+(((9.9e-7)*sj5*x1639))+(((-1.0)*r10*x1638*x1646))+((cj3*x1643*x1645))+(((-1.0)*x1649*x1651))+((pz*sj0))+((r11*sj3*x1638)));
evalcond[4]=((((-1.0)*r00*x1638*x1646))+((r01*sj3*x1638))+(((-1.0)*cj3*r02*x1640))+(((-1.0)*cj5*r20*x1644))+((r00*x1660))+((x1641*x1644))+((cj3*x1645*x1648))+((cj0*x1659))+((cj0*x1661))+((cj0*pz)));
evalcond[5]=(((sj0*x1657))+(((-1.0)*sj3*x1638*x1639))+(((9.9e-7)*x1643))+(((-1.0)*cj3*sj5*x1639*x1645))+((x1638*x1646*x1649))+(((-1.0)*x1658))+py+((sj0*x1640*x1642))+(((-1.0)*sj0*x1655))+(((-1.0)*x1649*x1660)));
evalcond[6]=(((cj0*x1640*x1642))+((cj0*x1638*x1656))+(((9.9e-7)*x1648))+(((-1.0)*cj0*cj3*x1641*x1645))+(((-1.0)*cj0*r21*sj3*x1638))+((cj0*x1657))+(((-1.0)*cj0*r20*x1660))+px+(((-9.9e-7)*x1647))+(((-1.0)*cj0*x1655)));
evalcond[7]=(((cj0*x1638*x1654))+(((-1.0)*cj0*x1640*x1643))+((x1648*x1653))+x1662+(((-1.0)*x1647*x1653))+(((-1.0)*cj0*r12*x1645))+(((-1.0)*x1663))+((px*sj0)));
evalcond[8]=((((-1.0)*cj5*r10*x1644))+((sj0*x1638*x1650))+x1662+(((-1.0)*sj0*x1640*x1648))+(((-1.0)*r02*sj0*x1645))+(((-1.0)*x1663))+((x1643*x1644))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1664=(cj4*sj1);
IkReal x1665=(cj1*sj4);
IkReal x1666=((1.0)*cj5);
IkReal x1667=(r21*sj5);
IkReal x1668=(cj1*cj4);
IkReal x1669=(sj1*sj4);
IkReal x1670=(r01*sj4*sj5);
if( IKabs((((cj5*r20*x1669))+(((-1.0)*r22*x1664))+((r02*x1668))+((r01*sj5*x1665))+(((-1.0)*x1667*x1669))+(((-1.0)*r00*x1665*x1666)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x1664))+(((-1.0)*r20*x1665*x1666))+((r01*sj5*x1669))+(((-1.0)*r00*x1666*x1669))+((x1665*x1667))+((r22*x1668)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20*x1669))+(((-1.0)*r22*x1664))+((r02*x1668))+((r01*sj5*x1665))+(((-1.0)*x1667*x1669))+(((-1.0)*r00*x1665*x1666))))+IKsqr((((r02*x1664))+(((-1.0)*r20*x1665*x1666))+((r01*sj5*x1669))+(((-1.0)*r00*x1666*x1669))+((x1665*x1667))+((r22*x1668))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r20*x1669))+(((-1.0)*r22*x1664))+((r02*x1668))+((r01*sj5*x1665))+(((-1.0)*x1667*x1669))+(((-1.0)*r00*x1665*x1666))), (((r02*x1664))+(((-1.0)*r20*x1665*x1666))+((r01*sj5*x1669))+(((-1.0)*r00*x1666*x1669))+((x1665*x1667))+((r22*x1668))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1671=IKcos(j2);
IkReal x1672=IKsin(j2);
IkReal x1673=((1.0)*cj3);
IkReal x1674=(cj5*r00);
IkReal x1675=((1.0)*cj4);
IkReal x1676=(r01*sj5);
IkReal x1677=((1.0)*sj4);
IkReal x1678=(cj5*sj3);
IkReal x1679=(cj5*r20);
IkReal x1680=(sj3*sj5);
IkReal x1681=(r21*sj5);
IkReal x1682=(cj1*x1671);
IkReal x1683=(cj3*cj4*sj5);
IkReal x1684=(cj1*x1672);
IkReal x1685=(sj1*x1672);
IkReal x1686=(sj1*x1671);
IkReal x1687=((1.0)*x1685);
evalcond[0]=(((sj4*x1674))+(((-1.0)*r02*x1675))+x1684+x1686+(((-1.0)*x1676*x1677)));
evalcond[1]=((((-1.0)*x1677*x1681))+(((-1.0)*x1687))+((sj4*x1679))+x1682+(((-1.0)*r22*x1675)));
evalcond[2]=((((9.9e-7)*x1679))+(((-1.93e-6)*cj1))+(((-9.9e-7)*x1681))+(((-1.0)*pz))+(((0.4)*x1682))+(((-0.4)*x1685))+(((-0.4)*sj1)));
evalcond[3]=((((9.9e-7)*x1674))+(((0.4)*cj1))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((0.4)*x1686))+(((0.4)*x1684))+(((-9.9e-7)*x1676)));
evalcond[4]=((((-1.0)*x1687))+((r00*x1680))+x1682+(((-1.0)*cj4*x1673*x1674))+((cj3*cj4*x1676))+((r01*x1678))+(((-1.0)*r02*sj4*x1673)));
evalcond[5]=(((r21*x1678))+((cj3*cj4*x1681))+(((-1.0)*r22*sj4*x1673))+(((-1.0)*x1686))+(((-1.0)*x1684))+(((-1.0)*cj4*x1673*x1679))+((r20*x1680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1688=((1.0)*r01);
IkReal x1689=(sj1*sj4);
IkReal x1690=(cj5*r00);
IkReal x1691=(cj1*cj4);
IkReal x1692=(cj5*r20);
IkReal x1693=(cj1*sj4);
IkReal x1694=(sj5*x1693);
IkReal x1695=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*x1688*x1694))+((x1690*x1693))+((x1689*x1692))+(((-1.0)*r22*x1695))+(((-1.0)*r21*sj5*x1689))+(((-1.0)*r02*x1691)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1692*x1693))+((r21*x1694))+((r22*x1691))+((x1689*x1690))+(((-1.0)*r02*x1695))+(((-1.0)*sj5*x1688*x1689)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1688*x1694))+((x1690*x1693))+((x1689*x1692))+(((-1.0)*r22*x1695))+(((-1.0)*r21*sj5*x1689))+(((-1.0)*r02*x1691))))+IKsqr(((((-1.0)*x1692*x1693))+((r21*x1694))+((r22*x1691))+((x1689*x1690))+(((-1.0)*r02*x1695))+(((-1.0)*sj5*x1688*x1689))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1688*x1694))+((x1690*x1693))+((x1689*x1692))+(((-1.0)*r22*x1695))+(((-1.0)*r21*sj5*x1689))+(((-1.0)*r02*x1691))), ((((-1.0)*x1692*x1693))+((r21*x1694))+((r22*x1691))+((x1689*x1690))+(((-1.0)*r02*x1695))+(((-1.0)*sj5*x1688*x1689))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1696=IKcos(j2);
IkReal x1697=IKsin(j2);
IkReal x1698=((1.0)*cj3);
IkReal x1699=(cj5*r00);
IkReal x1700=((1.0)*cj4);
IkReal x1701=(r01*sj5);
IkReal x1702=((1.0)*sj4);
IkReal x1703=(cj5*sj3);
IkReal x1704=(cj5*r20);
IkReal x1705=((1.0)*sj1);
IkReal x1706=(sj3*sj5);
IkReal x1707=((0.4)*sj1);
IkReal x1708=(r21*sj5);
IkReal x1709=(cj1*x1696);
IkReal x1710=(cj3*cj4*sj5);
IkReal x1711=((0.4)*x1697);
IkReal x1712=(x1696*x1705);
IkReal x1713=((1.0)*cj1*x1697);
IkReal x1714=(x1713+x1712);
evalcond[0]=((((-1.0)*x1702*x1708))+((sj4*x1704))+x1709+(((-1.0)*r22*x1700))+(((-1.0)*x1697*x1705)));
evalcond[1]=((((-1.0)*x1714))+(((-1.0)*r02*x1700))+((sj4*x1699))+(((-1.0)*x1701*x1702)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x1709))+(((9.9e-7)*x1704))+(((-1.0)*x1707))+(((-1.0)*pz))+(((-9.9e-7)*x1708))+(((-1.0)*x1697*x1707)));
evalcond[3]=((((-1.0)*cj1*x1711))+(((1.93e-6)*sj1))+(((9.9e-7)*x1699))+(((-1.0)*px))+(((-1.0)*x1696*x1707))+(((-9.9e-7)*x1701))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*r02*sj4*x1698))+((sj1*x1697))+(((-1.0)*x1709))+((r01*x1703))+((r00*x1706))+(((-1.0)*cj4*x1698*x1699))+((cj3*cj4*x1701)));
evalcond[5]=((((-1.0)*r22*sj4*x1698))+(((-1.0)*x1714))+((r20*x1706))+((r21*x1703))+((cj3*cj4*x1708))+(((-1.0)*cj4*x1698*x1704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1715=(cj4*r12);
IkReal x1716=(cj4*r22);
IkReal x1717=(cj1*sj4);
IkReal x1718=(r11*sj5);
IkReal x1719=(r21*sj5);
IkReal x1720=((1.0)*sj1);
IkReal x1721=(sj1*sj4);
IkReal x1722=(cj5*r20);
IkReal x1723=((1.0)*cj5*r10);
if( IKabs((((cj1*x1715))+(((-1.0)*sj4*x1719*x1720))+((x1721*x1722))+(((-1.0)*x1717*x1723))+(((-1.0)*x1716*x1720))+((x1717*x1718)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1717*x1722))+((cj1*x1716))+((x1718*x1721))+(((-1.0)*cj5*r10*sj4*x1720))+((sj1*x1715))+((x1717*x1719)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1715))+(((-1.0)*sj4*x1719*x1720))+((x1721*x1722))+(((-1.0)*x1717*x1723))+(((-1.0)*x1716*x1720))+((x1717*x1718))))+IKsqr(((((-1.0)*x1717*x1722))+((cj1*x1716))+((x1718*x1721))+(((-1.0)*cj5*r10*sj4*x1720))+((sj1*x1715))+((x1717*x1719))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1715))+(((-1.0)*sj4*x1719*x1720))+((x1721*x1722))+(((-1.0)*x1717*x1723))+(((-1.0)*x1716*x1720))+((x1717*x1718))), ((((-1.0)*x1717*x1722))+((cj1*x1716))+((x1718*x1721))+(((-1.0)*cj5*r10*sj4*x1720))+((sj1*x1715))+((x1717*x1719))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1724=IKcos(j2);
IkReal x1725=IKsin(j2);
IkReal x1726=(cj3*cj4);
IkReal x1727=(r21*sj5);
IkReal x1728=((1.0)*r22);
IkReal x1729=(cj5*r10);
IkReal x1730=(cj5*r20);
IkReal x1731=(cj5*sj3);
IkReal x1732=(cj3*sj4);
IkReal x1733=(r11*sj5);
IkReal x1734=((1.0)*sj4);
IkReal x1735=((1.0)*r12);
IkReal x1736=(sj3*sj5);
IkReal x1737=(cj1*x1724);
IkReal x1738=(cj1*x1725);
IkReal x1739=(sj1*x1725);
IkReal x1740=(sj1*x1724);
IkReal x1741=((1.0)*x1739);
evalcond[0]=((((-1.0)*x1733*x1734))+x1738+x1740+((sj4*x1729))+(((-1.0)*cj4*x1735)));
evalcond[1]=(x1737+((sj4*x1730))+(((-1.0)*x1741))+(((-1.0)*x1727*x1734))+(((-1.0)*cj4*x1728)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x1727))+(((0.4)*x1737))+(((-1.0)*pz))+(((9.9e-7)*x1730))+(((-0.4)*x1739))+(((-0.4)*sj1)));
evalcond[3]=((((-9.9e-7)*x1733))+(((0.4)*cj1))+(((0.4)*x1738))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((9.9e-7)*x1729))+(((0.4)*x1740)));
evalcond[4]=(x1737+((r10*x1736))+((x1726*x1733))+(((-1.0)*x1726*x1729))+(((-1.0)*x1741))+((r11*x1731))+(((-1.0)*x1732*x1735)));
evalcond[5]=((((-1.0)*x1728*x1732))+((x1726*x1727))+((r21*x1731))+(((-1.0)*x1726*x1730))+(((-1.0)*x1740))+((r20*x1736))+(((-1.0)*x1738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1742=((1.0)*cj1);
IkReal x1743=(sj4*sj5);
IkReal x1744=(cj5*sj4);
IkReal x1745=((1.0)*sj1);
IkReal x1746=(sj1*x1744);
IkReal x1747=(cj4*x1745);
if( IKabs((((cj1*r10*x1744))+(((-1.0)*cj4*r12*x1742))+(((-1.0)*r22*x1747))+((r20*x1746))+(((-1.0)*r11*x1742*x1743))+(((-1.0)*r21*x1743*x1745)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1742*x1744))+(((-1.0)*r12*x1747))+((cj1*cj4*r22))+((cj1*r21*x1743))+((r10*x1746))+(((-1.0)*r11*x1743*x1745)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r10*x1744))+(((-1.0)*cj4*r12*x1742))+(((-1.0)*r22*x1747))+((r20*x1746))+(((-1.0)*r11*x1742*x1743))+(((-1.0)*r21*x1743*x1745))))+IKsqr(((((-1.0)*r20*x1742*x1744))+(((-1.0)*r12*x1747))+((cj1*cj4*r22))+((cj1*r21*x1743))+((r10*x1746))+(((-1.0)*r11*x1743*x1745))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r10*x1744))+(((-1.0)*cj4*r12*x1742))+(((-1.0)*r22*x1747))+((r20*x1746))+(((-1.0)*r11*x1742*x1743))+(((-1.0)*r21*x1743*x1745))), ((((-1.0)*r20*x1742*x1744))+(((-1.0)*r12*x1747))+((cj1*cj4*r22))+((cj1*r21*x1743))+((r10*x1746))+(((-1.0)*r11*x1743*x1745))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1748=IKcos(j2);
IkReal x1749=IKsin(j2);
IkReal x1750=(cj3*cj4);
IkReal x1751=(r21*sj5);
IkReal x1752=((1.0)*r22);
IkReal x1753=(cj5*r10);
IkReal x1754=(cj5*r20);
IkReal x1755=(cj5*sj3);
IkReal x1756=((1.0)*sj1);
IkReal x1757=(cj3*sj4);
IkReal x1758=(sj3*sj5);
IkReal x1759=(r11*sj5);
IkReal x1760=((1.0)*sj4);
IkReal x1761=((1.0)*r12);
IkReal x1762=((0.4)*sj1);
IkReal x1763=(cj1*x1748);
IkReal x1764=((0.4)*x1749);
IkReal x1765=(x1748*x1756);
IkReal x1766=((1.0)*cj1*x1749);
IkReal x1767=(x1766+x1765);
evalcond[0]=((((-1.0)*cj4*x1752))+x1763+((sj4*x1754))+(((-1.0)*x1749*x1756))+(((-1.0)*x1751*x1760)));
evalcond[1]=((((-1.0)*x1767))+((sj4*x1753))+(((-1.0)*x1759*x1760))+(((-1.0)*cj4*x1761)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x1763))+(((-1.0)*x1762))+(((-1.0)*pz))+(((-9.9e-7)*x1751))+(((9.9e-7)*x1754))+(((-1.0)*x1749*x1762)));
evalcond[3]=((((-1.0)*cj1*x1764))+(((1.93e-6)*sj1))+(((-1.0)*py))+(((-1.0)*x1748*x1762))+(((-9.9e-7)*x1759))+(((9.9e-7)*x1753))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*x1763))+((x1750*x1759))+(((-1.0)*x1750*x1753))+(((-1.0)*x1757*x1761))+((sj1*x1749))+((r11*x1755))+((r10*x1758)));
evalcond[5]=((((-1.0)*x1767))+((r21*x1755))+((x1750*x1751))+((r20*x1758))+(((-1.0)*x1750*x1754))+(((-1.0)*x1752*x1757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1768=((1.0)*sj1);
IkReal x1769=(cj5*sj4);
IkReal x1770=(r20*sj0);
IkReal x1771=((1.0)*cj1);
IkReal x1772=(cj4*r12);
IkReal x1773=(cj4*r22*sj0);
IkReal x1774=(r11*sj4*sj5);
IkReal x1775=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x1776 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1769*x1771))+((sj1*x1769*x1770))+(((-1.0)*x1768*x1775))+(((-1.0)*x1768*x1773))+((cj1*x1774))+((cj1*x1772)))),IkReal(((((-1.0)*r10*x1768*x1769))+((sj1*x1772))+((sj1*x1774))+(((-1.0)*x1769*x1770*x1771))+((cj1*x1775))+((cj1*x1773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1776.valid){
continue;
}
CheckValue<IkReal> x1777=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1777.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1776.value)+(((1.5707963267949)*(x1777.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1778=IKsin(j2);
IkReal x1779=IKcos(j2);
IkReal x1780=((1.0)*cj3);
IkReal x1781=(cj5*r00);
IkReal x1782=(cj0*cj1);
IkReal x1783=(cj5*r10);
IkReal x1784=(r01*sj5);
IkReal x1785=((1.0)*sj4);
IkReal x1786=(cj5*sj3);
IkReal x1787=(cj1*sj0);
IkReal x1788=(sj3*sj5);
IkReal x1789=(cj5*r20);
IkReal x1790=((1.0)*cj4);
IkReal x1791=((1.93e-6)*sj1);
IkReal x1792=(r11*sj5);
IkReal x1793=(r21*sj5);
IkReal x1794=(cj1*x1779);
IkReal x1795=(cj3*cj4*sj5);
IkReal x1796=((0.4)*x1778);
IkReal x1797=(sj1*x1779);
IkReal x1798=((1.0)*sj1*x1778);
evalcond[0]=((((-1.0)*x1798))+(((-1.0)*r22*x1790))+x1794+(((-1.0)*x1785*x1793))+((sj4*x1789)));
evalcond[1]=(((x1778*x1782))+((sj4*x1781))+(((-1.0)*x1784*x1785))+(((-1.0)*r02*x1790))+((cj0*x1797)));
evalcond[2]=(((sj0*x1797))+(((-1.0)*r12*x1790))+((x1778*x1787))+(((-1.0)*x1785*x1792))+((sj4*x1783)));
evalcond[3]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x1793))+(((-1.0)*pz))+(((0.4)*x1794))+(((9.9e-7)*x1789))+(((-0.4)*sj1))+(((-1.0)*sj1*x1796)));
evalcond[4]=((((0.4)*cj0*x1797))+(((-1.0)*cj0*x1791))+((x1782*x1796))+(((-9.9e-7)*x1784))+(((-1.0)*px))+(((0.4)*x1782))+(((9.9e-7)*x1781)));
evalcond[5]=((((-1.0)*sj0*x1791))+(((-9.9e-7)*x1792))+((x1787*x1796))+(((-1.0)*py))+(((0.4)*x1787))+(((0.4)*sj0*x1797))+(((9.9e-7)*x1783)));
evalcond[6]=(((r20*x1788))+(((-1.0)*cj1*x1778))+(((-1.0)*cj4*x1780*x1789))+((r21*x1786))+((cj3*cj4*x1793))+(((-1.0)*r22*sj4*x1780))+(((-1.0)*x1797)));
evalcond[7]=((((-1.0)*cj0*x1798))+(((-1.0)*cj4*x1780*x1781))+((cj3*cj4*x1784))+((x1779*x1782))+(((-1.0)*r02*sj4*x1780))+((r00*x1788))+((r01*x1786)));
evalcond[8]=(((r10*x1788))+(((-1.0)*cj4*x1780*x1783))+(((-1.0)*sj0*x1798))+((cj3*cj4*x1792))+(((-1.0)*r12*sj4*x1780))+((x1779*x1787))+((r11*x1786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1799=((1.0)*cj0);
IkReal x1800=(cj4*r02);
IkReal x1801=(cj1*sj4);
IkReal x1802=(cj4*r22);
IkReal x1803=(cj5*r20);
IkReal x1804=(sj1*sj4);
IkReal x1805=(sj5*x1804);
IkReal x1806=((1.0)*cj5*r00);
CheckValue<IkReal> x1807 = IKatan2WithCheck(IkReal((((cj0*x1803*x1804))+(((-1.0)*x1801*x1806))+(((-1.0)*sj1*x1799*x1802))+((r01*sj5*x1801))+(((-1.0)*r21*x1799*x1805))+((cj1*x1800)))),IkReal((((sj1*x1800))+((cj0*cj1*x1802))+(((-1.0)*x1804*x1806))+((cj0*r21*sj5*x1801))+((r01*x1805))+(((-1.0)*x1799*x1801*x1803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1807.valid){
continue;
}
CheckValue<IkReal> x1808=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1808.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1807.value)+(((1.5707963267949)*(x1808.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1809=IKsin(j2);
IkReal x1810=IKcos(j2);
IkReal x1811=((1.0)*cj3);
IkReal x1812=(cj5*r00);
IkReal x1813=(cj0*cj1);
IkReal x1814=(cj5*r10);
IkReal x1815=(r01*sj5);
IkReal x1816=((1.0)*sj4);
IkReal x1817=(cj5*sj3);
IkReal x1818=(cj1*sj0);
IkReal x1819=(sj3*sj5);
IkReal x1820=(cj5*r20);
IkReal x1821=((1.0)*cj4);
IkReal x1822=((1.93e-6)*sj1);
IkReal x1823=(r11*sj5);
IkReal x1824=(r21*sj5);
IkReal x1825=(cj1*x1810);
IkReal x1826=(cj3*cj4*sj5);
IkReal x1827=((0.4)*x1809);
IkReal x1828=(sj1*x1810);
IkReal x1829=((1.0)*sj1*x1809);
evalcond[0]=((((-1.0)*x1829))+((sj4*x1820))+(((-1.0)*r22*x1821))+x1825+(((-1.0)*x1816*x1824)));
evalcond[1]=(((cj0*x1828))+((x1809*x1813))+(((-1.0)*x1815*x1816))+(((-1.0)*r02*x1821))+((sj4*x1812)));
evalcond[2]=(((x1809*x1818))+(((-1.0)*r12*x1821))+((sj0*x1828))+(((-1.0)*x1816*x1823))+((sj4*x1814)));
evalcond[3]=((((9.9e-7)*x1820))+(((-1.93e-6)*cj1))+(((0.4)*x1825))+(((-9.9e-7)*x1824))+(((-1.0)*pz))+(((-0.4)*sj1))+(((-1.0)*sj1*x1827)));
evalcond[4]=((((9.9e-7)*x1812))+(((0.4)*cj0*x1828))+(((-9.9e-7)*x1815))+(((-1.0)*px))+(((0.4)*x1813))+(((-1.0)*cj0*x1822))+((x1813*x1827)));
evalcond[5]=((((9.9e-7)*x1814))+(((-9.9e-7)*x1823))+((x1818*x1827))+(((-1.0)*py))+(((0.4)*x1818))+(((0.4)*sj0*x1828))+(((-1.0)*sj0*x1822)));
evalcond[6]=((((-1.0)*r22*sj4*x1811))+(((-1.0)*cj1*x1809))+(((-1.0)*x1828))+((r20*x1819))+(((-1.0)*cj4*x1811*x1820))+((cj3*cj4*x1824))+((r21*x1817)));
evalcond[7]=(((cj3*cj4*x1815))+(((-1.0)*cj0*x1829))+((r01*x1817))+((r00*x1819))+(((-1.0)*r02*sj4*x1811))+(((-1.0)*cj4*x1811*x1812))+((x1810*x1813)));
evalcond[8]=((((-1.0)*r12*sj4*x1811))+(((-1.0)*sj0*x1829))+((cj3*cj4*x1823))+((r11*x1817))+((r10*x1819))+(((-1.0)*cj4*x1811*x1814))+((x1810*x1818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1830=sj0*sj0;
IkReal x1831=(py*sj0);
IkReal x1832=((77.2)*sj0);
IkReal x1833=(sj4*sj5);
IkReal x1834=(cj4*r12);
IkReal x1835=((16000000.0)*sj0);
IkReal x1836=(cj5*r20);
IkReal x1837=(cj5*r10*sj0);
IkReal x1838=(r11*sj0*sj5);
IkReal x1839=((((-9.9e-7)*r21*sj5))+(((-0.4)*sj4*x1836))+(((-1.0)*pz))+(((0.4)*cj4*r22))+(((9.9e-7)*x1836))+(((0.4)*r21*x1833)));
IkReal x1840=(x1830*x1839);
CheckValue<IkReal> x1841 = IKatan2WithCheck(IkReal(((((-40000000.0)*x1840))+(((0.00019107)*x1838))+(((-1.0)*x1832*x1834))+((cj5*r10*sj4*x1832))+(((-0.00019107)*x1837))+(((193.0)*x1831))+(((-1.0)*r11*x1832*x1833)))),IkReal(((((-39.6)*x1838))+(((-193.0)*x1840))+((r11*x1833*x1835))+(((-16000000.0)*sj4*x1837))+(((39.6)*x1837))+((x1834*x1835))+(((-40000000.0)*x1831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1841.valid){
continue;
}
CheckValue<IkReal> x1842=IKPowWithIntegerCheck(IKsign(x1830),-1);
if(!x1842.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1841.value)+(((-1.5707963267949)*(x1842.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1843=IKsin(j1);
IkReal x1844=sj0*sj0;
IkReal x1845=IKcos(j1);
IkReal x1846=cj0*cj0;
IkReal x1847=((0.4)*cj5);
IkReal x1848=(r21*sj0);
IkReal x1849=((0.4)*sj4);
IkReal x1850=(r21*sj5);
IkReal x1851=(cj3*r22);
IkReal x1852=(r11*sj5);
IkReal x1853=((9.9e-7)*cj0);
IkReal x1854=((0.4)*cj4);
IkReal x1855=(cj3*cj4);
IkReal x1856=(cj5*r00);
IkReal x1857=(r01*sj5);
IkReal x1858=(r20*sj0);
IkReal x1859=(r00*sj4);
IkReal x1860=((9.9e-7)*cj5);
IkReal x1861=(cj0*sj0);
IkReal x1862=((9.9e-7)*sj0);
IkReal x1863=(r10*sj4);
IkReal x1864=((0.4)*x1845);
IkReal x1865=(r20*x1855);
IkReal x1866=((1.93e-6)*x1843);
IkReal x1867=(r10*x1860);
IkReal x1868=((1.93e-6)*x1845);
IkReal x1869=((0.4)*sj3*sj5);
IkReal x1870=((0.4)*x1843);
IkReal x1871=(x1861*x1866);
IkReal x1872=(x1861*x1864);
evalcond[0]=((((-9.9e-7)*x1850))+(((-1.0)*x1870))+((x1849*x1850))+((r22*x1854))+(((-1.0)*pz))+((r20*x1860))+(((-1.0)*r20*sj4*x1847))+(((-1.0)*x1868)));
evalcond[1]=(((x1844*x1866))+(((-1.0)*x1844*x1864))+((sj0*x1847*x1863))+(((-1.0)*sj0*x1849*x1852))+((py*sj0))+(((-1.0)*r12*sj0*x1854))+(((-1.0)*sj0*x1867))+((x1852*x1862)));
evalcond[2]=((((-1.0)*cj0*x1849*x1857))+((cj0*x1847*x1859))+((x1846*x1866))+((x1853*x1857))+(((-1.0)*x1846*x1864))+(((-1.0)*cj0*r02*x1854))+((cj0*px))+(((-1.0)*x1853*x1856)));
evalcond[3]=((((9.9e-7)*sj5*x1848))+(((-1.0)*r10*x1847*x1855))+((sj0*x1870))+((r11*sj3*x1847))+((r10*x1869))+((sj0*x1868))+((pz*sj0))+((cj3*x1852*x1854))+(((-1.0)*x1858*x1860))+(((-1.0)*cj3*r12*x1849)));
evalcond[4]=(((x1850*x1853))+(((-1.0)*r00*x1847*x1855))+((cj3*x1854*x1857))+((cj0*x1868))+((r01*sj3*x1847))+(((-1.0)*cj3*r02*x1849))+((cj0*pz))+(((-1.0)*cj5*r20*x1853))+((r00*x1869))+((cj0*x1870)));
evalcond[5]=((((9.9e-7)*x1852))+(((-1.0)*cj3*sj5*x1848*x1854))+py+((x1847*x1855*x1858))+((sj0*x1866))+((sj0*x1849*x1851))+(((-1.0)*x1858*x1869))+(((-1.0)*x1867))+(((-1.0)*sj0*x1864))+(((-1.0)*sj3*x1847*x1848)));
evalcond[6]=((((-1.0)*cj0*cj3*x1850*x1854))+(((9.9e-7)*x1857))+(((-1.0)*cj0*x1864))+(((-9.9e-7)*x1856))+((cj0*x1849*x1851))+((cj0*x1847*x1865))+((cj0*x1866))+px+(((-1.0)*cj0*r21*sj3*x1847))+(((-1.0)*cj0*r20*x1869)));
evalcond[7]=((((-1.0)*x1856*x1862))+(((-1.0)*cj0*x1849*x1852))+(((-1.0)*x1872))+((cj0*x1847*x1863))+(((-1.0)*cj0*r12*x1854))+x1871+((px*sj0))+((x1857*x1862)));
evalcond[8]=((((-1.0)*cj5*r10*x1853))+((x1852*x1853))+(((-1.0)*x1872))+(((-1.0)*sj0*x1849*x1857))+x1871+((cj0*py))+((sj0*x1847*x1859))+(((-1.0)*r02*sj0*x1854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1873=(cj4*sj1);
IkReal x1874=(cj1*sj4);
IkReal x1875=((1.0)*cj5);
IkReal x1876=(r21*sj5);
IkReal x1877=(cj1*cj4);
IkReal x1878=(sj1*sj4);
IkReal x1879=(r01*sj4*sj5);
if( IKabs((((r02*x1877))+((cj5*r20*x1878))+(((-1.0)*x1876*x1878))+(((-1.0)*r22*x1873))+(((-1.0)*r00*x1874*x1875))+((r01*sj5*x1874)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1877))+((r02*x1873))+((x1874*x1876))+(((-1.0)*r20*x1874*x1875))+(((-1.0)*r00*x1875*x1878))+((r01*sj5*x1878)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x1877))+((cj5*r20*x1878))+(((-1.0)*x1876*x1878))+(((-1.0)*r22*x1873))+(((-1.0)*r00*x1874*x1875))+((r01*sj5*x1874))))+IKsqr((((r22*x1877))+((r02*x1873))+((x1874*x1876))+(((-1.0)*r20*x1874*x1875))+(((-1.0)*r00*x1875*x1878))+((r01*sj5*x1878))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x1877))+((cj5*r20*x1878))+(((-1.0)*x1876*x1878))+(((-1.0)*r22*x1873))+(((-1.0)*r00*x1874*x1875))+((r01*sj5*x1874))), (((r22*x1877))+((r02*x1873))+((x1874*x1876))+(((-1.0)*r20*x1874*x1875))+(((-1.0)*r00*x1875*x1878))+((r01*sj5*x1878))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1880=IKcos(j2);
IkReal x1881=IKsin(j2);
IkReal x1882=((1.0)*cj3);
IkReal x1883=(cj5*r00);
IkReal x1884=((1.0)*cj4);
IkReal x1885=(r01*sj5);
IkReal x1886=((1.0)*sj4);
IkReal x1887=(cj5*sj3);
IkReal x1888=(cj5*r20);
IkReal x1889=(sj3*sj5);
IkReal x1890=(r21*sj5);
IkReal x1891=(cj1*x1880);
IkReal x1892=(cj3*cj4*sj5);
IkReal x1893=(cj1*x1881);
IkReal x1894=(sj1*x1881);
IkReal x1895=(sj1*x1880);
IkReal x1896=((1.0)*x1894);
evalcond[0]=((((-1.0)*r02*x1884))+((sj4*x1883))+x1895+x1893+(((-1.0)*x1885*x1886)));
evalcond[1]=((((-1.0)*r22*x1884))+((sj4*x1888))+(((-1.0)*x1886*x1890))+x1891+(((-1.0)*x1896)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x1890))+(((9.9e-7)*x1888))+(((-1.0)*pz))+(((-0.4)*x1894))+(((-0.4)*sj1))+(((0.4)*x1891)));
evalcond[3]=((((-9.9e-7)*x1885))+(((0.4)*cj1))+(((9.9e-7)*x1883))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((0.4)*x1893))+(((0.4)*x1895)));
evalcond[4]=((((-1.0)*cj4*x1882*x1883))+((cj3*cj4*x1885))+((r00*x1889))+((r01*x1887))+x1891+(((-1.0)*r02*sj4*x1882))+(((-1.0)*x1896)));
evalcond[5]=(((r21*x1887))+((r20*x1889))+(((-1.0)*cj4*x1882*x1888))+(((-1.0)*x1893))+(((-1.0)*x1895))+(((-1.0)*r22*sj4*x1882))+((cj3*cj4*x1890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1897=((1.0)*r01);
IkReal x1898=(sj1*sj4);
IkReal x1899=(cj5*r00);
IkReal x1900=(cj1*cj4);
IkReal x1901=(cj5*r20);
IkReal x1902=(cj1*sj4);
IkReal x1903=(sj5*x1902);
IkReal x1904=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r21*sj5*x1898))+(((-1.0)*r22*x1904))+((x1898*x1901))+((x1899*x1902))+(((-1.0)*x1897*x1903))+(((-1.0)*r02*x1900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1903))+((r22*x1900))+(((-1.0)*x1901*x1902))+((x1898*x1899))+(((-1.0)*sj5*x1897*x1898))+(((-1.0)*r02*x1904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*sj5*x1898))+(((-1.0)*r22*x1904))+((x1898*x1901))+((x1899*x1902))+(((-1.0)*x1897*x1903))+(((-1.0)*r02*x1900))))+IKsqr((((r21*x1903))+((r22*x1900))+(((-1.0)*x1901*x1902))+((x1898*x1899))+(((-1.0)*sj5*x1897*x1898))+(((-1.0)*r02*x1904))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*sj5*x1898))+(((-1.0)*r22*x1904))+((x1898*x1901))+((x1899*x1902))+(((-1.0)*x1897*x1903))+(((-1.0)*r02*x1900))), (((r21*x1903))+((r22*x1900))+(((-1.0)*x1901*x1902))+((x1898*x1899))+(((-1.0)*sj5*x1897*x1898))+(((-1.0)*r02*x1904))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1905=IKcos(j2);
IkReal x1906=IKsin(j2);
IkReal x1907=((1.0)*cj3);
IkReal x1908=(cj5*r00);
IkReal x1909=((1.0)*cj4);
IkReal x1910=(r01*sj5);
IkReal x1911=((1.0)*sj4);
IkReal x1912=(cj5*sj3);
IkReal x1913=(cj5*r20);
IkReal x1914=((1.0)*sj1);
IkReal x1915=(sj3*sj5);
IkReal x1916=((0.4)*sj1);
IkReal x1917=(r21*sj5);
IkReal x1918=(cj1*x1905);
IkReal x1919=(cj3*cj4*sj5);
IkReal x1920=((0.4)*x1906);
IkReal x1921=(x1905*x1914);
IkReal x1922=((1.0)*cj1*x1906);
IkReal x1923=(x1921+x1922);
evalcond[0]=((((-1.0)*x1911*x1917))+((sj4*x1913))+(((-1.0)*r22*x1909))+x1918+(((-1.0)*x1906*x1914)));
evalcond[1]=((((-1.0)*x1910*x1911))+((sj4*x1908))+(((-1.0)*x1923))+(((-1.0)*r02*x1909)));
evalcond[2]=((((9.9e-7)*x1913))+(((-1.93e-6)*cj1))+(((0.4)*x1918))+(((-1.0)*pz))+(((-9.9e-7)*x1917))+(((-1.0)*x1906*x1916))+(((-1.0)*x1916)));
evalcond[3]=((((-1.0)*cj1*x1920))+(((9.9e-7)*x1908))+(((-1.0)*x1905*x1916))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-9.9e-7)*x1910))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*r02*sj4*x1907))+((r00*x1915))+((r01*x1912))+((cj3*cj4*x1910))+(((-1.0)*x1918))+((sj1*x1906))+(((-1.0)*cj4*x1907*x1908)));
evalcond[5]=(((cj3*cj4*x1917))+(((-1.0)*x1923))+(((-1.0)*r22*sj4*x1907))+((r21*x1912))+(((-1.0)*cj4*x1907*x1913))+((r20*x1915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1924=(cj4*r12);
IkReal x1925=(cj4*r22);
IkReal x1926=(cj1*sj4);
IkReal x1927=(r11*sj5);
IkReal x1928=(r21*sj5);
IkReal x1929=((1.0)*sj1);
IkReal x1930=(sj1*sj4);
IkReal x1931=(cj5*r20);
IkReal x1932=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*sj4*x1928*x1929))+((cj1*x1924))+((x1930*x1931))+(((-1.0)*x1926*x1932))+(((-1.0)*x1925*x1929))+((x1926*x1927)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1925))+(((-1.0)*cj5*r10*sj4*x1929))+(((-1.0)*x1926*x1931))+((x1927*x1930))+((x1926*x1928))+((sj1*x1924)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x1928*x1929))+((cj1*x1924))+((x1930*x1931))+(((-1.0)*x1926*x1932))+(((-1.0)*x1925*x1929))+((x1926*x1927))))+IKsqr((((cj1*x1925))+(((-1.0)*cj5*r10*sj4*x1929))+(((-1.0)*x1926*x1931))+((x1927*x1930))+((x1926*x1928))+((sj1*x1924))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x1928*x1929))+((cj1*x1924))+((x1930*x1931))+(((-1.0)*x1926*x1932))+(((-1.0)*x1925*x1929))+((x1926*x1927))), (((cj1*x1925))+(((-1.0)*cj5*r10*sj4*x1929))+(((-1.0)*x1926*x1931))+((x1927*x1930))+((x1926*x1928))+((sj1*x1924))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1933=IKcos(j2);
IkReal x1934=IKsin(j2);
IkReal x1935=(cj3*cj4);
IkReal x1936=(r21*sj5);
IkReal x1937=((1.0)*r22);
IkReal x1938=(cj5*r10);
IkReal x1939=(cj5*r20);
IkReal x1940=(cj5*sj3);
IkReal x1941=(cj3*sj4);
IkReal x1942=(r11*sj5);
IkReal x1943=((1.0)*sj4);
IkReal x1944=((1.0)*r12);
IkReal x1945=(sj3*sj5);
IkReal x1946=(cj1*x1933);
IkReal x1947=(cj1*x1934);
IkReal x1948=(sj1*x1934);
IkReal x1949=(sj1*x1933);
IkReal x1950=((1.0)*x1948);
evalcond[0]=((((-1.0)*cj4*x1944))+(((-1.0)*x1942*x1943))+((sj4*x1938))+x1949+x1947);
evalcond[1]=((((-1.0)*x1950))+(((-1.0)*cj4*x1937))+((sj4*x1939))+x1946+(((-1.0)*x1936*x1943)));
evalcond[2]=((((-1.93e-6)*cj1))+(((9.9e-7)*x1939))+(((-1.0)*pz))+(((-0.4)*x1948))+(((-9.9e-7)*x1936))+(((0.4)*x1946))+(((-0.4)*sj1)));
evalcond[3]=((((9.9e-7)*x1938))+(((0.4)*cj1))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x1942))+(((0.4)*x1947))+(((0.4)*x1949)));
evalcond[4]=((((-1.0)*x1950))+((r11*x1940))+((r10*x1945))+((x1935*x1942))+(((-1.0)*x1935*x1938))+x1946+(((-1.0)*x1941*x1944)));
evalcond[5]=((((-1.0)*x1937*x1941))+((r20*x1945))+(((-1.0)*x1935*x1939))+((r21*x1940))+(((-1.0)*x1947))+(((-1.0)*x1949))+((x1935*x1936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1951=((1.0)*cj1);
IkReal x1952=(sj4*sj5);
IkReal x1953=(cj5*sj4);
IkReal x1954=((1.0)*sj1);
IkReal x1955=(sj1*x1953);
IkReal x1956=(cj4*x1954);
if( IKabs(((((-1.0)*r22*x1956))+((r20*x1955))+(((-1.0)*r21*x1952*x1954))+((cj1*r10*x1953))+(((-1.0)*r11*x1951*x1952))+(((-1.0)*cj4*r12*x1951)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r20*x1951*x1953))+(((-1.0)*r11*x1952*x1954))+((r10*x1955))+(((-1.0)*r12*x1956))+((cj1*r21*x1952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1956))+((r20*x1955))+(((-1.0)*r21*x1952*x1954))+((cj1*r10*x1953))+(((-1.0)*r11*x1951*x1952))+(((-1.0)*cj4*r12*x1951))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r20*x1951*x1953))+(((-1.0)*r11*x1952*x1954))+((r10*x1955))+(((-1.0)*r12*x1956))+((cj1*r21*x1952))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1956))+((r20*x1955))+(((-1.0)*r21*x1952*x1954))+((cj1*r10*x1953))+(((-1.0)*r11*x1951*x1952))+(((-1.0)*cj4*r12*x1951))), (((cj1*cj4*r22))+(((-1.0)*r20*x1951*x1953))+(((-1.0)*r11*x1952*x1954))+((r10*x1955))+(((-1.0)*r12*x1956))+((cj1*r21*x1952))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1957=IKcos(j2);
IkReal x1958=IKsin(j2);
IkReal x1959=(cj3*cj4);
IkReal x1960=(r21*sj5);
IkReal x1961=((1.0)*r22);
IkReal x1962=(cj5*r10);
IkReal x1963=(cj5*r20);
IkReal x1964=(cj5*sj3);
IkReal x1965=((1.0)*sj1);
IkReal x1966=(cj3*sj4);
IkReal x1967=(sj3*sj5);
IkReal x1968=(r11*sj5);
IkReal x1969=((1.0)*sj4);
IkReal x1970=((1.0)*r12);
IkReal x1971=((0.4)*sj1);
IkReal x1972=(cj1*x1957);
IkReal x1973=((0.4)*x1958);
IkReal x1974=(x1957*x1965);
IkReal x1975=((1.0)*cj1*x1958);
IkReal x1976=(x1975+x1974);
evalcond[0]=((((-1.0)*x1958*x1965))+(((-1.0)*cj4*x1961))+x1972+(((-1.0)*x1960*x1969))+((sj4*x1963)));
evalcond[1]=((((-1.0)*cj4*x1970))+(((-1.0)*x1968*x1969))+(((-1.0)*x1976))+((sj4*x1962)));
evalcond[2]=((((9.9e-7)*x1963))+(((-1.93e-6)*cj1))+(((-1.0)*x1958*x1971))+(((-1.0)*x1971))+(((-1.0)*pz))+(((-9.9e-7)*x1960))+(((0.4)*x1972)));
evalcond[3]=((((9.9e-7)*x1962))+(((-1.0)*x1957*x1971))+(((1.93e-6)*sj1))+(((-1.0)*py))+(((-1.0)*cj1*x1973))+(((-9.9e-7)*x1968))+(((-0.4)*cj1)));
evalcond[4]=(((x1959*x1968))+(((-1.0)*x1959*x1962))+((r10*x1967))+((r11*x1964))+(((-1.0)*x1966*x1970))+(((-1.0)*x1972))+((sj1*x1958)));
evalcond[5]=(((x1959*x1960))+(((-1.0)*x1959*x1963))+((r20*x1967))+(((-1.0)*x1976))+((r21*x1964))+(((-1.0)*x1961*x1966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1977=((1.0)*sj1);
IkReal x1978=(cj5*sj4);
IkReal x1979=(r20*sj0);
IkReal x1980=((1.0)*cj1);
IkReal x1981=(cj4*r12);
IkReal x1982=(cj4*r22*sj0);
IkReal x1983=(r11*sj4*sj5);
IkReal x1984=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x1985=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1985.valid){
continue;
}
CheckValue<IkReal> x1986 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1978*x1980))+((sj1*x1978*x1979))+((cj1*x1983))+((cj1*x1981))+(((-1.0)*x1977*x1982))+(((-1.0)*x1977*x1984)))),IkReal(((((-1.0)*x1978*x1979*x1980))+(((-1.0)*r10*x1977*x1978))+((sj1*x1981))+((sj1*x1983))+((cj1*x1984))+((cj1*x1982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1986.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1985.value)))+(x1986.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1987=IKsin(j2);
IkReal x1988=IKcos(j2);
IkReal x1989=((1.0)*cj3);
IkReal x1990=(cj5*r00);
IkReal x1991=(cj0*cj1);
IkReal x1992=(cj5*r10);
IkReal x1993=(r01*sj5);
IkReal x1994=((1.0)*sj4);
IkReal x1995=(cj5*sj3);
IkReal x1996=(cj1*sj0);
IkReal x1997=(sj3*sj5);
IkReal x1998=(cj5*r20);
IkReal x1999=((1.0)*cj4);
IkReal x2000=((1.93e-6)*sj1);
IkReal x2001=(r11*sj5);
IkReal x2002=(r21*sj5);
IkReal x2003=(cj1*x1988);
IkReal x2004=(cj3*cj4*sj5);
IkReal x2005=((0.4)*x1987);
IkReal x2006=(sj1*x1988);
IkReal x2007=((1.0)*sj1*x1987);
evalcond[0]=(x2003+(((-1.0)*x1994*x2002))+(((-1.0)*x2007))+(((-1.0)*r22*x1999))+((sj4*x1998)));
evalcond[1]=((((-1.0)*x1993*x1994))+(((-1.0)*r02*x1999))+((cj0*x2006))+((x1987*x1991))+((sj4*x1990)));
evalcond[2]=((((-1.0)*x1994*x2001))+((sj0*x2006))+((x1987*x1996))+(((-1.0)*r12*x1999))+((sj4*x1992)));
evalcond[3]=((((-1.93e-6)*cj1))+(((-1.0)*sj1*x2005))+(((-1.0)*pz))+(((0.4)*x2003))+(((9.9e-7)*x1998))+(((-9.9e-7)*x2002))+(((-0.4)*sj1)));
evalcond[4]=((((-9.9e-7)*x1993))+(((-1.0)*px))+(((9.9e-7)*x1990))+((x1991*x2005))+(((-1.0)*cj0*x2000))+(((0.4)*x1991))+(((0.4)*cj0*x2006)));
evalcond[5]=((((-1.0)*py))+(((9.9e-7)*x1992))+(((-1.0)*sj0*x2000))+(((0.4)*x1996))+(((-9.9e-7)*x2001))+((x1996*x2005))+(((0.4)*sj0*x2006)));
evalcond[6]=((((-1.0)*r22*sj4*x1989))+((r21*x1995))+((cj3*cj4*x2002))+(((-1.0)*cj1*x1987))+(((-1.0)*cj4*x1989*x1998))+((r20*x1997))+(((-1.0)*x2006)));
evalcond[7]=(((x1988*x1991))+(((-1.0)*cj4*x1989*x1990))+((r00*x1997))+(((-1.0)*cj0*x2007))+((r01*x1995))+((cj3*cj4*x1993))+(((-1.0)*r02*sj4*x1989)));
evalcond[8]=(((cj3*cj4*x2001))+((r11*x1995))+((x1988*x1996))+(((-1.0)*r12*sj4*x1989))+(((-1.0)*cj4*x1989*x1992))+((r10*x1997))+(((-1.0)*sj0*x2007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2008=((1.0)*cj0);
IkReal x2009=(cj4*r02);
IkReal x2010=(cj1*sj4);
IkReal x2011=(cj4*r22);
IkReal x2012=(cj5*r20);
IkReal x2013=(sj1*sj4);
IkReal x2014=(sj5*x2013);
IkReal x2015=((1.0)*cj5*r00);
CheckValue<IkReal> x2016 = IKatan2WithCheck(IkReal(((((-1.0)*x2010*x2015))+((r01*sj5*x2010))+((cj0*x2012*x2013))+(((-1.0)*r21*x2008*x2014))+(((-1.0)*sj1*x2008*x2011))+((cj1*x2009)))),IkReal(((((-1.0)*x2013*x2015))+(((-1.0)*x2008*x2010*x2012))+((r01*x2014))+((sj1*x2009))+((cj0*cj1*x2011))+((cj0*r21*sj5*x2010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2016.valid){
continue;
}
CheckValue<IkReal> x2017=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2017.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2016.value)+(((1.5707963267949)*(x2017.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2018=IKsin(j2);
IkReal x2019=IKcos(j2);
IkReal x2020=((1.0)*cj3);
IkReal x2021=(cj5*r00);
IkReal x2022=(cj0*cj1);
IkReal x2023=(cj5*r10);
IkReal x2024=(r01*sj5);
IkReal x2025=((1.0)*sj4);
IkReal x2026=(cj5*sj3);
IkReal x2027=(cj1*sj0);
IkReal x2028=(sj3*sj5);
IkReal x2029=(cj5*r20);
IkReal x2030=((1.0)*cj4);
IkReal x2031=((1.93e-6)*sj1);
IkReal x2032=(r11*sj5);
IkReal x2033=(r21*sj5);
IkReal x2034=(cj1*x2019);
IkReal x2035=(cj3*cj4*sj5);
IkReal x2036=((0.4)*x2018);
IkReal x2037=(sj1*x2019);
IkReal x2038=((1.0)*sj1*x2018);
evalcond[0]=((((-1.0)*r22*x2030))+x2034+(((-1.0)*x2038))+(((-1.0)*x2025*x2033))+((sj4*x2029)));
evalcond[1]=(((x2018*x2022))+(((-1.0)*x2024*x2025))+((cj0*x2037))+(((-1.0)*r02*x2030))+((sj4*x2021)));
evalcond[2]=((((-1.0)*r12*x2030))+((x2018*x2027))+((sj0*x2037))+(((-1.0)*x2025*x2032))+((sj4*x2023)));
evalcond[3]=((((-1.93e-6)*cj1))+(((-1.0)*sj1*x2036))+(((-1.0)*pz))+(((9.9e-7)*x2029))+(((0.4)*x2034))+(((-0.4)*sj1))+(((-9.9e-7)*x2033)));
evalcond[4]=((((-1.0)*px))+(((9.9e-7)*x2021))+((x2022*x2036))+(((0.4)*x2022))+(((-1.0)*cj0*x2031))+(((0.4)*cj0*x2037))+(((-9.9e-7)*x2024)));
evalcond[5]=((((0.4)*sj0*x2037))+((x2027*x2036))+(((-1.0)*py))+(((9.9e-7)*x2023))+(((0.4)*x2027))+(((-1.0)*sj0*x2031))+(((-9.9e-7)*x2032)));
evalcond[6]=(((cj3*cj4*x2033))+(((-1.0)*cj1*x2018))+(((-1.0)*x2037))+(((-1.0)*cj4*x2020*x2029))+(((-1.0)*r22*sj4*x2020))+((r20*x2028))+((r21*x2026)));
evalcond[7]=(((cj3*cj4*x2024))+((r01*x2026))+((r00*x2028))+((x2019*x2022))+(((-1.0)*cj4*x2020*x2021))+(((-1.0)*r02*sj4*x2020))+(((-1.0)*cj0*x2038)));
evalcond[8]=(((r10*x2028))+((x2019*x2027))+((r11*x2026))+((cj3*cj4*x2032))+(((-1.0)*cj4*x2020*x2023))+(((-1.0)*sj0*x2038))+(((-1.0)*r12*sj4*x2020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2039=((1.0)*sj0);
CheckValue<IkReal> x2040=IKPowWithIntegerCheck(IKsign((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+(((-1.0)*cj4*r12)))),-1);
if(!x2040.valid){
continue;
}
CheckValue<IkReal> x2041 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x2039))+(((-1.0)*cj5*r21*x2039)))),IkReal(((((-1.0)*cj4*r21*sj5*x2039))+((cj4*cj5*r20*sj0))+((r22*sj0*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2041.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2040.value)))+(x2041.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2042=IKsin(j3);
IkReal x2043=IKcos(j3);
IkReal x2044=((1.0)*cj5);
IkReal x2045=(cj4*x2042);
IkReal x2046=((1.0)*sj5*x2043);
IkReal x2047=((1.0)*sj4*x2042);
evalcond[0]=((((-1.0)*r22*x2047))+(((-1.0)*r20*x2044*x2045))+(((-1.0)*r21*x2043*x2044))+(((-1.0)*r20*x2046))+((r21*sj5*x2045)));
evalcond[1]=((((-1.0)*r11*x2043*x2044))+cj0+(((-1.0)*r10*x2046))+(((-1.0)*r10*x2044*x2045))+((r11*sj5*x2045))+(((-1.0)*r12*x2047)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2047))+(((-1.0)*r00*x2044*x2045))+((r01*sj5*x2045))+(((-1.0)*r01*x2043*x2044))+(((-1.0)*r00*x2046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x2048=sj0*sj0;
j1eval[0]=x2048;
j1eval[1]=IKsign(x2048);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2049=cj0*cj0;
j1eval[0]=x2049;
j1eval[1]=IKsign(x2049);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=sj0;
j1eval[1]=IKsign(sj0);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2050=((4.82499999988767e-6)*sj4);
IkReal x2051=(r01*sj5);
IkReal x2052=((0.999999999976719)*cj4);
IkReal x2053=(cj5*r00);
IkReal x2054=(r21*sj5);
IkReal x2055=(cj5*r20);
IkReal x2056=((0.999999999976719)*sj4);
IkReal x2057=((4.82499999988767e-6)*cj4);
if( IKabs((((r22*x2052))+(((1.1941874999722e-11)*x2053))+((x2054*x2056))+(((2.47499999994238e-6)*x2055))+(((-2.47499999994238e-6)*x2054))+(((-1.20624999997192e-5)*px))+((r02*x2057))+(((-1.0)*x2050*x2053))+((x2050*x2051))+(((-2.4999999999418)*pz))+(((-1.0)*x2055*x2056))+(((-1.1941874999722e-11)*x2051)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2053*x2056))+((r22*x2057))+(((2.4999999999418)*px))+(((1.1941874999722e-11)*x2055))+(((2.47499999994238e-6)*x2051))+(((-2.47499999994238e-6)*x2053))+(((-1.0)*r02*x2052))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x2051*x2056))+(((-1.0)*x2050*x2055))+((x2050*x2054))+(((-1.1941874999722e-11)*x2054)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x2052))+(((1.1941874999722e-11)*x2053))+((x2054*x2056))+(((2.47499999994238e-6)*x2055))+(((-2.47499999994238e-6)*x2054))+(((-1.20624999997192e-5)*px))+((r02*x2057))+(((-1.0)*x2050*x2053))+((x2050*x2051))+(((-2.4999999999418)*pz))+(((-1.0)*x2055*x2056))+(((-1.1941874999722e-11)*x2051))))+IKsqr((((x2053*x2056))+((r22*x2057))+(((2.4999999999418)*px))+(((1.1941874999722e-11)*x2055))+(((2.47499999994238e-6)*x2051))+(((-2.47499999994238e-6)*x2053))+(((-1.0)*r02*x2052))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x2051*x2056))+(((-1.0)*x2050*x2055))+((x2050*x2054))+(((-1.1941874999722e-11)*x2054))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r22*x2052))+(((1.1941874999722e-11)*x2053))+((x2054*x2056))+(((2.47499999994238e-6)*x2055))+(((-2.47499999994238e-6)*x2054))+(((-1.20624999997192e-5)*px))+((r02*x2057))+(((-1.0)*x2050*x2053))+((x2050*x2051))+(((-2.4999999999418)*pz))+(((-1.0)*x2055*x2056))+(((-1.1941874999722e-11)*x2051))), (((x2053*x2056))+((r22*x2057))+(((2.4999999999418)*px))+(((1.1941874999722e-11)*x2055))+(((2.47499999994238e-6)*x2051))+(((-2.47499999994238e-6)*x2053))+(((-1.0)*r02*x2052))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x2051*x2056))+(((-1.0)*x2050*x2055))+((x2050*x2054))+(((-1.1941874999722e-11)*x2054))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2058=IKcos(j1);
IkReal x2059=IKsin(j1);
IkReal x2060=((0.4)*sj4);
IkReal x2061=(r21*sj5);
IkReal x2062=((0.4)*cj4);
IkReal x2063=(cj5*r20);
IkReal x2064=(r01*sj5);
IkReal x2065=(cj5*r00);
IkReal x2066=((9.9e-7)*x2064);
IkReal x2067=((1.93e-6)*x2059);
IkReal x2068=((0.4)*x2058);
IkReal x2069=((9.9e-7)*x2065);
IkReal x2070=((1.93e-6)*x2058);
IkReal x2071=((0.4)*x2059);
IkReal x2072=((9.9e-7)*x2061);
IkReal x2073=((9.9e-7)*x2063);
IkReal x2074=((0.4)*sj3*sj5);
IkReal x2075=((0.4)*cj5*sj3);
IkReal x2076=(x2068+x2069);
IkReal x2077=(x2066+x2067+px);
IkReal x2078=(x2072+x2071+x2070);
evalcond[0]=((((-1.0)*r02*x2062))+x2077+(((-1.0)*x2076))+((x2060*x2065))+(((-1.0)*x2060*x2064)));
evalcond[1]=(((r22*x2062))+x2073+(((-1.0)*x2078))+(((-1.0)*pz))+((x2060*x2061))+(((-1.0)*x2060*x2063)));
evalcond[2]=(x2077+(((-1.0)*x2076))+(((-1.0)*r21*x2075))+(((-1.0)*r20*x2074))+((cj3*x2062*x2063))+((cj3*r22*x2060))+(((-1.0)*cj3*x2061*x2062)));
evalcond[3]=(x2078+(((-1.0)*x2073))+(((-1.0)*cj3*r02*x2060))+pz+((r01*x2075))+((cj3*x2062*x2064))+(((-1.0)*cj3*x2062*x2065))+((r00*x2074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2079=(cj4*sj1);
IkReal x2080=(cj1*sj4);
IkReal x2081=((1.0)*cj5);
IkReal x2082=(r21*sj5);
IkReal x2083=(cj1*cj4);
IkReal x2084=(sj1*sj4);
IkReal x2085=(r01*sj4*sj5);
if( IKabs(((((-1.0)*x2082*x2084))+(((-1.0)*r22*x2079))+((r02*x2083))+((cj5*r20*x2084))+((r01*sj5*x2080))+(((-1.0)*r00*x2080*x2081)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x2079))+((r01*sj5*x2084))+(((-1.0)*r00*x2081*x2084))+(((-1.0)*r20*x2080*x2081))+((r22*x2083))+((x2080*x2082)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2082*x2084))+(((-1.0)*r22*x2079))+((r02*x2083))+((cj5*r20*x2084))+((r01*sj5*x2080))+(((-1.0)*r00*x2080*x2081))))+IKsqr((((r02*x2079))+((r01*sj5*x2084))+(((-1.0)*r00*x2081*x2084))+(((-1.0)*r20*x2080*x2081))+((r22*x2083))+((x2080*x2082))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2082*x2084))+(((-1.0)*r22*x2079))+((r02*x2083))+((cj5*r20*x2084))+((r01*sj5*x2080))+(((-1.0)*r00*x2080*x2081))), (((r02*x2079))+((r01*sj5*x2084))+(((-1.0)*r00*x2081*x2084))+(((-1.0)*r20*x2080*x2081))+((r22*x2083))+((x2080*x2082))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2086=IKcos(j2);
IkReal x2087=IKsin(j2);
IkReal x2088=((1.0)*cj3);
IkReal x2089=(cj5*r00);
IkReal x2090=((1.0)*cj4);
IkReal x2091=(r01*sj5);
IkReal x2092=((1.0)*sj4);
IkReal x2093=(cj5*sj3);
IkReal x2094=(cj5*r20);
IkReal x2095=(sj3*sj5);
IkReal x2096=(r21*sj5);
IkReal x2097=(cj1*x2086);
IkReal x2098=(cj3*cj4*sj5);
IkReal x2099=(cj1*x2087);
IkReal x2100=(sj1*x2087);
IkReal x2101=(sj1*x2086);
IkReal x2102=((1.0)*x2100);
evalcond[0]=((((-1.0)*x2091*x2092))+x2099+x2101+((sj4*x2089))+(((-1.0)*r02*x2090)));
evalcond[1]=(((sj4*x2094))+(((-1.0)*x2102))+x2097+(((-1.0)*x2092*x2096))+(((-1.0)*r22*x2090)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x2096))+(((9.9e-7)*x2094))+(((-0.4)*x2100))+(((0.4)*x2097))+(((-1.0)*pz))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*x2101))+(((9.9e-7)*x2089))+(((-9.9e-7)*x2091))+(((0.4)*cj1))+(((0.4)*x2099))+(((-1.0)*px))+(((-1.93e-6)*sj1)));
evalcond[4]=((((-1.0)*x2102))+x2097+(((-1.0)*cj4*x2088*x2089))+((r01*x2093))+((r00*x2095))+(((-1.0)*r02*sj4*x2088))+((cj3*cj4*x2091)));
evalcond[5]=(((r20*x2095))+(((-1.0)*r22*sj4*x2088))+(((-1.0)*cj4*x2088*x2094))+((r21*x2093))+((cj3*cj4*x2096))+(((-1.0)*x2101))+(((-1.0)*x2099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2103=((4.82499999988767e-6)*sj4);
IkReal x2104=(r01*sj5);
IkReal x2105=((0.999999999976719)*cj4);
IkReal x2106=(cj5*r00);
IkReal x2107=(r21*sj5);
IkReal x2108=(cj5*r20);
IkReal x2109=((0.999999999976719)*sj4);
IkReal x2110=((4.82499999988767e-6)*cj4);
if( IKabs(((((1.1941874999722e-11)*x2104))+(((-1.0)*x2103*x2104))+((x2103*x2106))+(((-2.47499999994238e-6)*x2107))+(((-1.1941874999722e-11)*x2106))+(((1.20624999997192e-5)*px))+((r22*x2105))+((x2107*x2109))+(((-1.0)*x2108*x2109))+(((-1.0)*r02*x2110))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x2108)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.1941874999722e-11)*x2108))+(((-1.0)*x2103*x2108))+((r02*x2105))+((x2104*x2109))+(((-1.0)*x2106*x2109))+((x2103*x2107))+(((-2.47499999994238e-6)*x2104))+(((-1.1941874999722e-11)*x2107))+(((-1.20624999997192e-5)*pz))+(((-2.4999999999418)*px))+(((2.47499999994238e-6)*x2106))+((r22*x2110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.1941874999722e-11)*x2104))+(((-1.0)*x2103*x2104))+((x2103*x2106))+(((-2.47499999994238e-6)*x2107))+(((-1.1941874999722e-11)*x2106))+(((1.20624999997192e-5)*px))+((r22*x2105))+((x2107*x2109))+(((-1.0)*x2108*x2109))+(((-1.0)*r02*x2110))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x2108))))+IKsqr(((((1.1941874999722e-11)*x2108))+(((-1.0)*x2103*x2108))+((r02*x2105))+((x2104*x2109))+(((-1.0)*x2106*x2109))+((x2103*x2107))+(((-2.47499999994238e-6)*x2104))+(((-1.1941874999722e-11)*x2107))+(((-1.20624999997192e-5)*pz))+(((-2.4999999999418)*px))+(((2.47499999994238e-6)*x2106))+((r22*x2110))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.1941874999722e-11)*x2104))+(((-1.0)*x2103*x2104))+((x2103*x2106))+(((-2.47499999994238e-6)*x2107))+(((-1.1941874999722e-11)*x2106))+(((1.20624999997192e-5)*px))+((r22*x2105))+((x2107*x2109))+(((-1.0)*x2108*x2109))+(((-1.0)*r02*x2110))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x2108))), ((((1.1941874999722e-11)*x2108))+(((-1.0)*x2103*x2108))+((r02*x2105))+((x2104*x2109))+(((-1.0)*x2106*x2109))+((x2103*x2107))+(((-2.47499999994238e-6)*x2104))+(((-1.1941874999722e-11)*x2107))+(((-1.20624999997192e-5)*pz))+(((-2.4999999999418)*px))+(((2.47499999994238e-6)*x2106))+((r22*x2110))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2111=IKcos(j1);
IkReal x2112=IKsin(j1);
IkReal x2113=((1.0)*pz);
IkReal x2114=((0.4)*sj4);
IkReal x2115=(r21*sj5);
IkReal x2116=((0.4)*cj4);
IkReal x2117=(cj5*r20);
IkReal x2118=(r01*sj5);
IkReal x2119=(cj5*r00);
IkReal x2120=((0.4)*x2111);
IkReal x2121=((9.9e-7)*x2118);
IkReal x2122=((9.9e-7)*x2119);
IkReal x2123=((1.93e-6)*x2112);
IkReal x2124=((9.9e-7)*x2117);
IkReal x2125=((1.93e-6)*x2111);
IkReal x2126=((0.4)*x2112);
IkReal x2127=((9.9e-7)*x2115);
IkReal x2128=((0.4)*sj3*sj5);
IkReal x2129=((0.4)*cj5*sj3);
IkReal x2130=(x2121+x2120);
IkReal x2131=(x2123+x2122);
IkReal x2132=(x2125+x2127+x2126+x2113);
evalcond[0]=((((-1.0)*x2114*x2119))+(((-1.0)*x2130))+x2131+(((-1.0)*px))+((r02*x2116))+((x2114*x2118)));
evalcond[1]=((((-1.0)*x2114*x2117))+(((-1.0)*x2132))+x2124+((x2114*x2115))+((r22*x2116)));
evalcond[2]=((((-1.0)*cj3*x2116*x2117))+(((-1.0)*x2131))+((r20*x2128))+x2130+((r21*x2129))+(((-1.0)*cj3*r22*x2114))+px+((cj3*x2115*x2116)));
evalcond[3]=((((-1.0)*cj3*x2116*x2119))+(((-1.0)*x2132))+x2124+((cj3*x2116*x2118))+((r01*x2129))+((r00*x2128))+(((-1.0)*cj3*r02*x2114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2133=((1.0)*r01);
IkReal x2134=(sj1*sj4);
IkReal x2135=(cj5*r00);
IkReal x2136=(cj1*cj4);
IkReal x2137=(cj5*r20);
IkReal x2138=(cj1*sj4);
IkReal x2139=(sj5*x2138);
IkReal x2140=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r02*x2136))+((x2135*x2138))+((x2134*x2137))+(((-1.0)*x2133*x2139))+(((-1.0)*r22*x2140))+(((-1.0)*r21*sj5*x2134)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x2139))+(((-1.0)*r02*x2140))+(((-1.0)*x2137*x2138))+((r22*x2136))+((x2134*x2135))+(((-1.0)*sj5*x2133*x2134)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x2136))+((x2135*x2138))+((x2134*x2137))+(((-1.0)*x2133*x2139))+(((-1.0)*r22*x2140))+(((-1.0)*r21*sj5*x2134))))+IKsqr((((r21*x2139))+(((-1.0)*r02*x2140))+(((-1.0)*x2137*x2138))+((r22*x2136))+((x2134*x2135))+(((-1.0)*sj5*x2133*x2134))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*x2136))+((x2135*x2138))+((x2134*x2137))+(((-1.0)*x2133*x2139))+(((-1.0)*r22*x2140))+(((-1.0)*r21*sj5*x2134))), (((r21*x2139))+(((-1.0)*r02*x2140))+(((-1.0)*x2137*x2138))+((r22*x2136))+((x2134*x2135))+(((-1.0)*sj5*x2133*x2134))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2141=IKcos(j2);
IkReal x2142=IKsin(j2);
IkReal x2143=((1.0)*cj3);
IkReal x2144=(cj5*r00);
IkReal x2145=((1.0)*cj4);
IkReal x2146=(r01*sj5);
IkReal x2147=((1.0)*sj4);
IkReal x2148=(cj5*sj3);
IkReal x2149=(cj5*r20);
IkReal x2150=((1.0)*sj1);
IkReal x2151=(sj3*sj5);
IkReal x2152=((0.4)*sj1);
IkReal x2153=(r21*sj5);
IkReal x2154=(cj1*x2141);
IkReal x2155=(cj3*cj4*sj5);
IkReal x2156=((0.4)*x2142);
IkReal x2157=(x2141*x2150);
IkReal x2158=((1.0)*cj1*x2142);
IkReal x2159=(x2157+x2158);
evalcond[0]=((((-1.0)*x2142*x2150))+x2154+((sj4*x2149))+(((-1.0)*r22*x2145))+(((-1.0)*x2147*x2153)));
evalcond[1]=((((-1.0)*r02*x2145))+(((-1.0)*x2159))+((sj4*x2144))+(((-1.0)*x2146*x2147)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x2142*x2152))+(((-1.0)*pz))+(((-1.0)*x2152))+(((0.4)*x2154))+(((9.9e-7)*x2149))+(((-9.9e-7)*x2153)));
evalcond[3]=((((-1.0)*x2141*x2152))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-1.0)*cj1*x2156))+(((-9.9e-7)*x2146))+(((9.9e-7)*x2144))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*cj4*x2143*x2144))+(((-1.0)*r02*sj4*x2143))+((sj1*x2142))+((r00*x2151))+((cj3*cj4*x2146))+((r01*x2148))+(((-1.0)*x2154)));
evalcond[5]=((((-1.0)*cj4*x2143*x2149))+((r20*x2151))+(((-1.0)*r22*sj4*x2143))+(((-1.0)*x2159))+((cj3*cj4*x2153))+((r21*x2148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2160=((4.82499999988767e-6)*sj4);
IkReal x2161=(cj5*r20);
IkReal x2162=(r11*sj5);
IkReal x2163=(r21*sj5);
IkReal x2164=(cj5*r10);
IkReal x2165=((0.999999999976719)*sj4);
IkReal x2166=((4.82499999988767e-6)*cj4);
IkReal x2167=((0.999999999976719)*cj4);
if( IKabs((((r12*x2166))+(((-1.0)*x2160*x2164))+(((1.1941874999722e-11)*x2164))+(((-1.0)*x2161*x2165))+(((-1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x2161))+(((-2.47499999994238e-6)*x2163))+((x2160*x2162))+((r22*x2167))+(((-2.4999999999418)*pz))+((x2163*x2165))+(((-1.1941874999722e-11)*x2162)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2160*x2161))+(((2.4999999999418)*py))+((x2164*x2165))+(((1.1941874999722e-11)*x2161))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x2162))+(((-2.47499999994238e-6)*x2164))+(((-1.0)*r12*x2167))+((x2160*x2163))+((r22*x2166))+(((-1.0)*x2162*x2165))+(((-1.1941874999722e-11)*x2163)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x2166))+(((-1.0)*x2160*x2164))+(((1.1941874999722e-11)*x2164))+(((-1.0)*x2161*x2165))+(((-1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x2161))+(((-2.47499999994238e-6)*x2163))+((x2160*x2162))+((r22*x2167))+(((-2.4999999999418)*pz))+((x2163*x2165))+(((-1.1941874999722e-11)*x2162))))+IKsqr(((((-1.0)*x2160*x2161))+(((2.4999999999418)*py))+((x2164*x2165))+(((1.1941874999722e-11)*x2161))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x2162))+(((-2.47499999994238e-6)*x2164))+(((-1.0)*r12*x2167))+((x2160*x2163))+((r22*x2166))+(((-1.0)*x2162*x2165))+(((-1.1941874999722e-11)*x2163))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r12*x2166))+(((-1.0)*x2160*x2164))+(((1.1941874999722e-11)*x2164))+(((-1.0)*x2161*x2165))+(((-1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x2161))+(((-2.47499999994238e-6)*x2163))+((x2160*x2162))+((r22*x2167))+(((-2.4999999999418)*pz))+((x2163*x2165))+(((-1.1941874999722e-11)*x2162))), ((((-1.0)*x2160*x2161))+(((2.4999999999418)*py))+((x2164*x2165))+(((1.1941874999722e-11)*x2161))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x2162))+(((-2.47499999994238e-6)*x2164))+(((-1.0)*r12*x2167))+((x2160*x2163))+((r22*x2166))+(((-1.0)*x2162*x2165))+(((-1.1941874999722e-11)*x2163))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2168=IKcos(j1);
IkReal x2169=IKsin(j1);
IkReal x2170=((0.4)*sj4);
IkReal x2171=(r21*sj5);
IkReal x2172=(cj5*r10);
IkReal x2173=((0.4)*cj4);
IkReal x2174=(cj5*r20);
IkReal x2175=((0.4)*sj3);
IkReal x2176=(r11*sj5);
IkReal x2177=((1.93e-6)*x2169);
IkReal x2178=((9.9e-7)*x2176);
IkReal x2179=((0.4)*x2168);
IkReal x2180=((9.9e-7)*x2172);
IkReal x2181=((1.93e-6)*x2168);
IkReal x2182=((0.4)*x2169);
IkReal x2183=((9.9e-7)*x2171);
IkReal x2184=((9.9e-7)*x2174);
IkReal x2185=(x2179+x2180);
IkReal x2186=(x2177+x2178+py);
IkReal x2187=(x2183+x2182+x2181);
evalcond[0]=((((-1.0)*x2170*x2176))+((x2170*x2172))+x2186+(((-1.0)*x2185))+(((-1.0)*r12*x2173)));
evalcond[1]=((((-1.0)*x2170*x2174))+((r22*x2173))+((x2170*x2171))+x2184+(((-1.0)*pz))+(((-1.0)*x2187)));
evalcond[2]=((((-1.0)*r20*sj5*x2175))+((cj3*x2173*x2174))+(((-1.0)*cj5*r21*x2175))+x2186+((cj3*r22*x2170))+(((-1.0)*x2185))+(((-1.0)*cj3*x2171*x2173)));
evalcond[3]=((((-1.0)*cj3*r12*x2170))+((cj3*x2173*x2176))+(((-1.0)*cj3*x2172*x2173))+x2187+((cj5*r11*x2175))+((r10*sj5*x2175))+pz+(((-1.0)*x2184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2188=(cj4*r12);
IkReal x2189=(cj4*r22);
IkReal x2190=(cj1*sj4);
IkReal x2191=(r11*sj5);
IkReal x2192=(r21*sj5);
IkReal x2193=((1.0)*sj1);
IkReal x2194=(sj1*sj4);
IkReal x2195=(cj5*r20);
IkReal x2196=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*x2189*x2193))+((x2194*x2195))+((cj1*x2188))+((x2190*x2191))+(((-1.0)*sj4*x2192*x2193))+(((-1.0)*x2190*x2196)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2191*x2194))+(((-1.0)*x2190*x2195))+((cj1*x2189))+((sj1*x2188))+((x2190*x2192))+(((-1.0)*cj5*r10*sj4*x2193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2189*x2193))+((x2194*x2195))+((cj1*x2188))+((x2190*x2191))+(((-1.0)*sj4*x2192*x2193))+(((-1.0)*x2190*x2196))))+IKsqr((((x2191*x2194))+(((-1.0)*x2190*x2195))+((cj1*x2189))+((sj1*x2188))+((x2190*x2192))+(((-1.0)*cj5*r10*sj4*x2193))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2189*x2193))+((x2194*x2195))+((cj1*x2188))+((x2190*x2191))+(((-1.0)*sj4*x2192*x2193))+(((-1.0)*x2190*x2196))), (((x2191*x2194))+(((-1.0)*x2190*x2195))+((cj1*x2189))+((sj1*x2188))+((x2190*x2192))+(((-1.0)*cj5*r10*sj4*x2193))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2197=IKcos(j2);
IkReal x2198=IKsin(j2);
IkReal x2199=(cj3*cj4);
IkReal x2200=(r21*sj5);
IkReal x2201=((1.0)*r22);
IkReal x2202=(cj5*r10);
IkReal x2203=(cj5*r20);
IkReal x2204=(cj5*sj3);
IkReal x2205=(cj3*sj4);
IkReal x2206=(r11*sj5);
IkReal x2207=((1.0)*sj4);
IkReal x2208=((1.0)*r12);
IkReal x2209=(sj3*sj5);
IkReal x2210=(cj1*x2197);
IkReal x2211=(cj1*x2198);
IkReal x2212=(sj1*x2198);
IkReal x2213=(sj1*x2197);
IkReal x2214=((1.0)*x2212);
evalcond[0]=(x2213+x2211+(((-1.0)*cj4*x2208))+((sj4*x2202))+(((-1.0)*x2206*x2207)));
evalcond[1]=(x2210+(((-1.0)*cj4*x2201))+(((-1.0)*x2214))+((sj4*x2203))+(((-1.0)*x2200*x2207)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-0.4)*x2212))+(((9.9e-7)*x2203))+(((-1.0)*pz))+(((-9.9e-7)*x2200))+(((-0.4)*sj1))+(((0.4)*x2210)));
evalcond[3]=((((0.4)*cj1))+(((9.9e-7)*x2202))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x2206))+(((0.4)*x2211))+(((0.4)*x2213)));
evalcond[4]=(x2210+(((-1.0)*x2214))+(((-1.0)*x2205*x2208))+(((-1.0)*x2199*x2202))+((r11*x2204))+((r10*x2209))+((x2199*x2206)));
evalcond[5]=((((-1.0)*x2211))+(((-1.0)*x2213))+((r20*x2209))+(((-1.0)*x2199*x2203))+((x2199*x2200))+((r21*x2204))+(((-1.0)*x2201*x2205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2215=((4.82499999988767e-6)*sj4);
IkReal x2216=(cj5*r20);
IkReal x2217=(r11*sj5);
IkReal x2218=(r21*sj5);
IkReal x2219=(cj5*r10);
IkReal x2220=((0.999999999976719)*sj4);
IkReal x2221=((4.82499999988767e-6)*cj4);
IkReal x2222=((0.999999999976719)*cj4);
if( IKabs((((r22*x2222))+(((-1.1941874999722e-11)*x2219))+(((-1.0)*x2215*x2217))+(((1.1941874999722e-11)*x2217))+(((1.20624999997192e-5)*py))+((x2218*x2220))+(((-1.0)*r12*x2221))+(((-2.47499999994238e-6)*x2218))+(((2.47499999994238e-6)*x2216))+((x2215*x2219))+(((-1.0)*x2216*x2220))+(((-2.4999999999418)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2219*x2220))+((r12*x2222))+((r22*x2221))+(((-1.1941874999722e-11)*x2218))+(((-1.0)*x2215*x2216))+(((1.1941874999722e-11)*x2216))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x2217))+(((2.47499999994238e-6)*x2219))+((x2217*x2220))+((x2215*x2218))+(((-2.4999999999418)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x2222))+(((-1.1941874999722e-11)*x2219))+(((-1.0)*x2215*x2217))+(((1.1941874999722e-11)*x2217))+(((1.20624999997192e-5)*py))+((x2218*x2220))+(((-1.0)*r12*x2221))+(((-2.47499999994238e-6)*x2218))+(((2.47499999994238e-6)*x2216))+((x2215*x2219))+(((-1.0)*x2216*x2220))+(((-2.4999999999418)*pz))))+IKsqr(((((-1.0)*x2219*x2220))+((r12*x2222))+((r22*x2221))+(((-1.1941874999722e-11)*x2218))+(((-1.0)*x2215*x2216))+(((1.1941874999722e-11)*x2216))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x2217))+(((2.47499999994238e-6)*x2219))+((x2217*x2220))+((x2215*x2218))+(((-2.4999999999418)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r22*x2222))+(((-1.1941874999722e-11)*x2219))+(((-1.0)*x2215*x2217))+(((1.1941874999722e-11)*x2217))+(((1.20624999997192e-5)*py))+((x2218*x2220))+(((-1.0)*r12*x2221))+(((-2.47499999994238e-6)*x2218))+(((2.47499999994238e-6)*x2216))+((x2215*x2219))+(((-1.0)*x2216*x2220))+(((-2.4999999999418)*pz))), ((((-1.0)*x2219*x2220))+((r12*x2222))+((r22*x2221))+(((-1.1941874999722e-11)*x2218))+(((-1.0)*x2215*x2216))+(((1.1941874999722e-11)*x2216))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x2217))+(((2.47499999994238e-6)*x2219))+((x2217*x2220))+((x2215*x2218))+(((-2.4999999999418)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2223=IKcos(j1);
IkReal x2224=IKsin(j1);
IkReal x2225=((1.0)*pz);
IkReal x2226=((0.4)*sj4);
IkReal x2227=(r21*sj5);
IkReal x2228=(cj5*r10);
IkReal x2229=((0.4)*cj4);
IkReal x2230=(cj5*r20);
IkReal x2231=((0.4)*sj3);
IkReal x2232=(r11*sj5);
IkReal x2233=((0.4)*x2223);
IkReal x2234=((9.9e-7)*x2232);
IkReal x2235=((9.9e-7)*x2228);
IkReal x2236=((1.93e-6)*x2224);
IkReal x2237=((9.9e-7)*x2230);
IkReal x2238=((1.93e-6)*x2223);
IkReal x2239=((0.4)*x2224);
IkReal x2240=((9.9e-7)*x2227);
IkReal x2241=(x2235+x2236);
IkReal x2242=(x2233+x2234);
IkReal x2243=(x2225+x2239+x2238+x2240);
evalcond[0]=(((r12*x2229))+(((-1.0)*x2226*x2228))+x2241+((x2226*x2232))+(((-1.0)*py))+(((-1.0)*x2242)));
evalcond[1]=(((x2226*x2227))+((r22*x2229))+x2237+(((-1.0)*x2226*x2230))+(((-1.0)*x2243)));
evalcond[2]=(x2242+((r20*sj5*x2231))+((cj5*r21*x2231))+((cj3*x2227*x2229))+(((-1.0)*x2241))+py+(((-1.0)*cj3*r22*x2226))+(((-1.0)*cj3*x2229*x2230)));
evalcond[3]=(x2237+((cj3*x2229*x2232))+((cj5*r11*x2231))+((r10*sj5*x2231))+(((-1.0)*x2243))+(((-1.0)*cj3*x2228*x2229))+(((-1.0)*cj3*r12*x2226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2244=((1.0)*cj1);
IkReal x2245=(sj4*sj5);
IkReal x2246=(cj5*sj4);
IkReal x2247=((1.0)*sj1);
IkReal x2248=(sj1*x2246);
IkReal x2249=(cj4*x2247);
if( IKabs(((((-1.0)*r22*x2249))+(((-1.0)*cj4*r12*x2244))+(((-1.0)*r11*x2244*x2245))+((cj1*r10*x2246))+((r20*x2248))+(((-1.0)*r21*x2245*x2247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((r10*x2248))+(((-1.0)*r20*x2244*x2246))+(((-1.0)*r11*x2245*x2247))+(((-1.0)*r12*x2249))+((cj1*r21*x2245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x2249))+(((-1.0)*cj4*r12*x2244))+(((-1.0)*r11*x2244*x2245))+((cj1*r10*x2246))+((r20*x2248))+(((-1.0)*r21*x2245*x2247))))+IKsqr((((cj1*cj4*r22))+((r10*x2248))+(((-1.0)*r20*x2244*x2246))+(((-1.0)*r11*x2245*x2247))+(((-1.0)*r12*x2249))+((cj1*r21*x2245))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x2249))+(((-1.0)*cj4*r12*x2244))+(((-1.0)*r11*x2244*x2245))+((cj1*r10*x2246))+((r20*x2248))+(((-1.0)*r21*x2245*x2247))), (((cj1*cj4*r22))+((r10*x2248))+(((-1.0)*r20*x2244*x2246))+(((-1.0)*r11*x2245*x2247))+(((-1.0)*r12*x2249))+((cj1*r21*x2245))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2250=IKcos(j2);
IkReal x2251=IKsin(j2);
IkReal x2252=(cj3*cj4);
IkReal x2253=(r21*sj5);
IkReal x2254=((1.0)*r22);
IkReal x2255=(cj5*r10);
IkReal x2256=(cj5*r20);
IkReal x2257=(cj5*sj3);
IkReal x2258=((1.0)*sj1);
IkReal x2259=(cj3*sj4);
IkReal x2260=(sj3*sj5);
IkReal x2261=(r11*sj5);
IkReal x2262=((1.0)*sj4);
IkReal x2263=((1.0)*r12);
IkReal x2264=((0.4)*sj1);
IkReal x2265=(cj1*x2250);
IkReal x2266=((0.4)*x2251);
IkReal x2267=(x2250*x2258);
IkReal x2268=((1.0)*cj1*x2251);
IkReal x2269=(x2268+x2267);
evalcond[0]=((((-1.0)*cj4*x2254))+x2265+(((-1.0)*x2253*x2262))+((sj4*x2256))+(((-1.0)*x2251*x2258)));
evalcond[1]=((((-1.0)*cj4*x2263))+(((-1.0)*x2261*x2262))+((sj4*x2255))+(((-1.0)*x2269)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x2265))+(((9.9e-7)*x2256))+(((-1.0)*x2251*x2264))+(((-1.0)*pz))+(((-9.9e-7)*x2253))+(((-1.0)*x2264)));
evalcond[3]=((((-1.0)*cj1*x2266))+(((9.9e-7)*x2255))+(((-9.9e-7)*x2261))+(((1.93e-6)*sj1))+(((-1.0)*py))+(((-1.0)*x2250*x2264))+(((-0.4)*cj1)));
evalcond[4]=(((x2252*x2261))+(((-1.0)*x2259*x2263))+((r10*x2260))+((sj1*x2251))+(((-1.0)*x2252*x2255))+(((-1.0)*x2265))+((r11*x2257)));
evalcond[5]=(((x2252*x2253))+(((-1.0)*x2252*x2256))+((r20*x2260))+(((-1.0)*x2269))+((r21*x2257))+(((-1.0)*x2254*x2259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2270=(cj5*r10);
IkReal x2271=((0.4)*sj4);
IkReal x2272=(r21*sj5);
IkReal x2273=(cj5*r21);
IkReal x2274=(r11*sj5);
IkReal x2275=(r20*sj5);
IkReal x2276=(cj5*r20);
IkReal x2277=((7720000000.0)*sj0);
IkReal x2278=(cj3*cj4);
IkReal x2279=((1.6e+15)*sj0);
IkReal x2280=(cj3*r22*sj4);
IkReal x2281=((-1.6e+15)*sj0*sj3);
IkReal x2282=((((-9.9e-7)*x2272))+(((-1.0)*pz))+(((9.9e-7)*x2276))+(((0.4)*cj4*r22))+(((-1.0)*x2271*x2276))+((x2271*x2272)));
IkReal x2283=(sj0*x2282);
CheckValue<IkReal> x2284=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2284.valid){
continue;
}
CheckValue<IkReal> x2285 = IKatan2WithCheck(IkReal(((((19107.0)*x2270))+(((-1.0)*x2277*x2280))+((x2272*x2277*x2278))+((sj3*x2275*x2277))+((sj3*x2273*x2277))+(((-19300000000.0)*py))+(((-1.0)*x2276*x2277*x2278))+(((4.0e+15)*x2283))+(((-19107.0)*x2274)))),IkReal(((((-3960000000.0)*x2270))+(((-1.6e+15)*sj0*x2272*x2278))+((x2275*x2281))+(((3960000000.0)*x2274))+((x2279*x2280))+((x2273*x2281))+(((19300000000.0)*x2283))+(((4.0e+15)*py))+((x2276*x2278*x2279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2285.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2284.value)))+(x2285.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2286=IKsin(j1);
IkReal x2287=sj0*sj0;
IkReal x2288=IKcos(j1);
IkReal x2289=cj0*cj0;
IkReal x2290=((0.4)*cj5);
IkReal x2291=(r21*sj0);
IkReal x2292=((0.4)*sj4);
IkReal x2293=(r21*sj5);
IkReal x2294=(cj3*r22);
IkReal x2295=(r11*sj5);
IkReal x2296=((9.9e-7)*cj0);
IkReal x2297=((0.4)*cj4);
IkReal x2298=(cj3*cj4);
IkReal x2299=(cj5*r00);
IkReal x2300=(r01*sj5);
IkReal x2301=(r20*sj0);
IkReal x2302=(r00*sj4);
IkReal x2303=((9.9e-7)*cj5);
IkReal x2304=(cj0*sj0);
IkReal x2305=((9.9e-7)*sj0);
IkReal x2306=(r10*sj4);
IkReal x2307=((0.4)*x2288);
IkReal x2308=(r20*x2298);
IkReal x2309=((1.93e-6)*x2286);
IkReal x2310=(r10*x2303);
IkReal x2311=((1.93e-6)*x2288);
IkReal x2312=((0.4)*sj3*sj5);
IkReal x2313=((0.4)*x2286);
IkReal x2314=(x2304*x2309);
IkReal x2315=(x2304*x2307);
evalcond[0]=(((r20*x2303))+((r22*x2297))+(((-9.9e-7)*x2293))+(((-1.0)*pz))+((x2292*x2293))+(((-1.0)*r20*sj4*x2290))+(((-1.0)*x2313))+(((-1.0)*x2311)));
evalcond[1]=((((-1.0)*sj0*x2310))+((sj0*x2290*x2306))+((x2287*x2309))+(((-1.0)*x2287*x2307))+((x2295*x2305))+(((-1.0)*r12*sj0*x2297))+((py*sj0))+(((-1.0)*sj0*x2292*x2295)));
evalcond[2]=((((-1.0)*cj0*r02*x2297))+((cj0*x2290*x2302))+(((-1.0)*x2289*x2307))+((x2296*x2300))+(((-1.0)*x2296*x2299))+(((-1.0)*cj0*x2292*x2300))+((cj0*px))+((x2289*x2309)));
evalcond[3]=((((-1.0)*x2301*x2303))+((r10*x2312))+((cj3*x2295*x2297))+(((-1.0)*r10*x2290*x2298))+((sj0*x2313))+((sj0*x2311))+((r11*sj3*x2290))+(((9.9e-7)*sj5*x2291))+(((-1.0)*cj3*r12*x2292))+((pz*sj0)));
evalcond[4]=((((-1.0)*r00*x2290*x2298))+((r01*sj3*x2290))+((cj3*x2297*x2300))+(((-1.0)*cj3*r02*x2292))+((r00*x2312))+((x2293*x2296))+((cj0*pz))+(((-1.0)*cj5*r20*x2296))+((cj0*x2313))+((cj0*x2311)));
evalcond[5]=(((sj0*x2309))+(((-1.0)*cj3*sj5*x2291*x2297))+((x2290*x2298*x2301))+((sj0*x2292*x2294))+py+(((-1.0)*sj0*x2307))+(((-1.0)*x2310))+(((-1.0)*x2301*x2312))+(((9.9e-7)*x2295))+(((-1.0)*sj3*x2290*x2291)));
evalcond[6]=(((cj0*x2309))+(((-1.0)*cj0*r20*x2312))+((cj0*x2290*x2308))+(((-1.0)*cj0*cj3*x2293*x2297))+(((-9.9e-7)*x2299))+(((-1.0)*cj0*x2307))+px+((cj0*x2292*x2294))+(((-1.0)*cj0*r21*sj3*x2290))+(((9.9e-7)*x2300)));
evalcond[7]=(((x2300*x2305))+x2314+((cj0*x2290*x2306))+(((-1.0)*cj0*x2292*x2295))+(((-1.0)*x2299*x2305))+((px*sj0))+(((-1.0)*cj0*r12*x2297))+(((-1.0)*x2315)));
evalcond[8]=(((sj0*x2290*x2302))+(((-1.0)*cj5*r10*x2296))+x2314+((x2295*x2296))+(((-1.0)*sj0*x2292*x2300))+(((-1.0)*r02*sj0*x2297))+((cj0*py))+(((-1.0)*x2315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2316=(cj4*sj1);
IkReal x2317=(cj1*sj4);
IkReal x2318=((1.0)*cj5);
IkReal x2319=(r21*sj5);
IkReal x2320=(cj1*cj4);
IkReal x2321=(sj1*sj4);
IkReal x2322=(r01*sj4*sj5);
if( IKabs((((r02*x2320))+(((-1.0)*r00*x2317*x2318))+(((-1.0)*x2319*x2321))+((cj5*r20*x2321))+(((-1.0)*r22*x2316))+((r01*sj5*x2317)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2317*x2319))+((r22*x2320))+(((-1.0)*r00*x2318*x2321))+(((-1.0)*r20*x2317*x2318))+((r02*x2316))+((r01*sj5*x2321)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x2320))+(((-1.0)*r00*x2317*x2318))+(((-1.0)*x2319*x2321))+((cj5*r20*x2321))+(((-1.0)*r22*x2316))+((r01*sj5*x2317))))+IKsqr((((x2317*x2319))+((r22*x2320))+(((-1.0)*r00*x2318*x2321))+(((-1.0)*r20*x2317*x2318))+((r02*x2316))+((r01*sj5*x2321))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x2320))+(((-1.0)*r00*x2317*x2318))+(((-1.0)*x2319*x2321))+((cj5*r20*x2321))+(((-1.0)*r22*x2316))+((r01*sj5*x2317))), (((x2317*x2319))+((r22*x2320))+(((-1.0)*r00*x2318*x2321))+(((-1.0)*r20*x2317*x2318))+((r02*x2316))+((r01*sj5*x2321))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2323=IKcos(j2);
IkReal x2324=IKsin(j2);
IkReal x2325=((1.0)*cj3);
IkReal x2326=(cj5*r00);
IkReal x2327=((1.0)*cj4);
IkReal x2328=(r01*sj5);
IkReal x2329=((1.0)*sj4);
IkReal x2330=(cj5*sj3);
IkReal x2331=(cj5*r20);
IkReal x2332=(sj3*sj5);
IkReal x2333=(r21*sj5);
IkReal x2334=(cj1*x2323);
IkReal x2335=(cj3*cj4*sj5);
IkReal x2336=(cj1*x2324);
IkReal x2337=(sj1*x2324);
IkReal x2338=(sj1*x2323);
IkReal x2339=((1.0)*x2337);
evalcond[0]=((((-1.0)*x2328*x2329))+x2336+x2338+((sj4*x2326))+(((-1.0)*r02*x2327)));
evalcond[1]=((((-1.0)*x2339))+(((-1.0)*r22*x2327))+x2334+((sj4*x2331))+(((-1.0)*x2329*x2333)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-0.4)*x2337))+(((0.4)*x2334))+(((9.9e-7)*x2331))+(((-1.0)*pz))+(((-9.9e-7)*x2333))+(((-0.4)*sj1)));
evalcond[3]=((((9.9e-7)*x2326))+(((0.4)*x2336))+(((0.4)*x2338))+(((0.4)*cj1))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x2328)));
evalcond[4]=((((-1.0)*x2339))+x2334+((r01*x2330))+((r00*x2332))+(((-1.0)*cj4*x2325*x2326))+(((-1.0)*r02*sj4*x2325))+((cj3*cj4*x2328)));
evalcond[5]=(((r21*x2330))+(((-1.0)*r22*sj4*x2325))+(((-1.0)*cj4*x2325*x2331))+((cj3*cj4*x2333))+((r20*x2332))+(((-1.0)*x2338))+(((-1.0)*x2336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2340=((1.0)*r01);
IkReal x2341=(sj1*sj4);
IkReal x2342=(cj5*r00);
IkReal x2343=(cj1*cj4);
IkReal x2344=(cj5*r20);
IkReal x2345=(cj1*sj4);
IkReal x2346=(sj5*x2345);
IkReal x2347=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r02*x2343))+(((-1.0)*x2340*x2346))+((x2341*x2344))+(((-1.0)*r21*sj5*x2341))+(((-1.0)*r22*x2347))+((x2342*x2345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2344*x2345))+((x2341*x2342))+((r22*x2343))+(((-1.0)*sj5*x2340*x2341))+(((-1.0)*r02*x2347))+((r21*x2346)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x2343))+(((-1.0)*x2340*x2346))+((x2341*x2344))+(((-1.0)*r21*sj5*x2341))+(((-1.0)*r22*x2347))+((x2342*x2345))))+IKsqr(((((-1.0)*x2344*x2345))+((x2341*x2342))+((r22*x2343))+(((-1.0)*sj5*x2340*x2341))+(((-1.0)*r02*x2347))+((r21*x2346))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*x2343))+(((-1.0)*x2340*x2346))+((x2341*x2344))+(((-1.0)*r21*sj5*x2341))+(((-1.0)*r22*x2347))+((x2342*x2345))), ((((-1.0)*x2344*x2345))+((x2341*x2342))+((r22*x2343))+(((-1.0)*sj5*x2340*x2341))+(((-1.0)*r02*x2347))+((r21*x2346))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2348=IKcos(j2);
IkReal x2349=IKsin(j2);
IkReal x2350=((1.0)*cj3);
IkReal x2351=(cj5*r00);
IkReal x2352=((1.0)*cj4);
IkReal x2353=(r01*sj5);
IkReal x2354=((1.0)*sj4);
IkReal x2355=(cj5*sj3);
IkReal x2356=(cj5*r20);
IkReal x2357=((1.0)*sj1);
IkReal x2358=(sj3*sj5);
IkReal x2359=((0.4)*sj1);
IkReal x2360=(r21*sj5);
IkReal x2361=(cj1*x2348);
IkReal x2362=(cj3*cj4*sj5);
IkReal x2363=((0.4)*x2349);
IkReal x2364=(x2348*x2357);
IkReal x2365=((1.0)*cj1*x2349);
IkReal x2366=(x2365+x2364);
evalcond[0]=(x2361+(((-1.0)*x2354*x2360))+((sj4*x2356))+(((-1.0)*r22*x2352))+(((-1.0)*x2349*x2357)));
evalcond[1]=((((-1.0)*x2366))+((sj4*x2351))+(((-1.0)*x2353*x2354))+(((-1.0)*r02*x2352)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*pz))+(((0.4)*x2361))+(((-9.9e-7)*x2360))+(((9.9e-7)*x2356))+(((-1.0)*x2359))+(((-1.0)*x2349*x2359)));
evalcond[3]=((((-1.0)*x2348*x2359))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-9.9e-7)*x2353))+(((9.9e-7)*x2351))+(((-1.0)*cj1*x2363))+(((-0.4)*cj1)));
evalcond[4]=(((sj1*x2349))+((r00*x2358))+((r01*x2355))+(((-1.0)*r02*sj4*x2350))+(((-1.0)*x2361))+((cj3*cj4*x2353))+(((-1.0)*cj4*x2350*x2351)));
evalcond[5]=((((-1.0)*r22*sj4*x2350))+(((-1.0)*x2366))+((cj3*cj4*x2360))+((r20*x2358))+(((-1.0)*cj4*x2350*x2356))+((r21*x2355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2367=(cj4*r12);
IkReal x2368=(cj4*r22);
IkReal x2369=(cj1*sj4);
IkReal x2370=(r11*sj5);
IkReal x2371=(r21*sj5);
IkReal x2372=((1.0)*sj1);
IkReal x2373=(sj1*sj4);
IkReal x2374=(cj5*r20);
IkReal x2375=((1.0)*cj5*r10);
if( IKabs((((x2373*x2374))+(((-1.0)*sj4*x2371*x2372))+(((-1.0)*x2368*x2372))+(((-1.0)*x2369*x2375))+((cj1*x2367))+((x2369*x2370)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2370*x2373))+((sj1*x2367))+(((-1.0)*cj5*r10*sj4*x2372))+((cj1*x2368))+(((-1.0)*x2369*x2374))+((x2369*x2371)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2373*x2374))+(((-1.0)*sj4*x2371*x2372))+(((-1.0)*x2368*x2372))+(((-1.0)*x2369*x2375))+((cj1*x2367))+((x2369*x2370))))+IKsqr((((x2370*x2373))+((sj1*x2367))+(((-1.0)*cj5*r10*sj4*x2372))+((cj1*x2368))+(((-1.0)*x2369*x2374))+((x2369*x2371))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2373*x2374))+(((-1.0)*sj4*x2371*x2372))+(((-1.0)*x2368*x2372))+(((-1.0)*x2369*x2375))+((cj1*x2367))+((x2369*x2370))), (((x2370*x2373))+((sj1*x2367))+(((-1.0)*cj5*r10*sj4*x2372))+((cj1*x2368))+(((-1.0)*x2369*x2374))+((x2369*x2371))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2376=IKcos(j2);
IkReal x2377=IKsin(j2);
IkReal x2378=(cj3*cj4);
IkReal x2379=(r21*sj5);
IkReal x2380=((1.0)*r22);
IkReal x2381=(cj5*r10);
IkReal x2382=(cj5*r20);
IkReal x2383=(cj5*sj3);
IkReal x2384=(cj3*sj4);
IkReal x2385=(r11*sj5);
IkReal x2386=((1.0)*sj4);
IkReal x2387=((1.0)*r12);
IkReal x2388=(sj3*sj5);
IkReal x2389=(cj1*x2376);
IkReal x2390=(cj1*x2377);
IkReal x2391=(sj1*x2377);
IkReal x2392=(sj1*x2376);
IkReal x2393=((1.0)*x2391);
evalcond[0]=(((sj4*x2381))+x2392+x2390+(((-1.0)*cj4*x2387))+(((-1.0)*x2385*x2386)));
evalcond[1]=(((sj4*x2382))+x2389+(((-1.0)*cj4*x2380))+(((-1.0)*x2379*x2386))+(((-1.0)*x2393)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-0.4)*x2391))+(((0.4)*x2389))+(((-1.0)*pz))+(((9.9e-7)*x2382))+(((-9.9e-7)*x2379))+(((-0.4)*sj1)));
evalcond[3]=((((-9.9e-7)*x2385))+(((0.4)*cj1))+(((0.4)*x2390))+(((0.4)*x2392))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((9.9e-7)*x2381)));
evalcond[4]=(x2389+(((-1.0)*x2393))+((r10*x2388))+(((-1.0)*x2384*x2387))+((r11*x2383))+(((-1.0)*x2378*x2381))+((x2378*x2385)));
evalcond[5]=((((-1.0)*x2380*x2384))+((x2378*x2379))+((r20*x2388))+(((-1.0)*x2392))+(((-1.0)*x2390))+((r21*x2383))+(((-1.0)*x2378*x2382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2394=((1.0)*cj1);
IkReal x2395=(sj4*sj5);
IkReal x2396=(cj5*sj4);
IkReal x2397=((1.0)*sj1);
IkReal x2398=(sj1*x2396);
IkReal x2399=(cj4*x2397);
if( IKabs(((((-1.0)*r21*x2395*x2397))+(((-1.0)*cj4*r12*x2394))+(((-1.0)*r11*x2394*x2395))+((r20*x2398))+((cj1*r10*x2396))+(((-1.0)*r22*x2399)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((cj1*r21*x2395))+(((-1.0)*r11*x2395*x2397))+((r10*x2398))+(((-1.0)*r20*x2394*x2396))+(((-1.0)*r12*x2399)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x2395*x2397))+(((-1.0)*cj4*r12*x2394))+(((-1.0)*r11*x2394*x2395))+((r20*x2398))+((cj1*r10*x2396))+(((-1.0)*r22*x2399))))+IKsqr((((cj1*cj4*r22))+((cj1*r21*x2395))+(((-1.0)*r11*x2395*x2397))+((r10*x2398))+(((-1.0)*r20*x2394*x2396))+(((-1.0)*r12*x2399))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x2395*x2397))+(((-1.0)*cj4*r12*x2394))+(((-1.0)*r11*x2394*x2395))+((r20*x2398))+((cj1*r10*x2396))+(((-1.0)*r22*x2399))), (((cj1*cj4*r22))+((cj1*r21*x2395))+(((-1.0)*r11*x2395*x2397))+((r10*x2398))+(((-1.0)*r20*x2394*x2396))+(((-1.0)*r12*x2399))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2400=IKcos(j2);
IkReal x2401=IKsin(j2);
IkReal x2402=(cj3*cj4);
IkReal x2403=(r21*sj5);
IkReal x2404=((1.0)*r22);
IkReal x2405=(cj5*r10);
IkReal x2406=(cj5*r20);
IkReal x2407=(cj5*sj3);
IkReal x2408=((1.0)*sj1);
IkReal x2409=(cj3*sj4);
IkReal x2410=(sj3*sj5);
IkReal x2411=(r11*sj5);
IkReal x2412=((1.0)*sj4);
IkReal x2413=((1.0)*r12);
IkReal x2414=((0.4)*sj1);
IkReal x2415=(cj1*x2400);
IkReal x2416=((0.4)*x2401);
IkReal x2417=(x2400*x2408);
IkReal x2418=((1.0)*cj1*x2401);
IkReal x2419=(x2417+x2418);
evalcond[0]=((((-1.0)*x2401*x2408))+x2415+(((-1.0)*cj4*x2404))+(((-1.0)*x2403*x2412))+((sj4*x2406)));
evalcond[1]=((((-1.0)*cj4*x2413))+(((-1.0)*x2411*x2412))+(((-1.0)*x2419))+((sj4*x2405)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x2415))+(((-9.9e-7)*x2403))+(((-1.0)*pz))+(((-1.0)*x2414))+(((9.9e-7)*x2406))+(((-1.0)*x2401*x2414)));
evalcond[3]=((((1.93e-6)*sj1))+(((-1.0)*py))+(((9.9e-7)*x2405))+(((-9.9e-7)*x2411))+(((-1.0)*cj1*x2416))+(((-1.0)*x2400*x2414))+(((-0.4)*cj1)));
evalcond[4]=(((r10*x2410))+(((-1.0)*x2415))+((r11*x2407))+(((-1.0)*x2402*x2405))+((x2402*x2411))+((sj1*x2401))+(((-1.0)*x2409*x2413)));
evalcond[5]=((((-1.0)*x2404*x2409))+(((-1.0)*x2402*x2406))+(((-1.0)*x2419))+((r20*x2410))+((r21*x2407))+((x2402*x2403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2420=((1.0)*sj1);
IkReal x2421=(cj5*sj4);
IkReal x2422=(r20*sj0);
IkReal x2423=((1.0)*cj1);
IkReal x2424=(cj4*r12);
IkReal x2425=(cj4*r22*sj0);
IkReal x2426=(r11*sj4*sj5);
IkReal x2427=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x2428=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2428.valid){
continue;
}
CheckValue<IkReal> x2429 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2421*x2423))+((cj1*x2426))+((cj1*x2424))+(((-1.0)*x2420*x2427))+(((-1.0)*x2420*x2425))+((sj1*x2421*x2422)))),IkReal((((cj1*x2427))+((cj1*x2425))+((sj1*x2426))+((sj1*x2424))+(((-1.0)*x2421*x2422*x2423))+(((-1.0)*r10*x2420*x2421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2429.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2428.value)))+(x2429.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2430=IKsin(j2);
IkReal x2431=IKcos(j2);
IkReal x2432=((1.0)*cj3);
IkReal x2433=(cj5*r00);
IkReal x2434=(cj0*cj1);
IkReal x2435=(cj5*r10);
IkReal x2436=(r01*sj5);
IkReal x2437=((1.0)*sj4);
IkReal x2438=(cj5*sj3);
IkReal x2439=(cj1*sj0);
IkReal x2440=(sj3*sj5);
IkReal x2441=(cj5*r20);
IkReal x2442=((1.0)*cj4);
IkReal x2443=((1.93e-6)*sj1);
IkReal x2444=(r11*sj5);
IkReal x2445=(r21*sj5);
IkReal x2446=(cj1*x2431);
IkReal x2447=(cj3*cj4*sj5);
IkReal x2448=((0.4)*x2430);
IkReal x2449=(sj1*x2431);
IkReal x2450=((1.0)*sj1*x2430);
evalcond[0]=(x2446+(((-1.0)*x2437*x2445))+((sj4*x2441))+(((-1.0)*x2450))+(((-1.0)*r22*x2442)));
evalcond[1]=((((-1.0)*x2436*x2437))+((cj0*x2449))+((x2430*x2434))+(((-1.0)*r02*x2442))+((sj4*x2433)));
evalcond[2]=(((sj0*x2449))+(((-1.0)*x2437*x2444))+(((-1.0)*r12*x2442))+((x2430*x2439))+((sj4*x2435)));
evalcond[3]=((((-1.0)*sj1*x2448))+(((-1.93e-6)*cj1))+(((9.9e-7)*x2441))+(((-1.0)*pz))+(((-9.9e-7)*x2445))+(((-0.4)*sj1))+(((0.4)*x2446)));
evalcond[4]=((((-9.9e-7)*x2436))+(((0.4)*x2434))+(((-1.0)*cj0*x2443))+(((-1.0)*px))+((x2434*x2448))+(((9.9e-7)*x2433))+(((0.4)*cj0*x2449)));
evalcond[5]=((((0.4)*sj0*x2449))+(((-1.0)*sj0*x2443))+(((0.4)*x2439))+(((-1.0)*py))+(((9.9e-7)*x2435))+((x2439*x2448))+(((-9.9e-7)*x2444)));
evalcond[6]=((((-1.0)*cj1*x2430))+(((-1.0)*x2449))+((cj3*cj4*x2445))+(((-1.0)*cj4*x2432*x2441))+((r21*x2438))+(((-1.0)*r22*sj4*x2432))+((r20*x2440)));
evalcond[7]=((((-1.0)*cj4*x2432*x2433))+((r01*x2438))+((cj3*cj4*x2436))+(((-1.0)*cj0*x2450))+((r00*x2440))+((x2431*x2434))+(((-1.0)*r02*sj4*x2432)));
evalcond[8]=((((-1.0)*sj0*x2450))+(((-1.0)*cj4*x2432*x2435))+((r11*x2438))+((r10*x2440))+(((-1.0)*r12*sj4*x2432))+((x2431*x2439))+((cj3*cj4*x2444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2451=((1.0)*cj0);
IkReal x2452=(cj4*r02);
IkReal x2453=(cj1*sj4);
IkReal x2454=(cj4*r22);
IkReal x2455=(cj5*r20);
IkReal x2456=(sj1*sj4);
IkReal x2457=(sj5*x2456);
IkReal x2458=((1.0)*cj5*r00);
CheckValue<IkReal> x2459 = IKatan2WithCheck(IkReal(((((-1.0)*x2453*x2458))+((cj1*x2452))+(((-1.0)*sj1*x2451*x2454))+(((-1.0)*r21*x2451*x2457))+((r01*sj5*x2453))+((cj0*x2455*x2456)))),IkReal((((cj0*cj1*x2454))+(((-1.0)*x2451*x2453*x2455))+((cj0*r21*sj5*x2453))+((sj1*x2452))+((r01*x2457))+(((-1.0)*x2456*x2458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2459.valid){
continue;
}
CheckValue<IkReal> x2460=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2460.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2459.value)+(((1.5707963267949)*(x2460.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2461=IKsin(j2);
IkReal x2462=IKcos(j2);
IkReal x2463=((1.0)*cj3);
IkReal x2464=(cj5*r00);
IkReal x2465=(cj0*cj1);
IkReal x2466=(cj5*r10);
IkReal x2467=(r01*sj5);
IkReal x2468=((1.0)*sj4);
IkReal x2469=(cj5*sj3);
IkReal x2470=(cj1*sj0);
IkReal x2471=(sj3*sj5);
IkReal x2472=(cj5*r20);
IkReal x2473=((1.0)*cj4);
IkReal x2474=((1.93e-6)*sj1);
IkReal x2475=(r11*sj5);
IkReal x2476=(r21*sj5);
IkReal x2477=(cj1*x2462);
IkReal x2478=(cj3*cj4*sj5);
IkReal x2479=((0.4)*x2461);
IkReal x2480=(sj1*x2462);
IkReal x2481=((1.0)*sj1*x2461);
evalcond[0]=(x2477+((sj4*x2472))+(((-1.0)*x2481))+(((-1.0)*x2468*x2476))+(((-1.0)*r22*x2473)));
evalcond[1]=(((x2461*x2465))+(((-1.0)*x2467*x2468))+(((-1.0)*r02*x2473))+((cj0*x2480))+((sj4*x2464)));
evalcond[2]=(((sj0*x2480))+((x2461*x2470))+(((-1.0)*r12*x2473))+(((-1.0)*x2468*x2475))+((sj4*x2466)));
evalcond[3]=((((-1.93e-6)*cj1))+(((9.9e-7)*x2472))+(((-1.0)*pz))+(((-9.9e-7)*x2476))+(((-1.0)*sj1*x2479))+(((-0.4)*sj1))+(((0.4)*x2477)));
evalcond[4]=((((-1.0)*cj0*x2474))+(((0.4)*x2465))+(((9.9e-7)*x2464))+(((-1.0)*px))+(((0.4)*cj0*x2480))+(((-9.9e-7)*x2467))+((x2465*x2479)));
evalcond[5]=((((0.4)*sj0*x2480))+(((9.9e-7)*x2466))+(((-1.0)*py))+(((-9.9e-7)*x2475))+(((-1.0)*sj0*x2474))+(((0.4)*x2470))+((x2470*x2479)));
evalcond[6]=((((-1.0)*cj1*x2461))+(((-1.0)*x2480))+(((-1.0)*r22*sj4*x2463))+(((-1.0)*cj4*x2463*x2472))+((r21*x2469))+((r20*x2471))+((cj3*cj4*x2476)));
evalcond[7]=(((r01*x2469))+(((-1.0)*cj0*x2481))+(((-1.0)*r02*sj4*x2463))+((x2462*x2465))+((r00*x2471))+((cj3*cj4*x2467))+(((-1.0)*cj4*x2463*x2464)));
evalcond[8]=(((r10*x2471))+(((-1.0)*r12*sj4*x2463))+(((-1.0)*sj0*x2481))+((r11*x2469))+((cj3*cj4*x2475))+(((-1.0)*cj4*x2463*x2466))+((x2462*x2470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2482=cj0*cj0;
IkReal x2483=(cj0*px);
IkReal x2484=(cj5*r20);
IkReal x2485=(r21*sj5);
IkReal x2486=((0.4)*sj4);
IkReal x2487=((77.2)*sj4);
IkReal x2488=(cj0*cj4*r02);
IkReal x2489=(cj0*r01*sj5);
IkReal x2490=(cj0*cj5*r00);
IkReal x2491=(((x2485*x2486))+(((-9.9e-7)*x2485))+(((9.9e-7)*x2484))+(((-1.0)*pz))+(((-1.0)*x2484*x2486))+(((0.4)*cj4*r22)));
IkReal x2492=(x2482*x2491);
CheckValue<IkReal> x2493=IKPowWithIntegerCheck(IKsign(x2482),-1);
if(!x2493.valid){
continue;
}
CheckValue<IkReal> x2494 = IKatan2WithCheck(IkReal((((x2487*x2490))+(((-77.2)*x2488))+(((-40000000.0)*x2492))+(((-0.00019107)*x2490))+(((-1.0)*x2487*x2489))+(((0.00019107)*x2489))+(((193.0)*x2483)))),IkReal(((((-39.6)*x2489))+(((16000000.0)*sj4*x2489))+(((39.6)*x2490))+(((-16000000.0)*sj4*x2490))+(((-40000000.0)*x2483))+(((16000000.0)*x2488))+(((-193.0)*x2492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2494.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x2493.value)))+(x2494.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2495=IKsin(j1);
IkReal x2496=sj0*sj0;
IkReal x2497=IKcos(j1);
IkReal x2498=cj0*cj0;
IkReal x2499=((0.4)*cj5);
IkReal x2500=(r21*sj0);
IkReal x2501=((0.4)*sj4);
IkReal x2502=(r21*sj5);
IkReal x2503=(cj3*r22);
IkReal x2504=(r11*sj5);
IkReal x2505=((9.9e-7)*cj0);
IkReal x2506=((0.4)*cj4);
IkReal x2507=(cj3*cj4);
IkReal x2508=(cj5*r00);
IkReal x2509=(r01*sj5);
IkReal x2510=(r20*sj0);
IkReal x2511=(r00*sj4);
IkReal x2512=((9.9e-7)*cj5);
IkReal x2513=(cj0*sj0);
IkReal x2514=((9.9e-7)*sj0);
IkReal x2515=(r10*sj4);
IkReal x2516=((0.4)*x2497);
IkReal x2517=(r20*x2507);
IkReal x2518=((1.93e-6)*x2495);
IkReal x2519=(r10*x2512);
IkReal x2520=((1.93e-6)*x2497);
IkReal x2521=((0.4)*sj3*sj5);
IkReal x2522=((0.4)*x2495);
IkReal x2523=(x2513*x2518);
IkReal x2524=(x2513*x2516);
evalcond[0]=((((-1.0)*r20*sj4*x2499))+((r22*x2506))+((x2501*x2502))+(((-1.0)*pz))+(((-1.0)*x2522))+(((-1.0)*x2520))+(((-9.9e-7)*x2502))+((r20*x2512)));
evalcond[1]=(((x2504*x2514))+(((-1.0)*x2496*x2516))+(((-1.0)*sj0*x2519))+(((-1.0)*sj0*x2501*x2504))+((py*sj0))+(((-1.0)*r12*sj0*x2506))+((sj0*x2499*x2515))+((x2496*x2518)));
evalcond[2]=(((cj0*x2499*x2511))+(((-1.0)*cj0*r02*x2506))+((x2505*x2509))+((x2498*x2518))+(((-1.0)*x2505*x2508))+((cj0*px))+(((-1.0)*cj0*x2501*x2509))+(((-1.0)*x2498*x2516)));
evalcond[3]=((((9.9e-7)*sj5*x2500))+(((-1.0)*x2510*x2512))+(((-1.0)*r10*x2499*x2507))+((cj3*x2504*x2506))+((r11*sj3*x2499))+((sj0*x2520))+((sj0*x2522))+((pz*sj0))+((r10*x2521))+(((-1.0)*cj3*r12*x2501)));
evalcond[4]=((((-1.0)*r00*x2499*x2507))+((r01*sj3*x2499))+(((-1.0)*cj5*r20*x2505))+((r00*x2521))+((cj0*x2520))+((cj0*x2522))+((cj0*pz))+((cj3*x2506*x2509))+(((-1.0)*cj3*r02*x2501))+((x2502*x2505)));
evalcond[5]=((((-1.0)*x2519))+(((-1.0)*cj3*sj5*x2500*x2506))+(((9.9e-7)*x2504))+((sj0*x2518))+((x2499*x2507*x2510))+(((-1.0)*sj3*x2499*x2500))+py+(((-1.0)*x2510*x2521))+(((-1.0)*sj0*x2516))+((sj0*x2501*x2503)));
evalcond[6]=(((cj0*x2518))+(((9.9e-7)*x2509))+((cj0*x2499*x2517))+(((-1.0)*cj0*r20*x2521))+(((-1.0)*cj0*x2516))+((cj0*x2501*x2503))+(((-1.0)*cj0*r21*sj3*x2499))+px+(((-1.0)*cj0*cj3*x2502*x2506))+(((-9.9e-7)*x2508)));
evalcond[7]=((((-1.0)*cj0*r12*x2506))+(((-1.0)*x2508*x2514))+x2523+((cj0*x2499*x2515))+((px*sj0))+(((-1.0)*cj0*x2501*x2504))+((x2509*x2514))+(((-1.0)*x2524)));
evalcond[8]=(((x2504*x2505))+x2523+(((-1.0)*cj5*r10*x2505))+(((-1.0)*sj0*x2501*x2509))+((cj0*py))+(((-1.0)*x2524))+(((-1.0)*r02*sj0*x2506))+((sj0*x2499*x2511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2525=(cj4*sj1);
IkReal x2526=(cj1*sj4);
IkReal x2527=((1.0)*cj5);
IkReal x2528=(r21*sj5);
IkReal x2529=(cj1*cj4);
IkReal x2530=(sj1*sj4);
IkReal x2531=(r01*sj4*sj5);
if( IKabs((((r02*x2529))+(((-1.0)*r22*x2525))+((r01*sj5*x2526))+(((-1.0)*r00*x2526*x2527))+((cj5*r20*x2530))+(((-1.0)*x2528*x2530)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x2526*x2527))+((r02*x2525))+((r22*x2529))+(((-1.0)*r00*x2527*x2530))+((x2526*x2528))+((r01*sj5*x2530)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x2529))+(((-1.0)*r22*x2525))+((r01*sj5*x2526))+(((-1.0)*r00*x2526*x2527))+((cj5*r20*x2530))+(((-1.0)*x2528*x2530))))+IKsqr(((((-1.0)*r20*x2526*x2527))+((r02*x2525))+((r22*x2529))+(((-1.0)*r00*x2527*x2530))+((x2526*x2528))+((r01*sj5*x2530))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x2529))+(((-1.0)*r22*x2525))+((r01*sj5*x2526))+(((-1.0)*r00*x2526*x2527))+((cj5*r20*x2530))+(((-1.0)*x2528*x2530))), ((((-1.0)*r20*x2526*x2527))+((r02*x2525))+((r22*x2529))+(((-1.0)*r00*x2527*x2530))+((x2526*x2528))+((r01*sj5*x2530))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2532=IKcos(j2);
IkReal x2533=IKsin(j2);
IkReal x2534=((1.0)*cj3);
IkReal x2535=(cj5*r00);
IkReal x2536=((1.0)*cj4);
IkReal x2537=(r01*sj5);
IkReal x2538=((1.0)*sj4);
IkReal x2539=(cj5*sj3);
IkReal x2540=(cj5*r20);
IkReal x2541=(sj3*sj5);
IkReal x2542=(r21*sj5);
IkReal x2543=(cj1*x2532);
IkReal x2544=(cj3*cj4*sj5);
IkReal x2545=(cj1*x2533);
IkReal x2546=(sj1*x2533);
IkReal x2547=(sj1*x2532);
IkReal x2548=((1.0)*x2546);
evalcond[0]=(x2547+x2545+(((-1.0)*r02*x2536))+(((-1.0)*x2537*x2538))+((sj4*x2535)));
evalcond[1]=(x2543+(((-1.0)*x2538*x2542))+(((-1.0)*r22*x2536))+(((-1.0)*x2548))+((sj4*x2540)));
evalcond[2]=((((-1.93e-6)*cj1))+(((9.9e-7)*x2540))+(((-0.4)*x2546))+(((-1.0)*pz))+(((-9.9e-7)*x2542))+(((0.4)*x2543))+(((-0.4)*sj1)));
evalcond[3]=((((9.9e-7)*x2535))+(((-9.9e-7)*x2537))+(((0.4)*cj1))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((0.4)*x2547))+(((0.4)*x2545)));
evalcond[4]=(((r01*x2539))+x2543+((cj3*cj4*x2537))+(((-1.0)*cj4*x2534*x2535))+((r00*x2541))+(((-1.0)*r02*sj4*x2534))+(((-1.0)*x2548)));
evalcond[5]=((((-1.0)*cj4*x2534*x2540))+((cj3*cj4*x2542))+((r21*x2539))+(((-1.0)*x2545))+(((-1.0)*x2547))+((r20*x2541))+(((-1.0)*r22*sj4*x2534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2549=((1.0)*r01);
IkReal x2550=(sj1*sj4);
IkReal x2551=(cj5*r00);
IkReal x2552=(cj1*cj4);
IkReal x2553=(cj5*r20);
IkReal x2554=(cj1*sj4);
IkReal x2555=(sj5*x2554);
IkReal x2556=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*x2549*x2555))+((x2551*x2554))+((x2550*x2553))+(((-1.0)*r21*sj5*x2550))+(((-1.0)*r02*x2552))+(((-1.0)*r22*x2556)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2553*x2554))+((r22*x2552))+(((-1.0)*sj5*x2549*x2550))+((x2550*x2551))+(((-1.0)*r02*x2556))+((r21*x2555)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2549*x2555))+((x2551*x2554))+((x2550*x2553))+(((-1.0)*r21*sj5*x2550))+(((-1.0)*r02*x2552))+(((-1.0)*r22*x2556))))+IKsqr(((((-1.0)*x2553*x2554))+((r22*x2552))+(((-1.0)*sj5*x2549*x2550))+((x2550*x2551))+(((-1.0)*r02*x2556))+((r21*x2555))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2549*x2555))+((x2551*x2554))+((x2550*x2553))+(((-1.0)*r21*sj5*x2550))+(((-1.0)*r02*x2552))+(((-1.0)*r22*x2556))), ((((-1.0)*x2553*x2554))+((r22*x2552))+(((-1.0)*sj5*x2549*x2550))+((x2550*x2551))+(((-1.0)*r02*x2556))+((r21*x2555))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2557=IKcos(j2);
IkReal x2558=IKsin(j2);
IkReal x2559=((1.0)*cj3);
IkReal x2560=(cj5*r00);
IkReal x2561=((1.0)*cj4);
IkReal x2562=(r01*sj5);
IkReal x2563=((1.0)*sj4);
IkReal x2564=(cj5*sj3);
IkReal x2565=(cj5*r20);
IkReal x2566=((1.0)*sj1);
IkReal x2567=(sj3*sj5);
IkReal x2568=((0.4)*sj1);
IkReal x2569=(r21*sj5);
IkReal x2570=(cj1*x2557);
IkReal x2571=(cj3*cj4*sj5);
IkReal x2572=((0.4)*x2558);
IkReal x2573=(x2557*x2566);
IkReal x2574=((1.0)*cj1*x2558);
IkReal x2575=(x2574+x2573);
evalcond[0]=((((-1.0)*x2563*x2569))+x2570+(((-1.0)*r22*x2561))+(((-1.0)*x2558*x2566))+((sj4*x2565)));
evalcond[1]=((((-1.0)*x2562*x2563))+(((-1.0)*r02*x2561))+((sj4*x2560))+(((-1.0)*x2575)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x2558*x2568))+(((-1.0)*x2568))+(((-1.0)*pz))+(((-9.9e-7)*x2569))+(((0.4)*x2570))+(((9.9e-7)*x2565)));
evalcond[3]=((((-1.0)*x2557*x2568))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-9.9e-7)*x2562))+(((-1.0)*cj1*x2572))+(((9.9e-7)*x2560))+(((-0.4)*cj1)));
evalcond[4]=(((r00*x2567))+(((-1.0)*r02*sj4*x2559))+((cj3*cj4*x2562))+((r01*x2564))+(((-1.0)*x2570))+(((-1.0)*cj4*x2559*x2560))+((sj1*x2558)));
evalcond[5]=(((cj3*cj4*x2569))+((r20*x2567))+(((-1.0)*r22*sj4*x2559))+(((-1.0)*cj4*x2559*x2565))+(((-1.0)*x2575))+((r21*x2564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2576=(cj4*r12);
IkReal x2577=(cj4*r22);
IkReal x2578=(cj1*sj4);
IkReal x2579=(r11*sj5);
IkReal x2580=(r21*sj5);
IkReal x2581=((1.0)*sj1);
IkReal x2582=(sj1*sj4);
IkReal x2583=(cj5*r20);
IkReal x2584=((1.0)*cj5*r10);
if( IKabs((((cj1*x2576))+(((-1.0)*x2578*x2584))+((x2578*x2579))+(((-1.0)*x2577*x2581))+(((-1.0)*sj4*x2580*x2581))+((x2582*x2583)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2578*x2583))+((cj1*x2577))+(((-1.0)*cj5*r10*sj4*x2581))+((x2579*x2582))+((x2578*x2580))+((sj1*x2576)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2576))+(((-1.0)*x2578*x2584))+((x2578*x2579))+(((-1.0)*x2577*x2581))+(((-1.0)*sj4*x2580*x2581))+((x2582*x2583))))+IKsqr(((((-1.0)*x2578*x2583))+((cj1*x2577))+(((-1.0)*cj5*r10*sj4*x2581))+((x2579*x2582))+((x2578*x2580))+((sj1*x2576))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2576))+(((-1.0)*x2578*x2584))+((x2578*x2579))+(((-1.0)*x2577*x2581))+(((-1.0)*sj4*x2580*x2581))+((x2582*x2583))), ((((-1.0)*x2578*x2583))+((cj1*x2577))+(((-1.0)*cj5*r10*sj4*x2581))+((x2579*x2582))+((x2578*x2580))+((sj1*x2576))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2585=IKcos(j2);
IkReal x2586=IKsin(j2);
IkReal x2587=(cj3*cj4);
IkReal x2588=(r21*sj5);
IkReal x2589=((1.0)*r22);
IkReal x2590=(cj5*r10);
IkReal x2591=(cj5*r20);
IkReal x2592=(cj5*sj3);
IkReal x2593=(cj3*sj4);
IkReal x2594=(r11*sj5);
IkReal x2595=((1.0)*sj4);
IkReal x2596=((1.0)*r12);
IkReal x2597=(sj3*sj5);
IkReal x2598=(cj1*x2585);
IkReal x2599=(cj1*x2586);
IkReal x2600=(sj1*x2586);
IkReal x2601=(sj1*x2585);
IkReal x2602=((1.0)*x2600);
evalcond[0]=(x2599+(((-1.0)*x2594*x2595))+((sj4*x2590))+x2601+(((-1.0)*cj4*x2596)));
evalcond[1]=(x2598+(((-1.0)*x2588*x2595))+((sj4*x2591))+(((-1.0)*cj4*x2589))+(((-1.0)*x2602)));
evalcond[2]=((((-0.4)*x2600))+(((-1.93e-6)*cj1))+(((0.4)*x2598))+(((-1.0)*pz))+(((-9.9e-7)*x2588))+(((9.9e-7)*x2591))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*x2599))+(((0.4)*cj1))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x2594))+(((9.9e-7)*x2590))+(((0.4)*x2601)));
evalcond[4]=(x2598+(((-1.0)*x2593*x2596))+((r10*x2597))+(((-1.0)*x2587*x2590))+((r11*x2592))+(((-1.0)*x2602))+((x2587*x2594)));
evalcond[5]=((((-1.0)*x2599))+(((-1.0)*x2601))+((r20*x2597))+(((-1.0)*x2587*x2591))+(((-1.0)*x2589*x2593))+((x2587*x2588))+((r21*x2592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2603=((1.0)*cj1);
IkReal x2604=(sj4*sj5);
IkReal x2605=(cj5*sj4);
IkReal x2606=((1.0)*sj1);
IkReal x2607=(sj1*x2605);
IkReal x2608=(cj4*x2606);
if( IKabs((((r20*x2607))+((cj1*r10*x2605))+(((-1.0)*r11*x2603*x2604))+(((-1.0)*r22*x2608))+(((-1.0)*cj4*r12*x2603))+(((-1.0)*r21*x2604*x2606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r11*x2604*x2606))+((cj1*r21*x2604))+(((-1.0)*r12*x2608))+(((-1.0)*r20*x2603*x2605))+((r10*x2607)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x2607))+((cj1*r10*x2605))+(((-1.0)*r11*x2603*x2604))+(((-1.0)*r22*x2608))+(((-1.0)*cj4*r12*x2603))+(((-1.0)*r21*x2604*x2606))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r11*x2604*x2606))+((cj1*r21*x2604))+(((-1.0)*r12*x2608))+(((-1.0)*r20*x2603*x2605))+((r10*x2607))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x2607))+((cj1*r10*x2605))+(((-1.0)*r11*x2603*x2604))+(((-1.0)*r22*x2608))+(((-1.0)*cj4*r12*x2603))+(((-1.0)*r21*x2604*x2606))), (((cj1*cj4*r22))+(((-1.0)*r11*x2604*x2606))+((cj1*r21*x2604))+(((-1.0)*r12*x2608))+(((-1.0)*r20*x2603*x2605))+((r10*x2607))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2609=IKcos(j2);
IkReal x2610=IKsin(j2);
IkReal x2611=(cj3*cj4);
IkReal x2612=(r21*sj5);
IkReal x2613=((1.0)*r22);
IkReal x2614=(cj5*r10);
IkReal x2615=(cj5*r20);
IkReal x2616=(cj5*sj3);
IkReal x2617=((1.0)*sj1);
IkReal x2618=(cj3*sj4);
IkReal x2619=(sj3*sj5);
IkReal x2620=(r11*sj5);
IkReal x2621=((1.0)*sj4);
IkReal x2622=((1.0)*r12);
IkReal x2623=((0.4)*sj1);
IkReal x2624=(cj1*x2609);
IkReal x2625=((0.4)*x2610);
IkReal x2626=(x2609*x2617);
IkReal x2627=((1.0)*cj1*x2610);
IkReal x2628=(x2626+x2627);
evalcond[0]=((((-1.0)*x2610*x2617))+(((-1.0)*x2612*x2621))+(((-1.0)*cj4*x2613))+((sj4*x2615))+x2624);
evalcond[1]=((((-1.0)*cj4*x2622))+((sj4*x2614))+(((-1.0)*x2628))+(((-1.0)*x2620*x2621)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x2610*x2623))+(((-1.0)*pz))+(((-9.9e-7)*x2612))+(((9.9e-7)*x2615))+(((-1.0)*x2623))+(((0.4)*x2624)));
evalcond[3]=((((1.93e-6)*sj1))+(((-1.0)*py))+(((-9.9e-7)*x2620))+(((9.9e-7)*x2614))+(((-1.0)*cj1*x2625))+(((-1.0)*x2609*x2623))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*x2618*x2622))+(((-1.0)*x2624))+(((-1.0)*x2611*x2614))+((r11*x2616))+((x2611*x2620))+((r10*x2619))+((sj1*x2610)));
evalcond[5]=(((r20*x2619))+(((-1.0)*x2613*x2618))+(((-1.0)*x2611*x2615))+((x2611*x2612))+(((-1.0)*x2628))+((r21*x2616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2629=((1.0)*sj1);
IkReal x2630=(cj5*sj4);
IkReal x2631=(r20*sj0);
IkReal x2632=((1.0)*cj1);
IkReal x2633=(cj4*r12);
IkReal x2634=(cj4*r22*sj0);
IkReal x2635=(r11*sj4*sj5);
IkReal x2636=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x2637=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2637.valid){
continue;
}
CheckValue<IkReal> x2638 = IKatan2WithCheck(IkReal((((cj1*x2633))+((cj1*x2635))+(((-1.0)*r10*x2630*x2632))+((sj1*x2630*x2631))+(((-1.0)*x2629*x2634))+(((-1.0)*x2629*x2636)))),IkReal((((cj1*x2636))+((cj1*x2634))+((sj1*x2633))+((sj1*x2635))+(((-1.0)*x2630*x2631*x2632))+(((-1.0)*r10*x2629*x2630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2638.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2637.value)))+(x2638.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2639=IKsin(j2);
IkReal x2640=IKcos(j2);
IkReal x2641=((1.0)*cj3);
IkReal x2642=(cj5*r00);
IkReal x2643=(cj0*cj1);
IkReal x2644=(cj5*r10);
IkReal x2645=(r01*sj5);
IkReal x2646=((1.0)*sj4);
IkReal x2647=(cj5*sj3);
IkReal x2648=(cj1*sj0);
IkReal x2649=(sj3*sj5);
IkReal x2650=(cj5*r20);
IkReal x2651=((1.0)*cj4);
IkReal x2652=((1.93e-6)*sj1);
IkReal x2653=(r11*sj5);
IkReal x2654=(r21*sj5);
IkReal x2655=(cj1*x2640);
IkReal x2656=(cj3*cj4*sj5);
IkReal x2657=((0.4)*x2639);
IkReal x2658=(sj1*x2640);
IkReal x2659=((1.0)*sj1*x2639);
evalcond[0]=((((-1.0)*r22*x2651))+(((-1.0)*x2646*x2654))+((sj4*x2650))+(((-1.0)*x2659))+x2655);
evalcond[1]=(((x2639*x2643))+(((-1.0)*x2645*x2646))+((sj4*x2642))+(((-1.0)*r02*x2651))+((cj0*x2658)));
evalcond[2]=(((sj0*x2658))+(((-1.0)*r12*x2651))+(((-1.0)*x2646*x2653))+((x2639*x2648))+((sj4*x2644)));
evalcond[3]=((((-1.93e-6)*cj1))+(((9.9e-7)*x2650))+(((0.4)*x2655))+(((-9.9e-7)*x2654))+(((-1.0)*pz))+(((-1.0)*sj1*x2657))+(((-0.4)*sj1)));
evalcond[4]=((((0.4)*cj0*x2658))+(((9.9e-7)*x2642))+(((0.4)*x2643))+(((-1.0)*px))+(((-9.9e-7)*x2645))+((x2643*x2657))+(((-1.0)*cj0*x2652)));
evalcond[5]=((((-1.0)*sj0*x2652))+(((9.9e-7)*x2644))+(((0.4)*x2648))+((x2648*x2657))+(((-9.9e-7)*x2653))+(((-1.0)*py))+(((0.4)*sj0*x2658)));
evalcond[6]=(((r21*x2647))+(((-1.0)*cj1*x2639))+(((-1.0)*r22*sj4*x2641))+(((-1.0)*cj4*x2641*x2650))+((cj3*cj4*x2654))+(((-1.0)*x2658))+((r20*x2649)));
evalcond[7]=((((-1.0)*r02*sj4*x2641))+((r00*x2649))+(((-1.0)*cj4*x2641*x2642))+((r01*x2647))+((cj3*cj4*x2645))+((x2640*x2643))+(((-1.0)*cj0*x2659)));
evalcond[8]=((((-1.0)*sj0*x2659))+((r11*x2647))+((r10*x2649))+(((-1.0)*cj4*x2641*x2644))+((x2640*x2648))+((cj3*cj4*x2653))+(((-1.0)*r12*sj4*x2641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2660=((1.0)*cj0);
IkReal x2661=(cj4*r02);
IkReal x2662=(cj1*sj4);
IkReal x2663=(cj4*r22);
IkReal x2664=(cj5*r20);
IkReal x2665=(sj1*sj4);
IkReal x2666=(sj5*x2665);
IkReal x2667=((1.0)*cj5*r00);
CheckValue<IkReal> x2668 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2660*x2666))+(((-1.0)*sj1*x2660*x2663))+((cj1*x2661))+((cj0*x2664*x2665))+(((-1.0)*x2662*x2667))+((r01*sj5*x2662)))),IkReal((((sj1*x2661))+(((-1.0)*x2660*x2662*x2664))+((cj0*r21*sj5*x2662))+((cj0*cj1*x2663))+(((-1.0)*x2665*x2667))+((r01*x2666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2668.valid){
continue;
}
CheckValue<IkReal> x2669=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2669.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2668.value)+(((1.5707963267949)*(x2669.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2670=IKsin(j2);
IkReal x2671=IKcos(j2);
IkReal x2672=((1.0)*cj3);
IkReal x2673=(cj5*r00);
IkReal x2674=(cj0*cj1);
IkReal x2675=(cj5*r10);
IkReal x2676=(r01*sj5);
IkReal x2677=((1.0)*sj4);
IkReal x2678=(cj5*sj3);
IkReal x2679=(cj1*sj0);
IkReal x2680=(sj3*sj5);
IkReal x2681=(cj5*r20);
IkReal x2682=((1.0)*cj4);
IkReal x2683=((1.93e-6)*sj1);
IkReal x2684=(r11*sj5);
IkReal x2685=(r21*sj5);
IkReal x2686=(cj1*x2671);
IkReal x2687=(cj3*cj4*sj5);
IkReal x2688=((0.4)*x2670);
IkReal x2689=(sj1*x2671);
IkReal x2690=((1.0)*sj1*x2670);
evalcond[0]=(((sj4*x2681))+(((-1.0)*x2690))+(((-1.0)*r22*x2682))+(((-1.0)*x2677*x2685))+x2686);
evalcond[1]=((((-1.0)*r02*x2682))+((sj4*x2673))+((cj0*x2689))+(((-1.0)*x2676*x2677))+((x2670*x2674)));
evalcond[2]=((((-1.0)*r12*x2682))+((sj4*x2675))+((sj0*x2689))+((x2670*x2679))+(((-1.0)*x2677*x2684)));
evalcond[3]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x2685))+(((-1.0)*sj1*x2688))+(((0.4)*x2686))+(((9.9e-7)*x2681))+(((-1.0)*pz))+(((-0.4)*sj1)));
evalcond[4]=((((0.4)*x2674))+((x2674*x2688))+(((-9.9e-7)*x2676))+(((0.4)*cj0*x2689))+(((-1.0)*px))+(((-1.0)*cj0*x2683))+(((9.9e-7)*x2673)));
evalcond[5]=((((-9.9e-7)*x2684))+(((0.4)*x2679))+(((0.4)*sj0*x2689))+(((-1.0)*py))+((x2679*x2688))+(((-1.0)*sj0*x2683))+(((9.9e-7)*x2675)));
evalcond[6]=(((cj3*cj4*x2685))+((r21*x2678))+(((-1.0)*cj1*x2670))+(((-1.0)*r22*sj4*x2672))+(((-1.0)*x2689))+((r20*x2680))+(((-1.0)*cj4*x2672*x2681)));
evalcond[7]=((((-1.0)*r02*sj4*x2672))+((r00*x2680))+((x2671*x2674))+((r01*x2678))+(((-1.0)*cj0*x2690))+(((-1.0)*cj4*x2672*x2673))+((cj3*cj4*x2676)));
evalcond[8]=(((cj3*cj4*x2684))+(((-1.0)*r12*sj4*x2672))+((r10*x2680))+((x2671*x2679))+((r11*x2678))+(((-1.0)*cj4*x2672*x2675))+(((-1.0)*sj0*x2690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2691=sj0*sj0;
IkReal x2692=(py*sj0);
IkReal x2693=((77.2)*sj0);
IkReal x2694=(sj4*sj5);
IkReal x2695=(cj4*r12);
IkReal x2696=((16000000.0)*sj0);
IkReal x2697=(cj5*r20);
IkReal x2698=(cj5*r10*sj0);
IkReal x2699=(r11*sj0*sj5);
IkReal x2700=((((0.4)*r21*x2694))+(((9.9e-7)*x2697))+(((-9.9e-7)*r21*sj5))+(((-1.0)*pz))+(((-0.4)*sj4*x2697))+(((0.4)*cj4*r22)));
IkReal x2701=(x2691*x2700);
CheckValue<IkReal> x2702 = IKatan2WithCheck(IkReal((((cj5*r10*sj4*x2693))+(((-40000000.0)*x2701))+(((193.0)*x2692))+(((-0.00019107)*x2698))+(((-1.0)*r11*x2693*x2694))+(((-1.0)*x2693*x2695))+(((0.00019107)*x2699)))),IkReal(((((-16000000.0)*sj4*x2698))+(((-39.6)*x2699))+((r11*x2694*x2696))+(((39.6)*x2698))+((x2695*x2696))+(((-193.0)*x2701))+(((-40000000.0)*x2692)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2702.valid){
continue;
}
CheckValue<IkReal> x2703=IKPowWithIntegerCheck(IKsign(x2691),-1);
if(!x2703.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2702.value)+(((-1.5707963267949)*(x2703.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2704=IKsin(j1);
IkReal x2705=sj0*sj0;
IkReal x2706=IKcos(j1);
IkReal x2707=cj0*cj0;
IkReal x2708=((0.4)*cj5);
IkReal x2709=(r21*sj0);
IkReal x2710=((0.4)*sj4);
IkReal x2711=(r21*sj5);
IkReal x2712=(cj3*r22);
IkReal x2713=(r11*sj5);
IkReal x2714=((9.9e-7)*cj0);
IkReal x2715=((0.4)*cj4);
IkReal x2716=(cj3*cj4);
IkReal x2717=(cj5*r00);
IkReal x2718=(r01*sj5);
IkReal x2719=(r20*sj0);
IkReal x2720=(r00*sj4);
IkReal x2721=((9.9e-7)*cj5);
IkReal x2722=(cj0*sj0);
IkReal x2723=((9.9e-7)*sj0);
IkReal x2724=(r10*sj4);
IkReal x2725=((0.4)*x2706);
IkReal x2726=(r20*x2716);
IkReal x2727=((1.93e-6)*x2704);
IkReal x2728=(r10*x2721);
IkReal x2729=((1.93e-6)*x2706);
IkReal x2730=((0.4)*sj3*sj5);
IkReal x2731=((0.4)*x2704);
IkReal x2732=(x2722*x2727);
IkReal x2733=(x2722*x2725);
evalcond[0]=((((-9.9e-7)*x2711))+((r22*x2715))+(((-1.0)*r20*sj4*x2708))+((x2710*x2711))+(((-1.0)*pz))+((r20*x2721))+(((-1.0)*x2729))+(((-1.0)*x2731)));
evalcond[1]=(((x2713*x2723))+(((-1.0)*r12*sj0*x2715))+(((-1.0)*sj0*x2710*x2713))+((x2705*x2727))+((sj0*x2708*x2724))+((py*sj0))+(((-1.0)*x2705*x2725))+(((-1.0)*sj0*x2728)));
evalcond[2]=(((cj0*x2708*x2720))+(((-1.0)*x2707*x2725))+(((-1.0)*cj0*r02*x2715))+(((-1.0)*cj0*x2710*x2718))+(((-1.0)*x2714*x2717))+((x2707*x2727))+((cj0*px))+((x2714*x2718)));
evalcond[3]=(((cj3*x2713*x2715))+(((-1.0)*cj3*r12*x2710))+(((-1.0)*x2719*x2721))+((r11*sj3*x2708))+(((9.9e-7)*sj5*x2709))+((sj0*x2731))+((r10*x2730))+((pz*sj0))+((sj0*x2729))+(((-1.0)*r10*x2708*x2716)));
evalcond[4]=((((-1.0)*cj3*r02*x2710))+(((-1.0)*r00*x2708*x2716))+((cj3*x2715*x2718))+(((-1.0)*cj5*r20*x2714))+((r01*sj3*x2708))+((r00*x2730))+((x2711*x2714))+((cj0*x2731))+((cj0*x2729))+((cj0*pz)));
evalcond[5]=((((9.9e-7)*x2713))+(((-1.0)*x2719*x2730))+((sj0*x2710*x2712))+(((-1.0)*sj3*x2708*x2709))+py+((x2708*x2716*x2719))+(((-1.0)*x2728))+(((-1.0)*cj3*sj5*x2709*x2715))+(((-1.0)*sj0*x2725))+((sj0*x2727)));
evalcond[6]=((((-1.0)*cj0*cj3*x2711*x2715))+(((9.9e-7)*x2718))+((cj0*x2708*x2726))+(((-1.0)*cj0*r21*sj3*x2708))+(((-9.9e-7)*x2717))+((cj0*x2710*x2712))+(((-1.0)*cj0*r20*x2730))+(((-1.0)*cj0*x2725))+px+((cj0*x2727)));
evalcond[7]=(x2732+((cj0*x2708*x2724))+(((-1.0)*cj0*x2710*x2713))+(((-1.0)*cj0*r12*x2715))+((x2718*x2723))+((px*sj0))+(((-1.0)*x2717*x2723))+(((-1.0)*x2733)));
evalcond[8]=(x2732+(((-1.0)*r02*sj0*x2715))+(((-1.0)*sj0*x2710*x2718))+(((-1.0)*cj5*r10*x2714))+((x2713*x2714))+((sj0*x2708*x2720))+(((-1.0)*x2733))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2734=(cj4*sj1);
IkReal x2735=(cj1*sj4);
IkReal x2736=((1.0)*cj5);
IkReal x2737=(r21*sj5);
IkReal x2738=(cj1*cj4);
IkReal x2739=(sj1*sj4);
IkReal x2740=(r01*sj4*sj5);
if( IKabs((((r02*x2738))+(((-1.0)*x2737*x2739))+((r01*sj5*x2735))+(((-1.0)*r00*x2735*x2736))+(((-1.0)*r22*x2734))+((cj5*r20*x2739)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x2734))+(((-1.0)*r20*x2735*x2736))+(((-1.0)*r00*x2736*x2739))+((r01*sj5*x2739))+((r22*x2738))+((x2735*x2737)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x2738))+(((-1.0)*x2737*x2739))+((r01*sj5*x2735))+(((-1.0)*r00*x2735*x2736))+(((-1.0)*r22*x2734))+((cj5*r20*x2739))))+IKsqr((((r02*x2734))+(((-1.0)*r20*x2735*x2736))+(((-1.0)*r00*x2736*x2739))+((r01*sj5*x2739))+((r22*x2738))+((x2735*x2737))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x2738))+(((-1.0)*x2737*x2739))+((r01*sj5*x2735))+(((-1.0)*r00*x2735*x2736))+(((-1.0)*r22*x2734))+((cj5*r20*x2739))), (((r02*x2734))+(((-1.0)*r20*x2735*x2736))+(((-1.0)*r00*x2736*x2739))+((r01*sj5*x2739))+((r22*x2738))+((x2735*x2737))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2741=IKcos(j2);
IkReal x2742=IKsin(j2);
IkReal x2743=((1.0)*cj3);
IkReal x2744=(cj5*r00);
IkReal x2745=((1.0)*cj4);
IkReal x2746=(r01*sj5);
IkReal x2747=((1.0)*sj4);
IkReal x2748=(cj5*sj3);
IkReal x2749=(cj5*r20);
IkReal x2750=(sj3*sj5);
IkReal x2751=(r21*sj5);
IkReal x2752=(cj1*x2741);
IkReal x2753=(cj3*cj4*sj5);
IkReal x2754=(cj1*x2742);
IkReal x2755=(sj1*x2742);
IkReal x2756=(sj1*x2741);
IkReal x2757=((1.0)*x2755);
evalcond[0]=(x2756+x2754+((sj4*x2744))+(((-1.0)*x2746*x2747))+(((-1.0)*r02*x2745)));
evalcond[1]=(x2752+((sj4*x2749))+(((-1.0)*x2757))+(((-1.0)*x2747*x2751))+(((-1.0)*r22*x2745)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x2752))+(((9.9e-7)*x2749))+(((-1.0)*pz))+(((-0.4)*x2755))+(((-9.9e-7)*x2751))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*cj1))+(((0.4)*x2754))+(((0.4)*x2756))+(((9.9e-7)*x2744))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x2746)));
evalcond[4]=(x2752+(((-1.0)*cj4*x2743*x2744))+((cj3*cj4*x2746))+((r01*x2748))+(((-1.0)*r02*sj4*x2743))+((r00*x2750))+(((-1.0)*x2757)));
evalcond[5]=((((-1.0)*cj4*x2743*x2749))+((r21*x2748))+((cj3*cj4*x2751))+(((-1.0)*r22*sj4*x2743))+((r20*x2750))+(((-1.0)*x2756))+(((-1.0)*x2754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2758=((1.0)*r01);
IkReal x2759=(sj1*sj4);
IkReal x2760=(cj5*r00);
IkReal x2761=(cj1*cj4);
IkReal x2762=(cj5*r20);
IkReal x2763=(cj1*sj4);
IkReal x2764=(sj5*x2763);
IkReal x2765=((1.0)*cj4*sj1);
if( IKabs((((x2759*x2762))+(((-1.0)*r21*sj5*x2759))+(((-1.0)*x2758*x2764))+((x2760*x2763))+(((-1.0)*r02*x2761))+(((-1.0)*r22*x2765)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2759*x2760))+(((-1.0)*r02*x2765))+(((-1.0)*sj5*x2758*x2759))+(((-1.0)*x2762*x2763))+((r21*x2764))+((r22*x2761)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2759*x2762))+(((-1.0)*r21*sj5*x2759))+(((-1.0)*x2758*x2764))+((x2760*x2763))+(((-1.0)*r02*x2761))+(((-1.0)*r22*x2765))))+IKsqr((((x2759*x2760))+(((-1.0)*r02*x2765))+(((-1.0)*sj5*x2758*x2759))+(((-1.0)*x2762*x2763))+((r21*x2764))+((r22*x2761))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2759*x2762))+(((-1.0)*r21*sj5*x2759))+(((-1.0)*x2758*x2764))+((x2760*x2763))+(((-1.0)*r02*x2761))+(((-1.0)*r22*x2765))), (((x2759*x2760))+(((-1.0)*r02*x2765))+(((-1.0)*sj5*x2758*x2759))+(((-1.0)*x2762*x2763))+((r21*x2764))+((r22*x2761))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2766=IKcos(j2);
IkReal x2767=IKsin(j2);
IkReal x2768=((1.0)*cj3);
IkReal x2769=(cj5*r00);
IkReal x2770=((1.0)*cj4);
IkReal x2771=(r01*sj5);
IkReal x2772=((1.0)*sj4);
IkReal x2773=(cj5*sj3);
IkReal x2774=(cj5*r20);
IkReal x2775=((1.0)*sj1);
IkReal x2776=(sj3*sj5);
IkReal x2777=((0.4)*sj1);
IkReal x2778=(r21*sj5);
IkReal x2779=(cj1*x2766);
IkReal x2780=(cj3*cj4*sj5);
IkReal x2781=((0.4)*x2767);
IkReal x2782=(x2766*x2775);
IkReal x2783=((1.0)*cj1*x2767);
IkReal x2784=(x2783+x2782);
evalcond[0]=(x2779+((sj4*x2774))+(((-1.0)*x2772*x2778))+(((-1.0)*x2767*x2775))+(((-1.0)*r22*x2770)));
evalcond[1]=((((-1.0)*x2784))+((sj4*x2769))+(((-1.0)*r02*x2770))+(((-1.0)*x2771*x2772)));
evalcond[2]=((((-1.93e-6)*cj1))+(((9.9e-7)*x2774))+(((0.4)*x2779))+(((-1.0)*pz))+(((-1.0)*x2767*x2777))+(((-1.0)*x2777))+(((-9.9e-7)*x2778)));
evalcond[3]=((((-1.0)*cj1*x2781))+(((-1.0)*x2766*x2777))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-9.9e-7)*x2771))+(((9.9e-7)*x2769))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*x2779))+((sj1*x2767))+((r01*x2773))+((r00*x2776))+((cj3*cj4*x2771))+(((-1.0)*cj4*x2768*x2769))+(((-1.0)*r02*sj4*x2768)));
evalcond[5]=((((-1.0)*x2784))+(((-1.0)*r22*sj4*x2768))+((cj3*cj4*x2778))+((r20*x2776))+(((-1.0)*cj4*x2768*x2774))+((r21*x2773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2785=(cj4*r12);
IkReal x2786=(cj4*r22);
IkReal x2787=(cj1*sj4);
IkReal x2788=(r11*sj5);
IkReal x2789=(r21*sj5);
IkReal x2790=((1.0)*sj1);
IkReal x2791=(sj1*sj4);
IkReal x2792=(cj5*r20);
IkReal x2793=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*x2787*x2793))+(((-1.0)*x2786*x2790))+((x2787*x2788))+((x2791*x2792))+((cj1*x2785))+(((-1.0)*sj4*x2789*x2790)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2787*x2789))+((cj1*x2786))+((sj1*x2785))+(((-1.0)*x2787*x2792))+((x2788*x2791))+(((-1.0)*cj5*r10*sj4*x2790)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2787*x2793))+(((-1.0)*x2786*x2790))+((x2787*x2788))+((x2791*x2792))+((cj1*x2785))+(((-1.0)*sj4*x2789*x2790))))+IKsqr((((x2787*x2789))+((cj1*x2786))+((sj1*x2785))+(((-1.0)*x2787*x2792))+((x2788*x2791))+(((-1.0)*cj5*r10*sj4*x2790))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2787*x2793))+(((-1.0)*x2786*x2790))+((x2787*x2788))+((x2791*x2792))+((cj1*x2785))+(((-1.0)*sj4*x2789*x2790))), (((x2787*x2789))+((cj1*x2786))+((sj1*x2785))+(((-1.0)*x2787*x2792))+((x2788*x2791))+(((-1.0)*cj5*r10*sj4*x2790))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2794=IKcos(j2);
IkReal x2795=IKsin(j2);
IkReal x2796=(cj3*cj4);
IkReal x2797=(r21*sj5);
IkReal x2798=((1.0)*r22);
IkReal x2799=(cj5*r10);
IkReal x2800=(cj5*r20);
IkReal x2801=(cj5*sj3);
IkReal x2802=(cj3*sj4);
IkReal x2803=(r11*sj5);
IkReal x2804=((1.0)*sj4);
IkReal x2805=((1.0)*r12);
IkReal x2806=(sj3*sj5);
IkReal x2807=(cj1*x2794);
IkReal x2808=(cj1*x2795);
IkReal x2809=(sj1*x2795);
IkReal x2810=(sj1*x2794);
IkReal x2811=((1.0)*x2809);
evalcond[0]=((((-1.0)*cj4*x2805))+(((-1.0)*x2803*x2804))+((sj4*x2799))+x2808+x2810);
evalcond[1]=(((sj4*x2800))+(((-1.0)*cj4*x2798))+(((-1.0)*x2811))+(((-1.0)*x2797*x2804))+x2807);
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x2807))+(((-9.9e-7)*x2797))+(((-1.0)*pz))+(((-0.4)*x2809))+(((9.9e-7)*x2800))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*x2810))+(((0.4)*x2808))+(((0.4)*cj1))+(((-9.9e-7)*x2803))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((9.9e-7)*x2799)));
evalcond[4]=(((x2796*x2803))+((r10*x2806))+(((-1.0)*x2796*x2799))+(((-1.0)*x2802*x2805))+(((-1.0)*x2811))+x2807+((r11*x2801)));
evalcond[5]=((((-1.0)*x2808))+(((-1.0)*x2810))+((r20*x2806))+((x2796*x2797))+(((-1.0)*x2796*x2800))+(((-1.0)*x2798*x2802))+((r21*x2801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2812=((1.0)*cj1);
IkReal x2813=(sj4*sj5);
IkReal x2814=(cj5*sj4);
IkReal x2815=((1.0)*sj1);
IkReal x2816=(sj1*x2814);
IkReal x2817=(cj4*x2815);
if( IKabs(((((-1.0)*r21*x2813*x2815))+(((-1.0)*r22*x2817))+(((-1.0)*cj4*r12*x2812))+((cj1*r10*x2814))+((r20*x2816))+(((-1.0)*r11*x2812*x2813)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x2817))+((cj1*cj4*r22))+((r10*x2816))+((cj1*r21*x2813))+(((-1.0)*r11*x2813*x2815))+(((-1.0)*r20*x2812*x2814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x2813*x2815))+(((-1.0)*r22*x2817))+(((-1.0)*cj4*r12*x2812))+((cj1*r10*x2814))+((r20*x2816))+(((-1.0)*r11*x2812*x2813))))+IKsqr(((((-1.0)*r12*x2817))+((cj1*cj4*r22))+((r10*x2816))+((cj1*r21*x2813))+(((-1.0)*r11*x2813*x2815))+(((-1.0)*r20*x2812*x2814))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x2813*x2815))+(((-1.0)*r22*x2817))+(((-1.0)*cj4*r12*x2812))+((cj1*r10*x2814))+((r20*x2816))+(((-1.0)*r11*x2812*x2813))), ((((-1.0)*r12*x2817))+((cj1*cj4*r22))+((r10*x2816))+((cj1*r21*x2813))+(((-1.0)*r11*x2813*x2815))+(((-1.0)*r20*x2812*x2814))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2818=IKcos(j2);
IkReal x2819=IKsin(j2);
IkReal x2820=(cj3*cj4);
IkReal x2821=(r21*sj5);
IkReal x2822=((1.0)*r22);
IkReal x2823=(cj5*r10);
IkReal x2824=(cj5*r20);
IkReal x2825=(cj5*sj3);
IkReal x2826=((1.0)*sj1);
IkReal x2827=(cj3*sj4);
IkReal x2828=(sj3*sj5);
IkReal x2829=(r11*sj5);
IkReal x2830=((1.0)*sj4);
IkReal x2831=((1.0)*r12);
IkReal x2832=((0.4)*sj1);
IkReal x2833=(cj1*x2818);
IkReal x2834=((0.4)*x2819);
IkReal x2835=(x2818*x2826);
IkReal x2836=((1.0)*cj1*x2819);
IkReal x2837=(x2836+x2835);
evalcond[0]=((((-1.0)*cj4*x2822))+(((-1.0)*x2821*x2830))+((sj4*x2824))+(((-1.0)*x2819*x2826))+x2833);
evalcond[1]=((((-1.0)*x2837))+(((-1.0)*cj4*x2831))+((sj4*x2823))+(((-1.0)*x2829*x2830)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x2832))+(((9.9e-7)*x2824))+(((0.4)*x2833))+(((-9.9e-7)*x2821))+(((-1.0)*pz))+(((-1.0)*x2819*x2832)));
evalcond[3]=((((-1.0)*cj1*x2834))+(((9.9e-7)*x2823))+(((1.93e-6)*sj1))+(((-9.9e-7)*x2829))+(((-1.0)*py))+(((-0.4)*cj1))+(((-1.0)*x2818*x2832)));
evalcond[4]=((((-1.0)*x2833))+((r10*x2828))+(((-1.0)*x2820*x2823))+((sj1*x2819))+(((-1.0)*x2827*x2831))+((r11*x2825))+((x2820*x2829)));
evalcond[5]=(((r20*x2828))+(((-1.0)*x2837))+(((-1.0)*x2820*x2824))+(((-1.0)*x2822*x2827))+((r21*x2825))+((x2820*x2821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2838=((1.0)*sj1);
IkReal x2839=(cj5*sj4);
IkReal x2840=(r20*sj0);
IkReal x2841=((1.0)*cj1);
IkReal x2842=(cj4*r12);
IkReal x2843=(cj4*r22*sj0);
IkReal x2844=(r11*sj4*sj5);
IkReal x2845=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x2846=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2846.valid){
continue;
}
CheckValue<IkReal> x2847 = IKatan2WithCheck(IkReal((((sj1*x2839*x2840))+(((-1.0)*r10*x2839*x2841))+(((-1.0)*x2838*x2843))+(((-1.0)*x2838*x2845))+((cj1*x2842))+((cj1*x2844)))),IkReal((((sj1*x2842))+((sj1*x2844))+(((-1.0)*x2839*x2840*x2841))+((cj1*x2845))+((cj1*x2843))+(((-1.0)*r10*x2838*x2839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2847.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2846.value)))+(x2847.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2848=IKsin(j2);
IkReal x2849=IKcos(j2);
IkReal x2850=((1.0)*cj3);
IkReal x2851=(cj5*r00);
IkReal x2852=(cj0*cj1);
IkReal x2853=(cj5*r10);
IkReal x2854=(r01*sj5);
IkReal x2855=((1.0)*sj4);
IkReal x2856=(cj5*sj3);
IkReal x2857=(cj1*sj0);
IkReal x2858=(sj3*sj5);
IkReal x2859=(cj5*r20);
IkReal x2860=((1.0)*cj4);
IkReal x2861=((1.93e-6)*sj1);
IkReal x2862=(r11*sj5);
IkReal x2863=(r21*sj5);
IkReal x2864=(cj1*x2849);
IkReal x2865=(cj3*cj4*sj5);
IkReal x2866=((0.4)*x2848);
IkReal x2867=(sj1*x2849);
IkReal x2868=((1.0)*sj1*x2848);
evalcond[0]=((((-1.0)*x2855*x2863))+(((-1.0)*r22*x2860))+(((-1.0)*x2868))+x2864+((sj4*x2859)));
evalcond[1]=((((-1.0)*r02*x2860))+((x2848*x2852))+(((-1.0)*x2854*x2855))+((cj0*x2867))+((sj4*x2851)));
evalcond[2]=((((-1.0)*r12*x2860))+(((-1.0)*x2855*x2862))+((x2848*x2857))+((sj0*x2867))+((sj4*x2853)));
evalcond[3]=((((-1.93e-6)*cj1))+(((0.4)*x2864))+(((-1.0)*sj1*x2866))+(((-1.0)*pz))+(((-9.9e-7)*x2863))+(((9.9e-7)*x2859))+(((-0.4)*sj1)));
evalcond[4]=(((x2852*x2866))+(((-9.9e-7)*x2854))+(((0.4)*x2852))+(((-1.0)*px))+(((0.4)*cj0*x2867))+(((9.9e-7)*x2851))+(((-1.0)*cj0*x2861)));
evalcond[5]=((((-1.0)*sj0*x2861))+((x2857*x2866))+(((0.4)*x2857))+(((-1.0)*py))+(((0.4)*sj0*x2867))+(((-9.9e-7)*x2862))+(((9.9e-7)*x2853)));
evalcond[6]=(((r21*x2856))+(((-1.0)*cj1*x2848))+((r20*x2858))+(((-1.0)*x2867))+(((-1.0)*r22*sj4*x2850))+((cj3*cj4*x2863))+(((-1.0)*cj4*x2850*x2859)));
evalcond[7]=(((x2849*x2852))+((cj3*cj4*x2854))+(((-1.0)*r02*sj4*x2850))+((r01*x2856))+((r00*x2858))+(((-1.0)*cj4*x2850*x2851))+(((-1.0)*cj0*x2868)));
evalcond[8]=((((-1.0)*sj0*x2868))+((r11*x2856))+((x2849*x2857))+(((-1.0)*r12*sj4*x2850))+((cj3*cj4*x2862))+(((-1.0)*cj4*x2850*x2853))+((r10*x2858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2869=((1.0)*cj0);
IkReal x2870=(cj4*r02);
IkReal x2871=(cj1*sj4);
IkReal x2872=(cj4*r22);
IkReal x2873=(cj5*r20);
IkReal x2874=(sj1*sj4);
IkReal x2875=(sj5*x2874);
IkReal x2876=((1.0)*cj5*r00);
CheckValue<IkReal> x2877 = IKatan2WithCheck(IkReal((((cj0*x2873*x2874))+(((-1.0)*x2871*x2876))+((cj1*x2870))+(((-1.0)*sj1*x2869*x2872))+((r01*sj5*x2871))+(((-1.0)*r21*x2869*x2875)))),IkReal((((cj0*cj1*x2872))+((r01*x2875))+((cj0*r21*sj5*x2871))+(((-1.0)*x2869*x2871*x2873))+(((-1.0)*x2874*x2876))+((sj1*x2870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2877.valid){
continue;
}
CheckValue<IkReal> x2878=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2878.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2877.value)+(((1.5707963267949)*(x2878.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2879=IKsin(j2);
IkReal x2880=IKcos(j2);
IkReal x2881=((1.0)*cj3);
IkReal x2882=(cj5*r00);
IkReal x2883=(cj0*cj1);
IkReal x2884=(cj5*r10);
IkReal x2885=(r01*sj5);
IkReal x2886=((1.0)*sj4);
IkReal x2887=(cj5*sj3);
IkReal x2888=(cj1*sj0);
IkReal x2889=(sj3*sj5);
IkReal x2890=(cj5*r20);
IkReal x2891=((1.0)*cj4);
IkReal x2892=((1.93e-6)*sj1);
IkReal x2893=(r11*sj5);
IkReal x2894=(r21*sj5);
IkReal x2895=(cj1*x2880);
IkReal x2896=(cj3*cj4*sj5);
IkReal x2897=((0.4)*x2879);
IkReal x2898=(sj1*x2880);
IkReal x2899=((1.0)*sj1*x2879);
evalcond[0]=((((-1.0)*r22*x2891))+(((-1.0)*x2899))+((sj4*x2890))+(((-1.0)*x2886*x2894))+x2895);
evalcond[1]=((((-1.0)*r02*x2891))+((cj0*x2898))+((x2879*x2883))+(((-1.0)*x2885*x2886))+((sj4*x2882)));
evalcond[2]=(((sj0*x2898))+((x2879*x2888))+((sj4*x2884))+(((-1.0)*x2886*x2893))+(((-1.0)*r12*x2891)));
evalcond[3]=((((-1.93e-6)*cj1))+(((9.9e-7)*x2890))+(((-1.0)*pz))+(((-1.0)*sj1*x2897))+(((0.4)*x2895))+(((-0.4)*sj1))+(((-9.9e-7)*x2894)));
evalcond[4]=((((9.9e-7)*x2882))+(((-9.9e-7)*x2885))+(((-1.0)*cj0*x2892))+(((-1.0)*px))+(((0.4)*x2883))+(((0.4)*cj0*x2898))+((x2883*x2897)));
evalcond[5]=((((9.9e-7)*x2884))+(((-1.0)*sj0*x2892))+(((0.4)*sj0*x2898))+((x2888*x2897))+(((-1.0)*py))+(((0.4)*x2888))+(((-9.9e-7)*x2893)));
evalcond[6]=(((r20*x2889))+(((-1.0)*r22*sj4*x2881))+((r21*x2887))+(((-1.0)*x2898))+((cj3*cj4*x2894))+(((-1.0)*cj1*x2879))+(((-1.0)*cj4*x2881*x2890)));
evalcond[7]=((((-1.0)*cj0*x2899))+(((-1.0)*r02*sj4*x2881))+((x2880*x2883))+((r00*x2889))+((r01*x2887))+((cj3*cj4*x2885))+(((-1.0)*cj4*x2881*x2882)));
evalcond[8]=((((-1.0)*sj0*x2899))+((x2880*x2888))+((r11*x2887))+(((-1.0)*r12*sj4*x2881))+((r10*x2889))+((cj3*cj4*x2893))+(((-1.0)*cj4*x2881*x2884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2900=((1.0)*cj0);
CheckValue<IkReal> x2901 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x2900))+(((-1.0)*r20*sj5*x2900)))),IkReal(((((-1.0)*cj4*r21*sj5*x2900))+((cj0*cj4*cj5*r20))+((cj0*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2901.valid){
continue;
}
CheckValue<IkReal> x2902=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5)))),-1);
if(!x2902.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2901.value)+(((1.5707963267949)*(x2902.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2903=IKsin(j3);
IkReal x2904=IKcos(j3);
IkReal x2905=((1.0)*cj5);
IkReal x2906=(cj4*x2903);
IkReal x2907=((1.0)*sj5*x2904);
IkReal x2908=((1.0)*sj4*x2903);
evalcond[0]=(((r21*sj5*x2906))+(((-1.0)*r20*x2905*x2906))+(((-1.0)*r21*x2904*x2905))+(((-1.0)*r22*x2908))+(((-1.0)*r20*x2907)));
evalcond[1]=((((-1.0)*r10*x2905*x2906))+(((-1.0)*r10*x2907))+(((-1.0)*r11*x2904*x2905))+cj0+((r11*sj5*x2906))+(((-1.0)*r12*x2908)));
evalcond[2]=((((-1.0)*r02*x2908))+(((-1.0)*sj0))+(((-1.0)*r01*x2904*x2905))+(((-1.0)*r00*x2905*x2906))+(((-1.0)*r00*x2907))+((r01*sj5*x2906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x2909=sj0*sj0;
j1eval[0]=x2909;
j1eval[1]=IKsign(x2909);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2910=cj0*cj0;
j1eval[0]=x2910;
j1eval[1]=IKsign(x2910);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=sj0;
j1eval[1]=IKsign(sj0);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2911=((4.82499999988767e-6)*sj4);
IkReal x2912=(r01*sj5);
IkReal x2913=((0.999999999976719)*cj4);
IkReal x2914=(cj5*r00);
IkReal x2915=(r21*sj5);
IkReal x2916=(cj5*r20);
IkReal x2917=((0.999999999976719)*sj4);
IkReal x2918=((4.82499999988767e-6)*cj4);
if( IKabs(((((1.1941874999722e-11)*x2914))+(((2.47499999994238e-6)*x2916))+(((-2.47499999994238e-6)*x2915))+(((-1.1941874999722e-11)*x2912))+(((-1.20624999997192e-5)*px))+((x2915*x2917))+((r02*x2918))+(((-1.0)*x2911*x2914))+((x2911*x2912))+(((-2.4999999999418)*pz))+((r22*x2913))+(((-1.0)*x2916*x2917)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2914*x2917))+(((1.1941874999722e-11)*x2916))+(((2.47499999994238e-6)*x2912))+(((2.4999999999418)*px))+(((-1.0)*x2912*x2917))+(((-2.47499999994238e-6)*x2914))+(((-1.1941874999722e-11)*x2915))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x2911*x2916))+((x2911*x2915))+(((-1.0)*r02*x2913))+((r22*x2918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.1941874999722e-11)*x2914))+(((2.47499999994238e-6)*x2916))+(((-2.47499999994238e-6)*x2915))+(((-1.1941874999722e-11)*x2912))+(((-1.20624999997192e-5)*px))+((x2915*x2917))+((r02*x2918))+(((-1.0)*x2911*x2914))+((x2911*x2912))+(((-2.4999999999418)*pz))+((r22*x2913))+(((-1.0)*x2916*x2917))))+IKsqr((((x2914*x2917))+(((1.1941874999722e-11)*x2916))+(((2.47499999994238e-6)*x2912))+(((2.4999999999418)*px))+(((-1.0)*x2912*x2917))+(((-2.47499999994238e-6)*x2914))+(((-1.1941874999722e-11)*x2915))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x2911*x2916))+((x2911*x2915))+(((-1.0)*r02*x2913))+((r22*x2918))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.1941874999722e-11)*x2914))+(((2.47499999994238e-6)*x2916))+(((-2.47499999994238e-6)*x2915))+(((-1.1941874999722e-11)*x2912))+(((-1.20624999997192e-5)*px))+((x2915*x2917))+((r02*x2918))+(((-1.0)*x2911*x2914))+((x2911*x2912))+(((-2.4999999999418)*pz))+((r22*x2913))+(((-1.0)*x2916*x2917))), (((x2914*x2917))+(((1.1941874999722e-11)*x2916))+(((2.47499999994238e-6)*x2912))+(((2.4999999999418)*px))+(((-1.0)*x2912*x2917))+(((-2.47499999994238e-6)*x2914))+(((-1.1941874999722e-11)*x2915))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x2911*x2916))+((x2911*x2915))+(((-1.0)*r02*x2913))+((r22*x2918))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2919=IKcos(j1);
IkReal x2920=IKsin(j1);
IkReal x2921=((0.4)*sj4);
IkReal x2922=(r21*sj5);
IkReal x2923=((0.4)*cj4);
IkReal x2924=(cj5*r20);
IkReal x2925=(r01*sj5);
IkReal x2926=(cj5*r00);
IkReal x2927=((9.9e-7)*x2925);
IkReal x2928=((1.93e-6)*x2920);
IkReal x2929=((0.4)*x2919);
IkReal x2930=((9.9e-7)*x2926);
IkReal x2931=((1.93e-6)*x2919);
IkReal x2932=((0.4)*x2920);
IkReal x2933=((9.9e-7)*x2922);
IkReal x2934=((9.9e-7)*x2924);
IkReal x2935=((0.4)*sj3*sj5);
IkReal x2936=((0.4)*cj5*sj3);
IkReal x2937=(x2930+x2929);
IkReal x2938=(px+x2928+x2927);
IkReal x2939=(x2932+x2933+x2931);
evalcond[0]=(((x2921*x2926))+(((-1.0)*r02*x2923))+(((-1.0)*x2921*x2925))+(((-1.0)*x2937))+x2938);
evalcond[1]=(((x2921*x2922))+((r22*x2923))+(((-1.0)*x2921*x2924))+(((-1.0)*x2939))+(((-1.0)*pz))+x2934);
evalcond[2]=((((-1.0)*r20*x2935))+(((-1.0)*cj3*x2922*x2923))+(((-1.0)*x2937))+((cj3*x2923*x2924))+x2938+(((-1.0)*r21*x2936))+((cj3*r22*x2921)));
evalcond[3]=((((-1.0)*cj3*x2923*x2926))+(((-1.0)*cj3*r02*x2921))+((r01*x2936))+((r00*x2935))+(((-1.0)*x2934))+((cj3*x2923*x2925))+pz+x2939);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2940=(cj4*sj1);
IkReal x2941=(cj1*sj4);
IkReal x2942=((1.0)*cj5);
IkReal x2943=(r21*sj5);
IkReal x2944=(cj1*cj4);
IkReal x2945=(sj1*sj4);
IkReal x2946=(r01*sj4*sj5);
if( IKabs(((((-1.0)*x2943*x2945))+(((-1.0)*r00*x2941*x2942))+((r02*x2944))+((r01*sj5*x2941))+(((-1.0)*r22*x2940))+((cj5*r20*x2945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x2942*x2945))+((x2941*x2943))+((r02*x2940))+((r01*sj5*x2945))+((r22*x2944))+(((-1.0)*r20*x2941*x2942)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2943*x2945))+(((-1.0)*r00*x2941*x2942))+((r02*x2944))+((r01*sj5*x2941))+(((-1.0)*r22*x2940))+((cj5*r20*x2945))))+IKsqr(((((-1.0)*r00*x2942*x2945))+((x2941*x2943))+((r02*x2940))+((r01*sj5*x2945))+((r22*x2944))+(((-1.0)*r20*x2941*x2942))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2943*x2945))+(((-1.0)*r00*x2941*x2942))+((r02*x2944))+((r01*sj5*x2941))+(((-1.0)*r22*x2940))+((cj5*r20*x2945))), ((((-1.0)*r00*x2942*x2945))+((x2941*x2943))+((r02*x2940))+((r01*sj5*x2945))+((r22*x2944))+(((-1.0)*r20*x2941*x2942))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2947=IKcos(j2);
IkReal x2948=IKsin(j2);
IkReal x2949=((1.0)*cj3);
IkReal x2950=(cj5*r00);
IkReal x2951=((1.0)*cj4);
IkReal x2952=(r01*sj5);
IkReal x2953=((1.0)*sj4);
IkReal x2954=(cj5*sj3);
IkReal x2955=(cj5*r20);
IkReal x2956=(sj3*sj5);
IkReal x2957=(r21*sj5);
IkReal x2958=(cj1*x2947);
IkReal x2959=(cj3*cj4*sj5);
IkReal x2960=(cj1*x2948);
IkReal x2961=(sj1*x2948);
IkReal x2962=(sj1*x2947);
IkReal x2963=((1.0)*x2961);
evalcond[0]=((((-1.0)*r02*x2951))+(((-1.0)*x2952*x2953))+((sj4*x2950))+x2960+x2962);
evalcond[1]=((((-1.0)*x2953*x2957))+(((-1.0)*x2963))+(((-1.0)*r22*x2951))+((sj4*x2955))+x2958);
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x2957))+(((-0.4)*x2961))+(((-1.0)*pz))+(((9.9e-7)*x2955))+(((0.4)*x2958))+(((-0.4)*sj1)));
evalcond[3]=((((-9.9e-7)*x2952))+(((0.4)*cj1))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((9.9e-7)*x2950))+(((0.4)*x2960))+(((0.4)*x2962)));
evalcond[4]=((((-1.0)*r02*sj4*x2949))+((r01*x2954))+((r00*x2956))+(((-1.0)*x2963))+(((-1.0)*cj4*x2949*x2950))+((cj3*cj4*x2952))+x2958);
evalcond[5]=((((-1.0)*r22*sj4*x2949))+(((-1.0)*x2962))+(((-1.0)*x2960))+((r21*x2954))+(((-1.0)*cj4*x2949*x2955))+((r20*x2956))+((cj3*cj4*x2957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2964=((4.82499999988767e-6)*sj4);
IkReal x2965=(r01*sj5);
IkReal x2966=((0.999999999976719)*cj4);
IkReal x2967=(cj5*r00);
IkReal x2968=(r21*sj5);
IkReal x2969=(cj5*r20);
IkReal x2970=((0.999999999976719)*sj4);
IkReal x2971=((4.82499999988767e-6)*cj4);
if( IKabs(((((-1.0)*r02*x2971))+((r22*x2966))+((x2968*x2970))+(((-1.0)*x2969*x2970))+(((1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x2969))+(((-1.0)*x2964*x2965))+(((1.1941874999722e-11)*x2965))+(((-2.47499999994238e-6)*x2968))+(((-1.1941874999722e-11)*x2967))+((x2964*x2967))+(((-2.4999999999418)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x2966))+(((-1.20624999997192e-5)*pz))+((r22*x2971))+(((2.47499999994238e-6)*x2967))+(((-1.0)*x2964*x2969))+(((-1.0)*x2967*x2970))+(((1.1941874999722e-11)*x2969))+(((-2.47499999994238e-6)*x2965))+(((-1.1941874999722e-11)*x2968))+((x2965*x2970))+((x2964*x2968))+(((-2.4999999999418)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x2971))+((r22*x2966))+((x2968*x2970))+(((-1.0)*x2969*x2970))+(((1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x2969))+(((-1.0)*x2964*x2965))+(((1.1941874999722e-11)*x2965))+(((-2.47499999994238e-6)*x2968))+(((-1.1941874999722e-11)*x2967))+((x2964*x2967))+(((-2.4999999999418)*pz))))+IKsqr((((r02*x2966))+(((-1.20624999997192e-5)*pz))+((r22*x2971))+(((2.47499999994238e-6)*x2967))+(((-1.0)*x2964*x2969))+(((-1.0)*x2967*x2970))+(((1.1941874999722e-11)*x2969))+(((-2.47499999994238e-6)*x2965))+(((-1.1941874999722e-11)*x2968))+((x2965*x2970))+((x2964*x2968))+(((-2.4999999999418)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x2971))+((r22*x2966))+((x2968*x2970))+(((-1.0)*x2969*x2970))+(((1.20624999997192e-5)*px))+(((2.47499999994238e-6)*x2969))+(((-1.0)*x2964*x2965))+(((1.1941874999722e-11)*x2965))+(((-2.47499999994238e-6)*x2968))+(((-1.1941874999722e-11)*x2967))+((x2964*x2967))+(((-2.4999999999418)*pz))), (((r02*x2966))+(((-1.20624999997192e-5)*pz))+((r22*x2971))+(((2.47499999994238e-6)*x2967))+(((-1.0)*x2964*x2969))+(((-1.0)*x2967*x2970))+(((1.1941874999722e-11)*x2969))+(((-2.47499999994238e-6)*x2965))+(((-1.1941874999722e-11)*x2968))+((x2965*x2970))+((x2964*x2968))+(((-2.4999999999418)*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2972=IKcos(j1);
IkReal x2973=IKsin(j1);
IkReal x2974=((1.0)*pz);
IkReal x2975=((0.4)*sj4);
IkReal x2976=(r21*sj5);
IkReal x2977=((0.4)*cj4);
IkReal x2978=(cj5*r20);
IkReal x2979=(r01*sj5);
IkReal x2980=(cj5*r00);
IkReal x2981=((0.4)*x2972);
IkReal x2982=((9.9e-7)*x2979);
IkReal x2983=((9.9e-7)*x2980);
IkReal x2984=((1.93e-6)*x2973);
IkReal x2985=((9.9e-7)*x2978);
IkReal x2986=((1.93e-6)*x2972);
IkReal x2987=((0.4)*x2973);
IkReal x2988=((9.9e-7)*x2976);
IkReal x2989=((0.4)*sj3*sj5);
IkReal x2990=((0.4)*cj5*sj3);
IkReal x2991=(x2982+x2981);
IkReal x2992=(x2983+x2984);
IkReal x2993=(x2988+x2987+x2986+x2974);
evalcond[0]=((((-1.0)*x2991))+((r02*x2977))+((x2975*x2979))+(((-1.0)*px))+x2992+(((-1.0)*x2975*x2980)));
evalcond[1]=((((-1.0)*x2993))+(((-1.0)*x2975*x2978))+((x2975*x2976))+((r22*x2977))+x2985);
evalcond[2]=((((-1.0)*x2992))+((cj3*x2976*x2977))+((r20*x2989))+px+(((-1.0)*cj3*r22*x2975))+((r21*x2990))+(((-1.0)*cj3*x2977*x2978))+x2991);
evalcond[3]=((((-1.0)*x2993))+(((-1.0)*cj3*x2977*x2980))+((r01*x2990))+((cj3*x2977*x2979))+((r00*x2989))+(((-1.0)*cj3*r02*x2975))+x2985);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2994=((1.0)*r01);
IkReal x2995=(sj1*sj4);
IkReal x2996=(cj5*r00);
IkReal x2997=(cj1*cj4);
IkReal x2998=(cj5*r20);
IkReal x2999=(cj1*sj4);
IkReal x3000=(sj5*x2999);
IkReal x3001=((1.0)*cj4*sj1);
if( IKabs((((x2995*x2998))+((x2996*x2999))+(((-1.0)*r22*x3001))+(((-1.0)*r21*sj5*x2995))+(((-1.0)*x2994*x3000))+(((-1.0)*r02*x2997)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x2994*x2995))+((x2995*x2996))+(((-1.0)*r02*x3001))+(((-1.0)*x2998*x2999))+((r21*x3000))+((r22*x2997)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2995*x2998))+((x2996*x2999))+(((-1.0)*r22*x3001))+(((-1.0)*r21*sj5*x2995))+(((-1.0)*x2994*x3000))+(((-1.0)*r02*x2997))))+IKsqr(((((-1.0)*sj5*x2994*x2995))+((x2995*x2996))+(((-1.0)*r02*x3001))+(((-1.0)*x2998*x2999))+((r21*x3000))+((r22*x2997))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2995*x2998))+((x2996*x2999))+(((-1.0)*r22*x3001))+(((-1.0)*r21*sj5*x2995))+(((-1.0)*x2994*x3000))+(((-1.0)*r02*x2997))), ((((-1.0)*sj5*x2994*x2995))+((x2995*x2996))+(((-1.0)*r02*x3001))+(((-1.0)*x2998*x2999))+((r21*x3000))+((r22*x2997))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3002=IKcos(j2);
IkReal x3003=IKsin(j2);
IkReal x3004=((1.0)*cj3);
IkReal x3005=(cj5*r00);
IkReal x3006=((1.0)*cj4);
IkReal x3007=(r01*sj5);
IkReal x3008=((1.0)*sj4);
IkReal x3009=(cj5*sj3);
IkReal x3010=(cj5*r20);
IkReal x3011=((1.0)*sj1);
IkReal x3012=(sj3*sj5);
IkReal x3013=((0.4)*sj1);
IkReal x3014=(r21*sj5);
IkReal x3015=(cj1*x3002);
IkReal x3016=(cj3*cj4*sj5);
IkReal x3017=((0.4)*x3003);
IkReal x3018=(x3002*x3011);
IkReal x3019=((1.0)*cj1*x3003);
IkReal x3020=(x3018+x3019);
evalcond[0]=((((-1.0)*r22*x3006))+(((-1.0)*x3003*x3011))+x3015+(((-1.0)*x3008*x3014))+((sj4*x3010)));
evalcond[1]=((((-1.0)*x3020))+(((-1.0)*r02*x3006))+(((-1.0)*x3007*x3008))+((sj4*x3005)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x3003*x3013))+(((-9.9e-7)*x3014))+(((0.4)*x3015))+(((-1.0)*x3013))+(((-1.0)*pz))+(((9.9e-7)*x3010)));
evalcond[3]=((((-9.9e-7)*x3007))+(((-1.0)*x3002*x3013))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-1.0)*cj1*x3017))+(((9.9e-7)*x3005))+(((-0.4)*cj1)));
evalcond[4]=(((r00*x3012))+((r01*x3009))+(((-1.0)*cj4*x3004*x3005))+((sj1*x3003))+(((-1.0)*r02*sj4*x3004))+((cj3*cj4*x3007))+(((-1.0)*x3015)));
evalcond[5]=((((-1.0)*cj4*x3004*x3010))+(((-1.0)*r22*sj4*x3004))+(((-1.0)*x3020))+((r20*x3012))+((r21*x3009))+((cj3*cj4*x3014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3021=((4.82499999988767e-6)*sj4);
IkReal x3022=(cj5*r20);
IkReal x3023=(r11*sj5);
IkReal x3024=(r21*sj5);
IkReal x3025=(cj5*r10);
IkReal x3026=((0.999999999976719)*sj4);
IkReal x3027=((4.82499999988767e-6)*cj4);
IkReal x3028=((0.999999999976719)*cj4);
if( IKabs(((((-2.47499999994238e-6)*x3024))+((r12*x3027))+(((-1.0)*x3021*x3025))+((x3021*x3023))+(((-1.20624999997192e-5)*py))+(((-1.1941874999722e-11)*x3023))+((r22*x3028))+(((-1.0)*x3022*x3026))+((x3024*x3026))+(((2.47499999994238e-6)*x3022))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x3025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.47499999994238e-6)*x3025))+(((-1.0)*r12*x3028))+(((2.4999999999418)*py))+(((-1.0)*x3021*x3022))+((x3021*x3024))+(((-1.20624999997192e-5)*pz))+(((-1.1941874999722e-11)*x3024))+((r22*x3027))+((x3025*x3026))+(((-1.0)*x3023*x3026))+(((2.47499999994238e-6)*x3023))+(((1.1941874999722e-11)*x3022)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.47499999994238e-6)*x3024))+((r12*x3027))+(((-1.0)*x3021*x3025))+((x3021*x3023))+(((-1.20624999997192e-5)*py))+(((-1.1941874999722e-11)*x3023))+((r22*x3028))+(((-1.0)*x3022*x3026))+((x3024*x3026))+(((2.47499999994238e-6)*x3022))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x3025))))+IKsqr(((((-2.47499999994238e-6)*x3025))+(((-1.0)*r12*x3028))+(((2.4999999999418)*py))+(((-1.0)*x3021*x3022))+((x3021*x3024))+(((-1.20624999997192e-5)*pz))+(((-1.1941874999722e-11)*x3024))+((r22*x3027))+((x3025*x3026))+(((-1.0)*x3023*x3026))+(((2.47499999994238e-6)*x3023))+(((1.1941874999722e-11)*x3022))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.47499999994238e-6)*x3024))+((r12*x3027))+(((-1.0)*x3021*x3025))+((x3021*x3023))+(((-1.20624999997192e-5)*py))+(((-1.1941874999722e-11)*x3023))+((r22*x3028))+(((-1.0)*x3022*x3026))+((x3024*x3026))+(((2.47499999994238e-6)*x3022))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x3025))), ((((-2.47499999994238e-6)*x3025))+(((-1.0)*r12*x3028))+(((2.4999999999418)*py))+(((-1.0)*x3021*x3022))+((x3021*x3024))+(((-1.20624999997192e-5)*pz))+(((-1.1941874999722e-11)*x3024))+((r22*x3027))+((x3025*x3026))+(((-1.0)*x3023*x3026))+(((2.47499999994238e-6)*x3023))+(((1.1941874999722e-11)*x3022))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x3029=IKcos(j1);
IkReal x3030=IKsin(j1);
IkReal x3031=((0.4)*sj4);
IkReal x3032=(r21*sj5);
IkReal x3033=(cj5*r10);
IkReal x3034=((0.4)*cj4);
IkReal x3035=(cj5*r20);
IkReal x3036=((0.4)*sj3);
IkReal x3037=(r11*sj5);
IkReal x3038=((1.93e-6)*x3030);
IkReal x3039=((9.9e-7)*x3037);
IkReal x3040=((0.4)*x3029);
IkReal x3041=((9.9e-7)*x3033);
IkReal x3042=((1.93e-6)*x3029);
IkReal x3043=((0.4)*x3030);
IkReal x3044=((9.9e-7)*x3032);
IkReal x3045=((9.9e-7)*x3035);
IkReal x3046=(x3041+x3040);
IkReal x3047=(x3038+x3039+py);
IkReal x3048=(x3043+x3042+x3044);
evalcond[0]=(x3047+(((-1.0)*x3046))+(((-1.0)*r12*x3034))+((x3031*x3033))+(((-1.0)*x3031*x3037)));
evalcond[1]=(x3045+(((-1.0)*x3048))+(((-1.0)*pz))+((r22*x3034))+((x3031*x3032))+(((-1.0)*x3031*x3035)));
evalcond[2]=(((cj3*r22*x3031))+x3047+((cj3*x3034*x3035))+(((-1.0)*x3046))+(((-1.0)*cj3*x3032*x3034))+(((-1.0)*cj5*r21*x3036))+(((-1.0)*r20*sj5*x3036)));
evalcond[3]=(((cj5*r11*x3036))+x3048+((cj3*x3034*x3037))+(((-1.0)*x3045))+(((-1.0)*cj3*x3033*x3034))+pz+(((-1.0)*cj3*r12*x3031))+((r10*sj5*x3036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3049=(cj4*r12);
IkReal x3050=(cj4*r22);
IkReal x3051=(cj1*sj4);
IkReal x3052=(r11*sj5);
IkReal x3053=(r21*sj5);
IkReal x3054=((1.0)*sj1);
IkReal x3055=(sj1*sj4);
IkReal x3056=(cj5*r20);
IkReal x3057=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*x3051*x3057))+((x3051*x3052))+((cj1*x3049))+(((-1.0)*sj4*x3053*x3054))+(((-1.0)*x3050*x3054))+((x3055*x3056)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x3050))+(((-1.0)*cj5*r10*sj4*x3054))+((x3051*x3053))+((x3052*x3055))+((sj1*x3049))+(((-1.0)*x3051*x3056)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3051*x3057))+((x3051*x3052))+((cj1*x3049))+(((-1.0)*sj4*x3053*x3054))+(((-1.0)*x3050*x3054))+((x3055*x3056))))+IKsqr((((cj1*x3050))+(((-1.0)*cj5*r10*sj4*x3054))+((x3051*x3053))+((x3052*x3055))+((sj1*x3049))+(((-1.0)*x3051*x3056))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3051*x3057))+((x3051*x3052))+((cj1*x3049))+(((-1.0)*sj4*x3053*x3054))+(((-1.0)*x3050*x3054))+((x3055*x3056))), (((cj1*x3050))+(((-1.0)*cj5*r10*sj4*x3054))+((x3051*x3053))+((x3052*x3055))+((sj1*x3049))+(((-1.0)*x3051*x3056))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3058=IKcos(j2);
IkReal x3059=IKsin(j2);
IkReal x3060=(cj3*cj4);
IkReal x3061=(r21*sj5);
IkReal x3062=((1.0)*r22);
IkReal x3063=(cj5*r10);
IkReal x3064=(cj5*r20);
IkReal x3065=(cj5*sj3);
IkReal x3066=(cj3*sj4);
IkReal x3067=(r11*sj5);
IkReal x3068=((1.0)*sj4);
IkReal x3069=((1.0)*r12);
IkReal x3070=(sj3*sj5);
IkReal x3071=(cj1*x3058);
IkReal x3072=(cj1*x3059);
IkReal x3073=(sj1*x3059);
IkReal x3074=(sj1*x3058);
IkReal x3075=((1.0)*x3073);
evalcond[0]=((((-1.0)*x3067*x3068))+x3072+x3074+((sj4*x3063))+(((-1.0)*cj4*x3069)));
evalcond[1]=(x3071+(((-1.0)*x3061*x3068))+(((-1.0)*x3075))+((sj4*x3064))+(((-1.0)*cj4*x3062)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x3061))+(((0.4)*x3071))+(((9.9e-7)*x3064))+(((-0.4)*x3073))+(((-1.0)*pz))+(((-0.4)*sj1)));
evalcond[3]=((((-9.9e-7)*x3067))+(((0.4)*cj1))+(((0.4)*x3074))+(((0.4)*x3072))+(((9.9e-7)*x3063))+(((-1.0)*py))+(((-1.93e-6)*sj1)));
evalcond[4]=((((-1.0)*x3066*x3069))+x3071+(((-1.0)*x3060*x3063))+((r10*x3070))+(((-1.0)*x3075))+((r11*x3065))+((x3060*x3067)));
evalcond[5]=((((-1.0)*x3072))+(((-1.0)*x3074))+(((-1.0)*x3062*x3066))+(((-1.0)*x3060*x3064))+((r20*x3070))+((x3060*x3061))+((r21*x3065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3076=((4.82499999988767e-6)*sj4);
IkReal x3077=(cj5*r20);
IkReal x3078=(r11*sj5);
IkReal x3079=(r21*sj5);
IkReal x3080=(cj5*r10);
IkReal x3081=((0.999999999976719)*sj4);
IkReal x3082=((4.82499999988767e-6)*cj4);
IkReal x3083=((0.999999999976719)*cj4);
if( IKabs(((((1.1941874999722e-11)*x3078))+(((2.47499999994238e-6)*x3077))+(((-1.0)*x3077*x3081))+(((-1.1941874999722e-11)*x3080))+(((1.20624999997192e-5)*py))+(((-2.47499999994238e-6)*x3079))+((x3079*x3081))+((r22*x3083))+(((-1.0)*x3076*x3078))+((x3076*x3080))+(((-2.4999999999418)*pz))+(((-1.0)*r12*x3082)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3080*x3081))+((r12*x3083))+((x3076*x3079))+(((1.1941874999722e-11)*x3077))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x3078))+(((2.47499999994238e-6)*x3080))+((r22*x3082))+(((-1.0)*x3076*x3077))+(((-2.4999999999418)*py))+(((-1.1941874999722e-11)*x3079))+((x3078*x3081)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.1941874999722e-11)*x3078))+(((2.47499999994238e-6)*x3077))+(((-1.0)*x3077*x3081))+(((-1.1941874999722e-11)*x3080))+(((1.20624999997192e-5)*py))+(((-2.47499999994238e-6)*x3079))+((x3079*x3081))+((r22*x3083))+(((-1.0)*x3076*x3078))+((x3076*x3080))+(((-2.4999999999418)*pz))+(((-1.0)*r12*x3082))))+IKsqr(((((-1.0)*x3080*x3081))+((r12*x3083))+((x3076*x3079))+(((1.1941874999722e-11)*x3077))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x3078))+(((2.47499999994238e-6)*x3080))+((r22*x3082))+(((-1.0)*x3076*x3077))+(((-2.4999999999418)*py))+(((-1.1941874999722e-11)*x3079))+((x3078*x3081))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.1941874999722e-11)*x3078))+(((2.47499999994238e-6)*x3077))+(((-1.0)*x3077*x3081))+(((-1.1941874999722e-11)*x3080))+(((1.20624999997192e-5)*py))+(((-2.47499999994238e-6)*x3079))+((x3079*x3081))+((r22*x3083))+(((-1.0)*x3076*x3078))+((x3076*x3080))+(((-2.4999999999418)*pz))+(((-1.0)*r12*x3082))), ((((-1.0)*x3080*x3081))+((r12*x3083))+((x3076*x3079))+(((1.1941874999722e-11)*x3077))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x3078))+(((2.47499999994238e-6)*x3080))+((r22*x3082))+(((-1.0)*x3076*x3077))+(((-2.4999999999418)*py))+(((-1.1941874999722e-11)*x3079))+((x3078*x3081))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x3084=IKcos(j1);
IkReal x3085=IKsin(j1);
IkReal x3086=((1.0)*pz);
IkReal x3087=((0.4)*sj4);
IkReal x3088=(r21*sj5);
IkReal x3089=(cj5*r10);
IkReal x3090=((0.4)*cj4);
IkReal x3091=(cj5*r20);
IkReal x3092=((0.4)*sj3);
IkReal x3093=(r11*sj5);
IkReal x3094=((0.4)*x3084);
IkReal x3095=((9.9e-7)*x3093);
IkReal x3096=((9.9e-7)*x3089);
IkReal x3097=((1.93e-6)*x3085);
IkReal x3098=((9.9e-7)*x3091);
IkReal x3099=((1.93e-6)*x3084);
IkReal x3100=((0.4)*x3085);
IkReal x3101=((9.9e-7)*x3088);
IkReal x3102=(x3096+x3097);
IkReal x3103=(x3094+x3095);
IkReal x3104=(x3100+x3101+x3086+x3099);
evalcond[0]=(x3102+((x3087*x3093))+(((-1.0)*x3103))+(((-1.0)*py))+(((-1.0)*x3087*x3089))+((r12*x3090)));
evalcond[1]=(x3098+(((-1.0)*x3104))+((x3087*x3088))+(((-1.0)*x3087*x3091))+((r22*x3090)));
evalcond[2]=(x3103+((cj3*x3088*x3090))+((cj5*r21*x3092))+(((-1.0)*x3102))+(((-1.0)*cj3*x3090*x3091))+py+((r20*sj5*x3092))+(((-1.0)*cj3*r22*x3087)));
evalcond[3]=(((r10*sj5*x3092))+x3098+(((-1.0)*cj3*r12*x3087))+(((-1.0)*x3104))+((cj5*r11*x3092))+((cj3*x3090*x3093))+(((-1.0)*cj3*x3089*x3090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3105=((1.0)*cj1);
IkReal x3106=(sj4*sj5);
IkReal x3107=(cj5*sj4);
IkReal x3108=((1.0)*sj1);
IkReal x3109=(sj1*x3107);
IkReal x3110=(cj4*x3108);
if( IKabs(((((-1.0)*r11*x3105*x3106))+(((-1.0)*cj4*r12*x3105))+((cj1*r10*x3107))+(((-1.0)*r21*x3106*x3108))+(((-1.0)*r22*x3110))+((r20*x3109)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r12*x3110))+(((-1.0)*r11*x3106*x3108))+((r10*x3109))+((cj1*r21*x3106))+(((-1.0)*r20*x3105*x3107)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x3105*x3106))+(((-1.0)*cj4*r12*x3105))+((cj1*r10*x3107))+(((-1.0)*r21*x3106*x3108))+(((-1.0)*r22*x3110))+((r20*x3109))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r12*x3110))+(((-1.0)*r11*x3106*x3108))+((r10*x3109))+((cj1*r21*x3106))+(((-1.0)*r20*x3105*x3107))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x3105*x3106))+(((-1.0)*cj4*r12*x3105))+((cj1*r10*x3107))+(((-1.0)*r21*x3106*x3108))+(((-1.0)*r22*x3110))+((r20*x3109))), (((cj1*cj4*r22))+(((-1.0)*r12*x3110))+(((-1.0)*r11*x3106*x3108))+((r10*x3109))+((cj1*r21*x3106))+(((-1.0)*r20*x3105*x3107))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3111=IKcos(j2);
IkReal x3112=IKsin(j2);
IkReal x3113=(cj3*cj4);
IkReal x3114=(r21*sj5);
IkReal x3115=((1.0)*r22);
IkReal x3116=(cj5*r10);
IkReal x3117=(cj5*r20);
IkReal x3118=(cj5*sj3);
IkReal x3119=((1.0)*sj1);
IkReal x3120=(cj3*sj4);
IkReal x3121=(sj3*sj5);
IkReal x3122=(r11*sj5);
IkReal x3123=((1.0)*sj4);
IkReal x3124=((1.0)*r12);
IkReal x3125=((0.4)*sj1);
IkReal x3126=(cj1*x3111);
IkReal x3127=((0.4)*x3112);
IkReal x3128=(x3111*x3119);
IkReal x3129=((1.0)*cj1*x3112);
IkReal x3130=(x3128+x3129);
evalcond[0]=(x3126+(((-1.0)*x3114*x3123))+((sj4*x3117))+(((-1.0)*x3112*x3119))+(((-1.0)*cj4*x3115)));
evalcond[1]=((((-1.0)*cj4*x3124))+(((-1.0)*x3122*x3123))+((sj4*x3116))+(((-1.0)*x3130)));
evalcond[2]=((((9.9e-7)*x3117))+(((-1.93e-6)*cj1))+(((-1.0)*x3112*x3125))+(((0.4)*x3126))+(((-1.0)*pz))+(((-1.0)*x3125))+(((-9.9e-7)*x3114)));
evalcond[3]=((((9.9e-7)*x3116))+(((-9.9e-7)*x3122))+(((1.93e-6)*sj1))+(((-1.0)*x3111*x3125))+(((-1.0)*py))+(((-1.0)*cj1*x3127))+(((-0.4)*cj1)));
evalcond[4]=(((sj1*x3112))+(((-1.0)*x3126))+((r10*x3121))+(((-1.0)*x3113*x3116))+((x3113*x3122))+(((-1.0)*x3120*x3124))+((r11*x3118)));
evalcond[5]=(((r20*x3121))+(((-1.0)*x3115*x3120))+((x3113*x3114))+((r21*x3118))+(((-1.0)*x3113*x3117))+(((-1.0)*x3130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3131=(cj5*r10);
IkReal x3132=((0.4)*sj4);
IkReal x3133=(r21*sj5);
IkReal x3134=(cj5*r21);
IkReal x3135=(r11*sj5);
IkReal x3136=(r20*sj5);
IkReal x3137=(cj5*r20);
IkReal x3138=((7720000000.0)*sj0);
IkReal x3139=(cj3*cj4);
IkReal x3140=((1.6e+15)*sj0);
IkReal x3141=(cj3*r22*sj4);
IkReal x3142=((-1.6e+15)*sj0*sj3);
IkReal x3143=((((-9.9e-7)*x3133))+((x3132*x3133))+(((-1.0)*x3132*x3137))+(((-1.0)*pz))+(((0.4)*cj4*r22))+(((9.9e-7)*x3137)));
IkReal x3144=(sj0*x3143);
CheckValue<IkReal> x3145 = IKatan2WithCheck(IkReal((((x3133*x3138*x3139))+((sj3*x3134*x3138))+((sj3*x3136*x3138))+(((-19107.0)*x3135))+(((-1.0)*x3138*x3141))+(((-19300000000.0)*py))+(((19107.0)*x3131))+(((-1.0)*x3137*x3138*x3139))+(((4.0e+15)*x3144)))),IkReal(((((-1.6e+15)*sj0*x3133*x3139))+(((-3960000000.0)*x3131))+(((3960000000.0)*x3135))+(((4.0e+15)*py))+((x3140*x3141))+((x3134*x3142))+(((19300000000.0)*x3144))+((x3136*x3142))+((x3137*x3139*x3140)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3145.valid){
continue;
}
CheckValue<IkReal> x3146=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x3146.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3145.value)+(((1.5707963267949)*(x3146.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x3147=IKsin(j1);
IkReal x3148=sj0*sj0;
IkReal x3149=IKcos(j1);
IkReal x3150=cj0*cj0;
IkReal x3151=((0.4)*cj5);
IkReal x3152=(r21*sj0);
IkReal x3153=((0.4)*sj4);
IkReal x3154=(r21*sj5);
IkReal x3155=(cj3*r22);
IkReal x3156=(r11*sj5);
IkReal x3157=((9.9e-7)*cj0);
IkReal x3158=((0.4)*cj4);
IkReal x3159=(cj3*cj4);
IkReal x3160=(cj5*r00);
IkReal x3161=(r01*sj5);
IkReal x3162=(r20*sj0);
IkReal x3163=(r00*sj4);
IkReal x3164=((9.9e-7)*cj5);
IkReal x3165=(cj0*sj0);
IkReal x3166=((9.9e-7)*sj0);
IkReal x3167=(r10*sj4);
IkReal x3168=((0.4)*x3149);
IkReal x3169=(r20*x3159);
IkReal x3170=((1.93e-6)*x3147);
IkReal x3171=(r10*x3164);
IkReal x3172=((1.93e-6)*x3149);
IkReal x3173=((0.4)*sj3*sj5);
IkReal x3174=((0.4)*x3147);
IkReal x3175=(x3165*x3170);
IkReal x3176=(x3165*x3168);
evalcond[0]=(((r22*x3158))+(((-1.0)*r20*sj4*x3151))+((r20*x3164))+((x3153*x3154))+(((-1.0)*x3172))+(((-1.0)*x3174))+(((-1.0)*pz))+(((-9.9e-7)*x3154)));
evalcond[1]=(((x3148*x3170))+(((-1.0)*r12*sj0*x3158))+((x3156*x3166))+(((-1.0)*sj0*x3153*x3156))+(((-1.0)*sj0*x3171))+((py*sj0))+((sj0*x3151*x3167))+(((-1.0)*x3148*x3168)));
evalcond[2]=((((-1.0)*x3157*x3160))+(((-1.0)*x3150*x3168))+((cj0*x3151*x3163))+(((-1.0)*cj0*x3153*x3161))+(((-1.0)*cj0*r02*x3158))+((x3150*x3170))+((x3157*x3161))+((cj0*px)));
evalcond[3]=(((cj3*x3156*x3158))+((sj0*x3174))+((sj0*x3172))+(((-1.0)*x3162*x3164))+((r10*x3173))+(((9.9e-7)*sj5*x3152))+(((-1.0)*r10*x3151*x3159))+(((-1.0)*cj3*r12*x3153))+((pz*sj0))+((r11*sj3*x3151)));
evalcond[4]=((((-1.0)*cj5*r20*x3157))+((r01*sj3*x3151))+(((-1.0)*r00*x3151*x3159))+((x3154*x3157))+((cj3*x3158*x3161))+((cj0*x3172))+((cj0*x3174))+((r00*x3173))+((cj0*pz))+(((-1.0)*cj3*r02*x3153)));
evalcond[5]=((((-1.0)*x3162*x3173))+((sj0*x3170))+(((-1.0)*sj3*x3151*x3152))+(((-1.0)*sj0*x3168))+(((9.9e-7)*x3156))+((sj0*x3153*x3155))+(((-1.0)*x3171))+py+(((-1.0)*cj3*sj5*x3152*x3158))+((x3151*x3159*x3162)));
evalcond[6]=(((cj0*x3151*x3169))+(((-1.0)*cj0*cj3*x3154*x3158))+(((-1.0)*cj0*r21*sj3*x3151))+(((9.9e-7)*x3161))+((cj0*x3170))+(((-9.9e-7)*x3160))+px+(((-1.0)*cj0*r20*x3173))+(((-1.0)*cj0*x3168))+((cj0*x3153*x3155)));
evalcond[7]=(x3175+((cj0*x3151*x3167))+(((-1.0)*x3160*x3166))+(((-1.0)*x3176))+((px*sj0))+((x3161*x3166))+(((-1.0)*cj0*x3153*x3156))+(((-1.0)*cj0*r12*x3158)));
evalcond[8]=(x3175+(((-1.0)*r02*sj0*x3158))+(((-1.0)*x3176))+((x3156*x3157))+(((-1.0)*cj5*r10*x3157))+(((-1.0)*sj0*x3153*x3161))+((cj0*py))+((sj0*x3151*x3163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3177=(cj4*sj1);
IkReal x3178=(cj1*sj4);
IkReal x3179=((1.0)*cj5);
IkReal x3180=(r21*sj5);
IkReal x3181=(cj1*cj4);
IkReal x3182=(sj1*sj4);
IkReal x3183=(r01*sj4*sj5);
if( IKabs((((r01*sj5*x3178))+(((-1.0)*x3180*x3182))+((cj5*r20*x3182))+(((-1.0)*r00*x3178*x3179))+(((-1.0)*r22*x3177))+((r02*x3181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x3181))+(((-1.0)*r20*x3178*x3179))+((x3178*x3180))+(((-1.0)*r00*x3179*x3182))+((r02*x3177))+((r01*sj5*x3182)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj5*x3178))+(((-1.0)*x3180*x3182))+((cj5*r20*x3182))+(((-1.0)*r00*x3178*x3179))+(((-1.0)*r22*x3177))+((r02*x3181))))+IKsqr((((r22*x3181))+(((-1.0)*r20*x3178*x3179))+((x3178*x3180))+(((-1.0)*r00*x3179*x3182))+((r02*x3177))+((r01*sj5*x3182))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj5*x3178))+(((-1.0)*x3180*x3182))+((cj5*r20*x3182))+(((-1.0)*r00*x3178*x3179))+(((-1.0)*r22*x3177))+((r02*x3181))), (((r22*x3181))+(((-1.0)*r20*x3178*x3179))+((x3178*x3180))+(((-1.0)*r00*x3179*x3182))+((r02*x3177))+((r01*sj5*x3182))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3184=IKcos(j2);
IkReal x3185=IKsin(j2);
IkReal x3186=((1.0)*cj3);
IkReal x3187=(cj5*r00);
IkReal x3188=((1.0)*cj4);
IkReal x3189=(r01*sj5);
IkReal x3190=((1.0)*sj4);
IkReal x3191=(cj5*sj3);
IkReal x3192=(cj5*r20);
IkReal x3193=(sj3*sj5);
IkReal x3194=(r21*sj5);
IkReal x3195=(cj1*x3184);
IkReal x3196=(cj3*cj4*sj5);
IkReal x3197=(cj1*x3185);
IkReal x3198=(sj1*x3185);
IkReal x3199=(sj1*x3184);
IkReal x3200=((1.0)*x3198);
evalcond[0]=(x3197+x3199+(((-1.0)*r02*x3188))+((sj4*x3187))+(((-1.0)*x3189*x3190)));
evalcond[1]=((((-1.0)*x3190*x3194))+x3195+(((-1.0)*r22*x3188))+((sj4*x3192))+(((-1.0)*x3200)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x3195))+(((9.9e-7)*x3192))+(((-1.0)*pz))+(((-9.9e-7)*x3194))+(((-0.4)*x3198))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*x3199))+(((0.4)*x3197))+(((0.4)*cj1))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x3189))+(((9.9e-7)*x3187)));
evalcond[4]=(x3195+((r00*x3193))+((r01*x3191))+(((-1.0)*x3200))+(((-1.0)*cj4*x3186*x3187))+(((-1.0)*r02*sj4*x3186))+((cj3*cj4*x3189)));
evalcond[5]=((((-1.0)*r22*sj4*x3186))+((r21*x3191))+((r20*x3193))+(((-1.0)*cj4*x3186*x3192))+(((-1.0)*x3199))+(((-1.0)*x3197))+((cj3*cj4*x3194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3201=((1.0)*r01);
IkReal x3202=(sj1*sj4);
IkReal x3203=(cj5*r00);
IkReal x3204=(cj1*cj4);
IkReal x3205=(cj5*r20);
IkReal x3206=(cj1*sj4);
IkReal x3207=(sj5*x3206);
IkReal x3208=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r21*sj5*x3202))+((x3202*x3205))+(((-1.0)*x3201*x3207))+(((-1.0)*r02*x3204))+(((-1.0)*r22*x3208))+((x3203*x3206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x3204))+(((-1.0)*r02*x3208))+((x3202*x3203))+(((-1.0)*sj5*x3201*x3202))+(((-1.0)*x3205*x3206))+((r21*x3207)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*sj5*x3202))+((x3202*x3205))+(((-1.0)*x3201*x3207))+(((-1.0)*r02*x3204))+(((-1.0)*r22*x3208))+((x3203*x3206))))+IKsqr((((r22*x3204))+(((-1.0)*r02*x3208))+((x3202*x3203))+(((-1.0)*sj5*x3201*x3202))+(((-1.0)*x3205*x3206))+((r21*x3207))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*sj5*x3202))+((x3202*x3205))+(((-1.0)*x3201*x3207))+(((-1.0)*r02*x3204))+(((-1.0)*r22*x3208))+((x3203*x3206))), (((r22*x3204))+(((-1.0)*r02*x3208))+((x3202*x3203))+(((-1.0)*sj5*x3201*x3202))+(((-1.0)*x3205*x3206))+((r21*x3207))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3209=IKcos(j2);
IkReal x3210=IKsin(j2);
IkReal x3211=((1.0)*cj3);
IkReal x3212=(cj5*r00);
IkReal x3213=((1.0)*cj4);
IkReal x3214=(r01*sj5);
IkReal x3215=((1.0)*sj4);
IkReal x3216=(cj5*sj3);
IkReal x3217=(cj5*r20);
IkReal x3218=((1.0)*sj1);
IkReal x3219=(sj3*sj5);
IkReal x3220=((0.4)*sj1);
IkReal x3221=(r21*sj5);
IkReal x3222=(cj1*x3209);
IkReal x3223=(cj3*cj4*sj5);
IkReal x3224=((0.4)*x3210);
IkReal x3225=(x3209*x3218);
IkReal x3226=((1.0)*cj1*x3210);
IkReal x3227=(x3225+x3226);
evalcond[0]=(((sj4*x3217))+x3222+(((-1.0)*x3210*x3218))+(((-1.0)*x3215*x3221))+(((-1.0)*r22*x3213)));
evalcond[1]=(((sj4*x3212))+(((-1.0)*x3214*x3215))+(((-1.0)*r02*x3213))+(((-1.0)*x3227)));
evalcond[2]=((((9.9e-7)*x3217))+(((-1.93e-6)*cj1))+(((-1.0)*x3210*x3220))+(((0.4)*x3222))+(((-1.0)*pz))+(((-9.9e-7)*x3221))+(((-1.0)*x3220)));
evalcond[3]=((((9.9e-7)*x3212))+(((-9.9e-7)*x3214))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-1.0)*x3209*x3220))+(((-1.0)*cj1*x3224))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*cj4*x3211*x3212))+((r01*x3216))+((cj3*cj4*x3214))+((r00*x3219))+(((-1.0)*r02*sj4*x3211))+(((-1.0)*x3222))+((sj1*x3210)));
evalcond[5]=((((-1.0)*cj4*x3211*x3217))+(((-1.0)*r22*sj4*x3211))+((r20*x3219))+((r21*x3216))+((cj3*cj4*x3221))+(((-1.0)*x3227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3228=(cj4*r12);
IkReal x3229=(cj4*r22);
IkReal x3230=(cj1*sj4);
IkReal x3231=(r11*sj5);
IkReal x3232=(r21*sj5);
IkReal x3233=((1.0)*sj1);
IkReal x3234=(sj1*sj4);
IkReal x3235=(cj5*r20);
IkReal x3236=((1.0)*cj5*r10);
if( IKabs((((cj1*x3228))+(((-1.0)*x3229*x3233))+(((-1.0)*sj4*x3232*x3233))+((x3234*x3235))+(((-1.0)*x3230*x3236))+((x3230*x3231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x3229))+(((-1.0)*x3230*x3235))+(((-1.0)*cj5*r10*sj4*x3233))+((x3231*x3234))+((sj1*x3228))+((x3230*x3232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x3228))+(((-1.0)*x3229*x3233))+(((-1.0)*sj4*x3232*x3233))+((x3234*x3235))+(((-1.0)*x3230*x3236))+((x3230*x3231))))+IKsqr((((cj1*x3229))+(((-1.0)*x3230*x3235))+(((-1.0)*cj5*r10*sj4*x3233))+((x3231*x3234))+((sj1*x3228))+((x3230*x3232))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x3228))+(((-1.0)*x3229*x3233))+(((-1.0)*sj4*x3232*x3233))+((x3234*x3235))+(((-1.0)*x3230*x3236))+((x3230*x3231))), (((cj1*x3229))+(((-1.0)*x3230*x3235))+(((-1.0)*cj5*r10*sj4*x3233))+((x3231*x3234))+((sj1*x3228))+((x3230*x3232))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3237=IKcos(j2);
IkReal x3238=IKsin(j2);
IkReal x3239=(cj3*cj4);
IkReal x3240=(r21*sj5);
IkReal x3241=((1.0)*r22);
IkReal x3242=(cj5*r10);
IkReal x3243=(cj5*r20);
IkReal x3244=(cj5*sj3);
IkReal x3245=(cj3*sj4);
IkReal x3246=(r11*sj5);
IkReal x3247=((1.0)*sj4);
IkReal x3248=((1.0)*r12);
IkReal x3249=(sj3*sj5);
IkReal x3250=(cj1*x3237);
IkReal x3251=(cj1*x3238);
IkReal x3252=(sj1*x3238);
IkReal x3253=(sj1*x3237);
IkReal x3254=((1.0)*x3252);
evalcond[0]=((((-1.0)*cj4*x3248))+x3251+x3253+(((-1.0)*x3246*x3247))+((sj4*x3242)));
evalcond[1]=((((-1.0)*cj4*x3241))+(((-1.0)*x3240*x3247))+x3250+(((-1.0)*x3254))+((sj4*x3243)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x3240))+(((0.4)*x3250))+(((9.9e-7)*x3243))+(((-0.4)*x3252))+(((-1.0)*pz))+(((-0.4)*sj1)));
evalcond[3]=((((-9.9e-7)*x3246))+(((0.4)*x3251))+(((0.4)*x3253))+(((9.9e-7)*x3242))+(((0.4)*cj1))+(((-1.0)*py))+(((-1.93e-6)*sj1)));
evalcond[4]=((((-1.0)*x3239*x3242))+x3250+((x3239*x3246))+(((-1.0)*x3245*x3248))+((r10*x3249))+((r11*x3244))+(((-1.0)*x3254)));
evalcond[5]=(((r21*x3244))+(((-1.0)*x3239*x3243))+((r20*x3249))+((x3239*x3240))+(((-1.0)*x3253))+(((-1.0)*x3251))+(((-1.0)*x3241*x3245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3255=((1.0)*cj1);
IkReal x3256=(sj4*sj5);
IkReal x3257=(cj5*sj4);
IkReal x3258=((1.0)*sj1);
IkReal x3259=(sj1*x3257);
IkReal x3260=(cj4*x3258);
if( IKabs(((((-1.0)*r21*x3256*x3258))+(((-1.0)*cj4*r12*x3255))+(((-1.0)*r11*x3255*x3256))+((cj1*r10*x3257))+(((-1.0)*r22*x3260))+((r20*x3259)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x3259))+((cj1*cj4*r22))+((cj1*r21*x3256))+(((-1.0)*r12*x3260))+(((-1.0)*r11*x3256*x3258))+(((-1.0)*r20*x3255*x3257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x3256*x3258))+(((-1.0)*cj4*r12*x3255))+(((-1.0)*r11*x3255*x3256))+((cj1*r10*x3257))+(((-1.0)*r22*x3260))+((r20*x3259))))+IKsqr((((r10*x3259))+((cj1*cj4*r22))+((cj1*r21*x3256))+(((-1.0)*r12*x3260))+(((-1.0)*r11*x3256*x3258))+(((-1.0)*r20*x3255*x3257))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x3256*x3258))+(((-1.0)*cj4*r12*x3255))+(((-1.0)*r11*x3255*x3256))+((cj1*r10*x3257))+(((-1.0)*r22*x3260))+((r20*x3259))), (((r10*x3259))+((cj1*cj4*r22))+((cj1*r21*x3256))+(((-1.0)*r12*x3260))+(((-1.0)*r11*x3256*x3258))+(((-1.0)*r20*x3255*x3257))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3261=IKcos(j2);
IkReal x3262=IKsin(j2);
IkReal x3263=(cj3*cj4);
IkReal x3264=(r21*sj5);
IkReal x3265=((1.0)*r22);
IkReal x3266=(cj5*r10);
IkReal x3267=(cj5*r20);
IkReal x3268=(cj5*sj3);
IkReal x3269=((1.0)*sj1);
IkReal x3270=(cj3*sj4);
IkReal x3271=(sj3*sj5);
IkReal x3272=(r11*sj5);
IkReal x3273=((1.0)*sj4);
IkReal x3274=((1.0)*r12);
IkReal x3275=((0.4)*sj1);
IkReal x3276=(cj1*x3261);
IkReal x3277=((0.4)*x3262);
IkReal x3278=(x3261*x3269);
IkReal x3279=((1.0)*cj1*x3262);
IkReal x3280=(x3278+x3279);
evalcond[0]=(x3276+(((-1.0)*x3264*x3273))+(((-1.0)*x3262*x3269))+((sj4*x3267))+(((-1.0)*cj4*x3265)));
evalcond[1]=((((-1.0)*cj4*x3274))+(((-1.0)*x3272*x3273))+(((-1.0)*x3280))+((sj4*x3266)));
evalcond[2]=((((-1.93e-6)*cj1))+(((9.9e-7)*x3267))+(((-1.0)*x3275))+(((-1.0)*pz))+(((0.4)*x3276))+(((-1.0)*x3262*x3275))+(((-9.9e-7)*x3264)));
evalcond[3]=((((-9.9e-7)*x3272))+(((9.9e-7)*x3266))+(((-1.0)*x3261*x3275))+(((1.93e-6)*sj1))+(((-1.0)*cj1*x3277))+(((-1.0)*py))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*x3276))+((sj1*x3262))+((x3263*x3272))+(((-1.0)*x3263*x3266))+((r11*x3268))+((r10*x3271))+(((-1.0)*x3270*x3274)));
evalcond[5]=(((r21*x3268))+((x3263*x3264))+(((-1.0)*x3280))+((r20*x3271))+(((-1.0)*x3263*x3267))+(((-1.0)*x3265*x3270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3281=((1.0)*sj1);
IkReal x3282=(cj5*sj4);
IkReal x3283=(r20*sj0);
IkReal x3284=((1.0)*cj1);
IkReal x3285=(cj4*r12);
IkReal x3286=(cj4*r22*sj0);
IkReal x3287=(r11*sj4*sj5);
IkReal x3288=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x3289=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x3289.valid){
continue;
}
CheckValue<IkReal> x3290 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3282*x3284))+((cj1*x3287))+((cj1*x3285))+(((-1.0)*x3281*x3286))+(((-1.0)*x3281*x3288))+((sj1*x3282*x3283)))),IkReal((((cj1*x3286))+((cj1*x3288))+((sj1*x3285))+((sj1*x3287))+(((-1.0)*r10*x3281*x3282))+(((-1.0)*x3282*x3283*x3284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3290.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3289.value)))+(x3290.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3291=IKsin(j2);
IkReal x3292=IKcos(j2);
IkReal x3293=((1.0)*cj3);
IkReal x3294=(cj5*r00);
IkReal x3295=(cj0*cj1);
IkReal x3296=(cj5*r10);
IkReal x3297=(r01*sj5);
IkReal x3298=((1.0)*sj4);
IkReal x3299=(cj5*sj3);
IkReal x3300=(cj1*sj0);
IkReal x3301=(sj3*sj5);
IkReal x3302=(cj5*r20);
IkReal x3303=((1.0)*cj4);
IkReal x3304=((1.93e-6)*sj1);
IkReal x3305=(r11*sj5);
IkReal x3306=(r21*sj5);
IkReal x3307=(cj1*x3292);
IkReal x3308=(cj3*cj4*sj5);
IkReal x3309=((0.4)*x3291);
IkReal x3310=(sj1*x3292);
IkReal x3311=((1.0)*sj1*x3291);
evalcond[0]=(((sj4*x3302))+x3307+(((-1.0)*x3311))+(((-1.0)*x3298*x3306))+(((-1.0)*r22*x3303)));
evalcond[1]=(((x3291*x3295))+((cj0*x3310))+(((-1.0)*x3297*x3298))+(((-1.0)*r02*x3303))+((sj4*x3294)));
evalcond[2]=(((x3291*x3300))+(((-1.0)*x3298*x3305))+((sj4*x3296))+(((-1.0)*r12*x3303))+((sj0*x3310)));
evalcond[3]=((((9.9e-7)*x3302))+(((-1.93e-6)*cj1))+(((0.4)*x3307))+(((-1.0)*pz))+(((-1.0)*sj1*x3309))+(((-9.9e-7)*x3306))+(((-0.4)*sj1)));
evalcond[4]=((((-1.0)*cj0*x3304))+(((9.9e-7)*x3294))+(((-1.0)*px))+((x3295*x3309))+(((-9.9e-7)*x3297))+(((0.4)*cj0*x3310))+(((0.4)*x3295)));
evalcond[5]=(((x3300*x3309))+(((-1.0)*sj0*x3304))+(((0.4)*x3300))+(((9.9e-7)*x3296))+(((-1.0)*py))+(((0.4)*sj0*x3310))+(((-9.9e-7)*x3305)));
evalcond[6]=((((-1.0)*r22*sj4*x3293))+((cj3*cj4*x3306))+(((-1.0)*cj4*x3293*x3302))+((r21*x3299))+(((-1.0)*cj1*x3291))+(((-1.0)*x3310))+((r20*x3301)));
evalcond[7]=(((r01*x3299))+((x3292*x3295))+(((-1.0)*r02*sj4*x3293))+(((-1.0)*cj0*x3311))+(((-1.0)*cj4*x3293*x3294))+((cj3*cj4*x3297))+((r00*x3301)));
evalcond[8]=(((x3292*x3300))+(((-1.0)*r12*sj4*x3293))+(((-1.0)*sj0*x3311))+((cj3*cj4*x3305))+((r10*x3301))+(((-1.0)*cj4*x3293*x3296))+((r11*x3299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3312=((1.0)*cj0);
IkReal x3313=(cj4*r02);
IkReal x3314=(cj1*sj4);
IkReal x3315=(cj4*r22);
IkReal x3316=(cj5*r20);
IkReal x3317=(sj1*sj4);
IkReal x3318=(sj5*x3317);
IkReal x3319=((1.0)*cj5*r00);
CheckValue<IkReal> x3320=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x3320.valid){
continue;
}
CheckValue<IkReal> x3321 = IKatan2WithCheck(IkReal((((r01*sj5*x3314))+(((-1.0)*x3314*x3319))+(((-1.0)*sj1*x3312*x3315))+((cj0*x3316*x3317))+(((-1.0)*r21*x3312*x3318))+((cj1*x3313)))),IkReal(((((-1.0)*x3312*x3314*x3316))+(((-1.0)*x3317*x3319))+((r01*x3318))+((cj0*cj1*x3315))+((sj1*x3313))+((cj0*r21*sj5*x3314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3321.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3320.value)))+(x3321.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3322=IKsin(j2);
IkReal x3323=IKcos(j2);
IkReal x3324=((1.0)*cj3);
IkReal x3325=(cj5*r00);
IkReal x3326=(cj0*cj1);
IkReal x3327=(cj5*r10);
IkReal x3328=(r01*sj5);
IkReal x3329=((1.0)*sj4);
IkReal x3330=(cj5*sj3);
IkReal x3331=(cj1*sj0);
IkReal x3332=(sj3*sj5);
IkReal x3333=(cj5*r20);
IkReal x3334=((1.0)*cj4);
IkReal x3335=((1.93e-6)*sj1);
IkReal x3336=(r11*sj5);
IkReal x3337=(r21*sj5);
IkReal x3338=(cj1*x3323);
IkReal x3339=(cj3*cj4*sj5);
IkReal x3340=((0.4)*x3322);
IkReal x3341=(sj1*x3323);
IkReal x3342=((1.0)*sj1*x3322);
evalcond[0]=(x3338+((sj4*x3333))+(((-1.0)*x3342))+(((-1.0)*r22*x3334))+(((-1.0)*x3329*x3337)));
evalcond[1]=(((cj0*x3341))+(((-1.0)*x3328*x3329))+(((-1.0)*r02*x3334))+((sj4*x3325))+((x3322*x3326)));
evalcond[2]=(((x3322*x3331))+((sj0*x3341))+((sj4*x3327))+(((-1.0)*x3329*x3336))+(((-1.0)*r12*x3334)));
evalcond[3]=((((-1.93e-6)*cj1))+(((-1.0)*sj1*x3340))+(((9.9e-7)*x3333))+(((0.4)*x3338))+(((-1.0)*pz))+(((-0.4)*sj1))+(((-9.9e-7)*x3337)));
evalcond[4]=((((-1.0)*cj0*x3335))+(((-9.9e-7)*x3328))+(((-1.0)*px))+(((0.4)*cj0*x3341))+(((9.9e-7)*x3325))+((x3326*x3340))+(((0.4)*x3326)));
evalcond[5]=((((0.4)*sj0*x3341))+((x3331*x3340))+(((0.4)*x3331))+(((-1.0)*py))+(((9.9e-7)*x3327))+(((-9.9e-7)*x3336))+(((-1.0)*sj0*x3335)));
evalcond[6]=(((r21*x3330))+(((-1.0)*x3341))+(((-1.0)*r22*sj4*x3324))+(((-1.0)*cj4*x3324*x3333))+(((-1.0)*cj1*x3322))+((cj3*cj4*x3337))+((r20*x3332)));
evalcond[7]=(((cj3*cj4*x3328))+(((-1.0)*cj4*x3324*x3325))+(((-1.0)*cj0*x3342))+(((-1.0)*r02*sj4*x3324))+((r01*x3330))+((r00*x3332))+((x3323*x3326)));
evalcond[8]=(((x3323*x3331))+((r10*x3332))+(((-1.0)*cj4*x3324*x3327))+((r11*x3330))+(((-1.0)*r12*sj4*x3324))+(((-1.0)*sj0*x3342))+((cj3*cj4*x3336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3343=cj0*cj0;
IkReal x3344=(cj0*px);
IkReal x3345=(cj5*r20);
IkReal x3346=(r21*sj5);
IkReal x3347=((0.4)*sj4);
IkReal x3348=((77.2)*sj4);
IkReal x3349=(cj0*cj4*r02);
IkReal x3350=(cj0*r01*sj5);
IkReal x3351=(cj0*cj5*r00);
IkReal x3352=(((x3346*x3347))+(((-1.0)*pz))+(((-9.9e-7)*x3346))+(((-1.0)*x3345*x3347))+(((9.9e-7)*x3345))+(((0.4)*cj4*r22)));
IkReal x3353=(x3343*x3352);
CheckValue<IkReal> x3354 = IKatan2WithCheck(IkReal(((((-1.0)*x3348*x3350))+(((-77.2)*x3349))+(((-0.00019107)*x3351))+(((0.00019107)*x3350))+(((193.0)*x3344))+(((-40000000.0)*x3353))+((x3348*x3351)))),IkReal(((((16000000.0)*sj4*x3350))+(((-40000000.0)*x3344))+(((39.6)*x3351))+(((-39.6)*x3350))+(((16000000.0)*x3349))+(((-193.0)*x3353))+(((-16000000.0)*sj4*x3351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3354.valid){
continue;
}
CheckValue<IkReal> x3355=IKPowWithIntegerCheck(IKsign(x3343),-1);
if(!x3355.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3354.value)+(((-1.5707963267949)*(x3355.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x3356=IKsin(j1);
IkReal x3357=sj0*sj0;
IkReal x3358=IKcos(j1);
IkReal x3359=cj0*cj0;
IkReal x3360=((0.4)*cj5);
IkReal x3361=(r21*sj0);
IkReal x3362=((0.4)*sj4);
IkReal x3363=(r21*sj5);
IkReal x3364=(cj3*r22);
IkReal x3365=(r11*sj5);
IkReal x3366=((9.9e-7)*cj0);
IkReal x3367=((0.4)*cj4);
IkReal x3368=(cj3*cj4);
IkReal x3369=(cj5*r00);
IkReal x3370=(r01*sj5);
IkReal x3371=(r20*sj0);
IkReal x3372=(r00*sj4);
IkReal x3373=((9.9e-7)*cj5);
IkReal x3374=(cj0*sj0);
IkReal x3375=((9.9e-7)*sj0);
IkReal x3376=(r10*sj4);
IkReal x3377=((0.4)*x3358);
IkReal x3378=(r20*x3368);
IkReal x3379=((1.93e-6)*x3356);
IkReal x3380=(r10*x3373);
IkReal x3381=((1.93e-6)*x3358);
IkReal x3382=((0.4)*sj3*sj5);
IkReal x3383=((0.4)*x3356);
IkReal x3384=(x3374*x3379);
IkReal x3385=(x3374*x3377);
evalcond[0]=((((-1.0)*r20*sj4*x3360))+((x3362*x3363))+((r22*x3367))+(((-1.0)*pz))+(((-9.9e-7)*x3363))+((r20*x3373))+(((-1.0)*x3381))+(((-1.0)*x3383)));
evalcond[1]=((((-1.0)*sj0*x3380))+(((-1.0)*x3357*x3377))+((x3357*x3379))+((sj0*x3360*x3376))+((x3365*x3375))+(((-1.0)*sj0*x3362*x3365))+(((-1.0)*r12*sj0*x3367))+((py*sj0)));
evalcond[2]=(((cj0*x3360*x3372))+(((-1.0)*cj0*x3362*x3370))+(((-1.0)*cj0*r02*x3367))+((x3366*x3370))+(((-1.0)*x3359*x3377))+(((-1.0)*x3366*x3369))+((cj0*px))+((x3359*x3379)));
evalcond[3]=(((r11*sj3*x3360))+((sj0*x3381))+((sj0*x3383))+((r10*x3382))+(((9.9e-7)*sj5*x3361))+(((-1.0)*cj3*r12*x3362))+((cj3*x3365*x3367))+(((-1.0)*x3371*x3373))+(((-1.0)*r10*x3360*x3368))+((pz*sj0)));
evalcond[4]=(((x3363*x3366))+(((-1.0)*r00*x3360*x3368))+((cj0*x3381))+((cj0*x3383))+(((-1.0)*cj5*r20*x3366))+((r01*sj3*x3360))+(((-1.0)*cj3*r02*x3362))+((cj0*pz))+((cj3*x3367*x3370))+((r00*x3382)));
evalcond[5]=(((x3360*x3368*x3371))+(((-1.0)*cj3*sj5*x3361*x3367))+((sj0*x3379))+(((-1.0)*x3371*x3382))+(((9.9e-7)*x3365))+py+(((-1.0)*x3380))+((sj0*x3362*x3364))+(((-1.0)*sj3*x3360*x3361))+(((-1.0)*sj0*x3377)));
evalcond[6]=(((cj0*x3379))+((cj0*x3360*x3378))+((cj0*x3362*x3364))+(((-1.0)*cj0*cj3*x3363*x3367))+px+(((-9.9e-7)*x3369))+(((-1.0)*cj0*x3377))+(((9.9e-7)*x3370))+(((-1.0)*cj0*r21*sj3*x3360))+(((-1.0)*cj0*r20*x3382)));
evalcond[7]=((((-1.0)*cj0*r12*x3367))+x3384+((cj0*x3360*x3376))+((x3370*x3375))+((px*sj0))+(((-1.0)*x3385))+(((-1.0)*x3369*x3375))+(((-1.0)*cj0*x3362*x3365)));
evalcond[8]=(((x3365*x3366))+(((-1.0)*sj0*x3362*x3370))+x3384+(((-1.0)*cj5*r10*x3366))+(((-1.0)*r02*sj0*x3367))+((sj0*x3360*x3372))+((cj0*py))+(((-1.0)*x3385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3386=(cj4*sj1);
IkReal x3387=(cj1*sj4);
IkReal x3388=((1.0)*cj5);
IkReal x3389=(r21*sj5);
IkReal x3390=(cj1*cj4);
IkReal x3391=(sj1*sj4);
IkReal x3392=(r01*sj4*sj5);
if( IKabs((((r01*sj5*x3387))+(((-1.0)*r22*x3386))+((cj5*r20*x3391))+((r02*x3390))+(((-1.0)*x3389*x3391))+(((-1.0)*r00*x3387*x3388)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x3387*x3388))+((r01*sj5*x3391))+((r22*x3390))+((r02*x3386))+((x3387*x3389))+(((-1.0)*r00*x3388*x3391)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj5*x3387))+(((-1.0)*r22*x3386))+((cj5*r20*x3391))+((r02*x3390))+(((-1.0)*x3389*x3391))+(((-1.0)*r00*x3387*x3388))))+IKsqr(((((-1.0)*r20*x3387*x3388))+((r01*sj5*x3391))+((r22*x3390))+((r02*x3386))+((x3387*x3389))+(((-1.0)*r00*x3388*x3391))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj5*x3387))+(((-1.0)*r22*x3386))+((cj5*r20*x3391))+((r02*x3390))+(((-1.0)*x3389*x3391))+(((-1.0)*r00*x3387*x3388))), ((((-1.0)*r20*x3387*x3388))+((r01*sj5*x3391))+((r22*x3390))+((r02*x3386))+((x3387*x3389))+(((-1.0)*r00*x3388*x3391))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3393=IKcos(j2);
IkReal x3394=IKsin(j2);
IkReal x3395=((1.0)*cj3);
IkReal x3396=(cj5*r00);
IkReal x3397=((1.0)*cj4);
IkReal x3398=(r01*sj5);
IkReal x3399=((1.0)*sj4);
IkReal x3400=(cj5*sj3);
IkReal x3401=(cj5*r20);
IkReal x3402=(sj3*sj5);
IkReal x3403=(r21*sj5);
IkReal x3404=(cj1*x3393);
IkReal x3405=(cj3*cj4*sj5);
IkReal x3406=(cj1*x3394);
IkReal x3407=(sj1*x3394);
IkReal x3408=(sj1*x3393);
IkReal x3409=((1.0)*x3407);
evalcond[0]=((((-1.0)*x3398*x3399))+((sj4*x3396))+x3406+x3408+(((-1.0)*r02*x3397)));
evalcond[1]=((((-1.0)*r22*x3397))+(((-1.0)*x3399*x3403))+x3404+(((-1.0)*x3409))+((sj4*x3401)));
evalcond[2]=((((-9.9e-7)*x3403))+(((9.9e-7)*x3401))+(((-1.93e-6)*cj1))+(((0.4)*x3404))+(((-1.0)*pz))+(((-0.4)*sj1))+(((-0.4)*x3407)));
evalcond[3]=((((0.4)*cj1))+(((0.4)*x3408))+(((0.4)*x3406))+(((-1.0)*px))+(((9.9e-7)*x3396))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x3398)));
evalcond[4]=(((cj3*cj4*x3398))+(((-1.0)*r02*sj4*x3395))+x3404+((r00*x3402))+(((-1.0)*cj4*x3395*x3396))+((r01*x3400))+(((-1.0)*x3409)));
evalcond[5]=((((-1.0)*cj4*x3395*x3401))+(((-1.0)*x3406))+(((-1.0)*x3408))+((cj3*cj4*x3403))+(((-1.0)*r22*sj4*x3395))+((r21*x3400))+((r20*x3402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3410=((1.0)*r01);
IkReal x3411=(sj1*sj4);
IkReal x3412=(cj5*r00);
IkReal x3413=(cj1*cj4);
IkReal x3414=(cj5*r20);
IkReal x3415=(cj1*sj4);
IkReal x3416=(sj5*x3415);
IkReal x3417=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r22*x3417))+((x3411*x3414))+((x3412*x3415))+(((-1.0)*x3410*x3416))+(((-1.0)*r02*x3413))+(((-1.0)*r21*sj5*x3411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x3410*x3411))+((x3411*x3412))+((r22*x3413))+((r21*x3416))+(((-1.0)*r02*x3417))+(((-1.0)*x3414*x3415)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x3417))+((x3411*x3414))+((x3412*x3415))+(((-1.0)*x3410*x3416))+(((-1.0)*r02*x3413))+(((-1.0)*r21*sj5*x3411))))+IKsqr(((((-1.0)*sj5*x3410*x3411))+((x3411*x3412))+((r22*x3413))+((r21*x3416))+(((-1.0)*r02*x3417))+(((-1.0)*x3414*x3415))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x3417))+((x3411*x3414))+((x3412*x3415))+(((-1.0)*x3410*x3416))+(((-1.0)*r02*x3413))+(((-1.0)*r21*sj5*x3411))), ((((-1.0)*sj5*x3410*x3411))+((x3411*x3412))+((r22*x3413))+((r21*x3416))+(((-1.0)*r02*x3417))+(((-1.0)*x3414*x3415))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3418=IKcos(j2);
IkReal x3419=IKsin(j2);
IkReal x3420=((1.0)*cj3);
IkReal x3421=(cj5*r00);
IkReal x3422=((1.0)*cj4);
IkReal x3423=(r01*sj5);
IkReal x3424=((1.0)*sj4);
IkReal x3425=(cj5*sj3);
IkReal x3426=(cj5*r20);
IkReal x3427=((1.0)*sj1);
IkReal x3428=(sj3*sj5);
IkReal x3429=((0.4)*sj1);
IkReal x3430=(r21*sj5);
IkReal x3431=(cj1*x3418);
IkReal x3432=(cj3*cj4*sj5);
IkReal x3433=((0.4)*x3419);
IkReal x3434=(x3418*x3427);
IkReal x3435=((1.0)*cj1*x3419);
IkReal x3436=(x3434+x3435);
evalcond[0]=((((-1.0)*x3424*x3430))+x3431+(((-1.0)*x3419*x3427))+(((-1.0)*r22*x3422))+((sj4*x3426)));
evalcond[1]=((((-1.0)*x3436))+((sj4*x3421))+(((-1.0)*x3423*x3424))+(((-1.0)*r02*x3422)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x3431))+(((-1.0)*x3429))+(((-1.0)*pz))+(((-1.0)*x3419*x3429))+(((-9.9e-7)*x3430))+(((9.9e-7)*x3426)));
evalcond[3]=((((1.93e-6)*sj1))+(((-1.0)*px))+(((-9.9e-7)*x3423))+(((-1.0)*x3418*x3429))+(((-1.0)*cj1*x3433))+(((9.9e-7)*x3421))+(((-0.4)*cj1)));
evalcond[4]=(((r00*x3428))+((sj1*x3419))+(((-1.0)*cj4*x3420*x3421))+((cj3*cj4*x3423))+(((-1.0)*x3431))+(((-1.0)*r02*sj4*x3420))+((r01*x3425)));
evalcond[5]=(((r20*x3428))+(((-1.0)*r22*sj4*x3420))+(((-1.0)*x3436))+(((-1.0)*cj4*x3420*x3426))+((cj3*cj4*x3430))+((r21*x3425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3437=(cj4*r12);
IkReal x3438=(cj4*r22);
IkReal x3439=(cj1*sj4);
IkReal x3440=(r11*sj5);
IkReal x3441=(r21*sj5);
IkReal x3442=((1.0)*sj1);
IkReal x3443=(sj1*sj4);
IkReal x3444=(cj5*r20);
IkReal x3445=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*x3438*x3442))+(((-1.0)*x3439*x3445))+(((-1.0)*sj4*x3441*x3442))+((cj1*x3437))+((x3443*x3444))+((x3439*x3440)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*sj4*x3442))+((cj1*x3438))+((sj1*x3437))+((x3440*x3443))+((x3439*x3441))+(((-1.0)*x3439*x3444)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3438*x3442))+(((-1.0)*x3439*x3445))+(((-1.0)*sj4*x3441*x3442))+((cj1*x3437))+((x3443*x3444))+((x3439*x3440))))+IKsqr(((((-1.0)*cj5*r10*sj4*x3442))+((cj1*x3438))+((sj1*x3437))+((x3440*x3443))+((x3439*x3441))+(((-1.0)*x3439*x3444))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3438*x3442))+(((-1.0)*x3439*x3445))+(((-1.0)*sj4*x3441*x3442))+((cj1*x3437))+((x3443*x3444))+((x3439*x3440))), ((((-1.0)*cj5*r10*sj4*x3442))+((cj1*x3438))+((sj1*x3437))+((x3440*x3443))+((x3439*x3441))+(((-1.0)*x3439*x3444))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3446=IKcos(j2);
IkReal x3447=IKsin(j2);
IkReal x3448=(cj3*cj4);
IkReal x3449=(r21*sj5);
IkReal x3450=((1.0)*r22);
IkReal x3451=(cj5*r10);
IkReal x3452=(cj5*r20);
IkReal x3453=(cj5*sj3);
IkReal x3454=(cj3*sj4);
IkReal x3455=(r11*sj5);
IkReal x3456=((1.0)*sj4);
IkReal x3457=((1.0)*r12);
IkReal x3458=(sj3*sj5);
IkReal x3459=(cj1*x3446);
IkReal x3460=(cj1*x3447);
IkReal x3461=(sj1*x3447);
IkReal x3462=(sj1*x3446);
IkReal x3463=((1.0)*x3461);
evalcond[0]=(((sj4*x3451))+x3462+x3460+(((-1.0)*x3455*x3456))+(((-1.0)*cj4*x3457)));
evalcond[1]=(((sj4*x3452))+x3459+(((-1.0)*x3463))+(((-1.0)*x3449*x3456))+(((-1.0)*cj4*x3450)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x3449))+(((0.4)*x3459))+(((-0.4)*x3461))+(((-1.0)*pz))+(((9.9e-7)*x3452))+(((-0.4)*sj1)));
evalcond[3]=((((-9.9e-7)*x3455))+(((0.4)*cj1))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((0.4)*x3462))+(((0.4)*x3460))+(((9.9e-7)*x3451)));
evalcond[4]=((((-1.0)*x3448*x3451))+((x3448*x3455))+x3459+(((-1.0)*x3454*x3457))+(((-1.0)*x3463))+((r10*x3458))+((r11*x3453)));
evalcond[5]=(((r21*x3453))+(((-1.0)*x3448*x3452))+((x3448*x3449))+(((-1.0)*x3462))+(((-1.0)*x3460))+((r20*x3458))+(((-1.0)*x3450*x3454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3464=((1.0)*cj1);
IkReal x3465=(sj4*sj5);
IkReal x3466=(cj5*sj4);
IkReal x3467=((1.0)*sj1);
IkReal x3468=(sj1*x3466);
IkReal x3469=(cj4*x3467);
if( IKabs(((((-1.0)*r21*x3465*x3467))+(((-1.0)*cj4*r12*x3464))+((r20*x3468))+(((-1.0)*r22*x3469))+(((-1.0)*r11*x3464*x3465))+((cj1*r10*x3466)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((cj1*r21*x3465))+(((-1.0)*r11*x3465*x3467))+(((-1.0)*r12*x3469))+((r10*x3468))+(((-1.0)*r20*x3464*x3466)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x3465*x3467))+(((-1.0)*cj4*r12*x3464))+((r20*x3468))+(((-1.0)*r22*x3469))+(((-1.0)*r11*x3464*x3465))+((cj1*r10*x3466))))+IKsqr((((cj1*cj4*r22))+((cj1*r21*x3465))+(((-1.0)*r11*x3465*x3467))+(((-1.0)*r12*x3469))+((r10*x3468))+(((-1.0)*r20*x3464*x3466))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x3465*x3467))+(((-1.0)*cj4*r12*x3464))+((r20*x3468))+(((-1.0)*r22*x3469))+(((-1.0)*r11*x3464*x3465))+((cj1*r10*x3466))), (((cj1*cj4*r22))+((cj1*r21*x3465))+(((-1.0)*r11*x3465*x3467))+(((-1.0)*r12*x3469))+((r10*x3468))+(((-1.0)*r20*x3464*x3466))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3470=IKcos(j2);
IkReal x3471=IKsin(j2);
IkReal x3472=(cj3*cj4);
IkReal x3473=(r21*sj5);
IkReal x3474=((1.0)*r22);
IkReal x3475=(cj5*r10);
IkReal x3476=(cj5*r20);
IkReal x3477=(cj5*sj3);
IkReal x3478=((1.0)*sj1);
IkReal x3479=(cj3*sj4);
IkReal x3480=(sj3*sj5);
IkReal x3481=(r11*sj5);
IkReal x3482=((1.0)*sj4);
IkReal x3483=((1.0)*r12);
IkReal x3484=((0.4)*sj1);
IkReal x3485=(cj1*x3470);
IkReal x3486=((0.4)*x3471);
IkReal x3487=(x3470*x3478);
IkReal x3488=((1.0)*cj1*x3471);
IkReal x3489=(x3488+x3487);
evalcond[0]=(((sj4*x3476))+(((-1.0)*x3471*x3478))+x3485+(((-1.0)*x3473*x3482))+(((-1.0)*cj4*x3474)));
evalcond[1]=(((sj4*x3475))+(((-1.0)*x3481*x3482))+(((-1.0)*cj4*x3483))+(((-1.0)*x3489)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x3471*x3484))+(((-1.0)*pz))+(((9.9e-7)*x3476))+(((0.4)*x3485))+(((-9.9e-7)*x3473))+(((-1.0)*x3484)));
evalcond[3]=((((-1.0)*cj1*x3486))+(((1.93e-6)*sj1))+(((-1.0)*py))+(((9.9e-7)*x3475))+(((-9.9e-7)*x3481))+(((-1.0)*x3470*x3484))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*x3479*x3483))+((r10*x3480))+((sj1*x3471))+(((-1.0)*x3485))+((r11*x3477))+(((-1.0)*x3472*x3475))+((x3472*x3481)));
evalcond[5]=(((r20*x3480))+((r21*x3477))+(((-1.0)*x3474*x3479))+(((-1.0)*x3472*x3476))+(((-1.0)*x3489))+((x3472*x3473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3490=((1.0)*sj1);
IkReal x3491=(cj5*sj4);
IkReal x3492=(r20*sj0);
IkReal x3493=((1.0)*cj1);
IkReal x3494=(cj4*r12);
IkReal x3495=(cj4*r22*sj0);
IkReal x3496=(r11*sj4*sj5);
IkReal x3497=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x3498=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x3498.valid){
continue;
}
CheckValue<IkReal> x3499 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3491*x3493))+(((-1.0)*x3490*x3497))+(((-1.0)*x3490*x3495))+((sj1*x3491*x3492))+((cj1*x3496))+((cj1*x3494)))),IkReal(((((-1.0)*r10*x3490*x3491))+(((-1.0)*x3491*x3492*x3493))+((cj1*x3497))+((cj1*x3495))+((sj1*x3494))+((sj1*x3496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3499.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3498.value)))+(x3499.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3500=IKsin(j2);
IkReal x3501=IKcos(j2);
IkReal x3502=((1.0)*cj3);
IkReal x3503=(cj5*r00);
IkReal x3504=(cj0*cj1);
IkReal x3505=(cj5*r10);
IkReal x3506=(r01*sj5);
IkReal x3507=((1.0)*sj4);
IkReal x3508=(cj5*sj3);
IkReal x3509=(cj1*sj0);
IkReal x3510=(sj3*sj5);
IkReal x3511=(cj5*r20);
IkReal x3512=((1.0)*cj4);
IkReal x3513=((1.93e-6)*sj1);
IkReal x3514=(r11*sj5);
IkReal x3515=(r21*sj5);
IkReal x3516=(cj1*x3501);
IkReal x3517=(cj3*cj4*sj5);
IkReal x3518=((0.4)*x3500);
IkReal x3519=(sj1*x3501);
IkReal x3520=((1.0)*sj1*x3500);
evalcond[0]=((((-1.0)*x3520))+x3516+((sj4*x3511))+(((-1.0)*r22*x3512))+(((-1.0)*x3507*x3515)));
evalcond[1]=((((-1.0)*r02*x3512))+((x3500*x3504))+(((-1.0)*x3506*x3507))+((cj0*x3519))+((sj4*x3503)));
evalcond[2]=(((x3500*x3509))+((sj4*x3505))+(((-1.0)*r12*x3512))+((sj0*x3519))+(((-1.0)*x3507*x3514)));
evalcond[3]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x3515))+(((0.4)*x3516))+(((-1.0)*pz))+(((-1.0)*sj1*x3518))+(((9.9e-7)*x3511))+(((-0.4)*sj1)));
evalcond[4]=((((-9.9e-7)*x3506))+(((-1.0)*px))+(((0.4)*x3504))+(((-1.0)*cj0*x3513))+((x3504*x3518))+(((0.4)*cj0*x3519))+(((9.9e-7)*x3503)));
evalcond[5]=((((-9.9e-7)*x3514))+(((-1.0)*sj0*x3513))+(((0.4)*sj0*x3519))+(((-1.0)*py))+(((0.4)*x3509))+((x3509*x3518))+(((9.9e-7)*x3505)));
evalcond[6]=((((-1.0)*cj4*x3502*x3511))+((r20*x3510))+(((-1.0)*r22*sj4*x3502))+((cj3*cj4*x3515))+(((-1.0)*x3519))+((r21*x3508))+(((-1.0)*cj1*x3500)));
evalcond[7]=(((r01*x3508))+((x3501*x3504))+(((-1.0)*cj4*x3502*x3503))+((r00*x3510))+(((-1.0)*cj0*x3520))+((cj3*cj4*x3506))+(((-1.0)*r02*sj4*x3502)));
evalcond[8]=((((-1.0)*r12*sj4*x3502))+((x3501*x3509))+(((-1.0)*cj4*x3502*x3505))+((r10*x3510))+(((-1.0)*sj0*x3520))+((r11*x3508))+((cj3*cj4*x3514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3521=((1.0)*cj0);
IkReal x3522=(cj4*r02);
IkReal x3523=(cj1*sj4);
IkReal x3524=(cj4*r22);
IkReal x3525=(cj5*r20);
IkReal x3526=(sj1*sj4);
IkReal x3527=(sj5*x3526);
IkReal x3528=((1.0)*cj5*r00);
CheckValue<IkReal> x3529=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x3529.valid){
continue;
}
CheckValue<IkReal> x3530 = IKatan2WithCheck(IkReal((((r01*sj5*x3523))+(((-1.0)*r21*x3521*x3527))+((cj0*x3525*x3526))+((cj1*x3522))+(((-1.0)*sj1*x3521*x3524))+(((-1.0)*x3523*x3528)))),IkReal((((cj0*cj1*x3524))+(((-1.0)*x3526*x3528))+((r01*x3527))+(((-1.0)*x3521*x3523*x3525))+((sj1*x3522))+((cj0*r21*sj5*x3523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3530.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3529.value)))+(x3530.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3531=IKsin(j2);
IkReal x3532=IKcos(j2);
IkReal x3533=((1.0)*cj3);
IkReal x3534=(cj5*r00);
IkReal x3535=(cj0*cj1);
IkReal x3536=(cj5*r10);
IkReal x3537=(r01*sj5);
IkReal x3538=((1.0)*sj4);
IkReal x3539=(cj5*sj3);
IkReal x3540=(cj1*sj0);
IkReal x3541=(sj3*sj5);
IkReal x3542=(cj5*r20);
IkReal x3543=((1.0)*cj4);
IkReal x3544=((1.93e-6)*sj1);
IkReal x3545=(r11*sj5);
IkReal x3546=(r21*sj5);
IkReal x3547=(cj1*x3532);
IkReal x3548=(cj3*cj4*sj5);
IkReal x3549=((0.4)*x3531);
IkReal x3550=(sj1*x3532);
IkReal x3551=((1.0)*sj1*x3531);
evalcond[0]=((((-1.0)*x3538*x3546))+x3547+((sj4*x3542))+(((-1.0)*r22*x3543))+(((-1.0)*x3551)));
evalcond[1]=((((-1.0)*r02*x3543))+((x3531*x3535))+((cj0*x3550))+((sj4*x3534))+(((-1.0)*x3537*x3538)));
evalcond[2]=(((sj0*x3550))+(((-1.0)*x3538*x3545))+(((-1.0)*r12*x3543))+((x3531*x3540))+((sj4*x3536)));
evalcond[3]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x3546))+(((-1.0)*sj1*x3549))+(((-1.0)*pz))+(((9.9e-7)*x3542))+(((0.4)*x3547))+(((-0.4)*sj1)));
evalcond[4]=((((0.4)*x3535))+(((-1.0)*cj0*x3544))+(((9.9e-7)*x3534))+(((-1.0)*px))+(((0.4)*cj0*x3550))+((x3535*x3549))+(((-9.9e-7)*x3537)));
evalcond[5]=((((-9.9e-7)*x3545))+(((9.9e-7)*x3536))+(((0.4)*sj0*x3550))+(((-1.0)*sj0*x3544))+(((-1.0)*py))+((x3540*x3549))+(((0.4)*x3540)));
evalcond[6]=(((r20*x3541))+(((-1.0)*cj1*x3531))+((cj3*cj4*x3546))+((r21*x3539))+(((-1.0)*cj4*x3533*x3542))+(((-1.0)*x3550))+(((-1.0)*r22*sj4*x3533)));
evalcond[7]=((((-1.0)*cj4*x3533*x3534))+((r00*x3541))+((cj3*cj4*x3537))+((x3532*x3535))+((r01*x3539))+(((-1.0)*r02*sj4*x3533))+(((-1.0)*cj0*x3551)));
evalcond[8]=((((-1.0)*r12*sj4*x3533))+((r11*x3539))+(((-1.0)*cj4*x3533*x3536))+((cj3*cj4*x3545))+(((-1.0)*sj0*x3551))+((x3532*x3540))+((r10*x3541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3552=sj0*sj0;
IkReal x3553=(py*sj0);
IkReal x3554=((77.2)*sj0);
IkReal x3555=(sj4*sj5);
IkReal x3556=(cj4*r12);
IkReal x3557=((16000000.0)*sj0);
IkReal x3558=(cj5*r20);
IkReal x3559=(cj5*r10*sj0);
IkReal x3560=(r11*sj0*sj5);
IkReal x3561=((((-0.4)*sj4*x3558))+(((-9.9e-7)*r21*sj5))+(((-1.0)*pz))+(((9.9e-7)*x3558))+(((0.4)*r21*x3555))+(((0.4)*cj4*r22)));
IkReal x3562=(x3552*x3561);
CheckValue<IkReal> x3563=IKPowWithIntegerCheck(IKsign(x3552),-1);
if(!x3563.valid){
continue;
}
CheckValue<IkReal> x3564 = IKatan2WithCheck(IkReal(((((-40000000.0)*x3562))+(((0.00019107)*x3560))+(((-0.00019107)*x3559))+(((-1.0)*x3554*x3556))+(((193.0)*x3553))+((cj5*r10*sj4*x3554))+(((-1.0)*r11*x3554*x3555)))),IkReal((((x3556*x3557))+(((-16000000.0)*sj4*x3559))+((r11*x3555*x3557))+(((39.6)*x3559))+(((-193.0)*x3562))+(((-39.6)*x3560))+(((-40000000.0)*x3553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3564.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x3563.value)))+(x3564.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x3565=IKsin(j1);
IkReal x3566=sj0*sj0;
IkReal x3567=IKcos(j1);
IkReal x3568=cj0*cj0;
IkReal x3569=((0.4)*cj5);
IkReal x3570=(r21*sj0);
IkReal x3571=((0.4)*sj4);
IkReal x3572=(r21*sj5);
IkReal x3573=(cj3*r22);
IkReal x3574=(r11*sj5);
IkReal x3575=((9.9e-7)*cj0);
IkReal x3576=((0.4)*cj4);
IkReal x3577=(cj3*cj4);
IkReal x3578=(cj5*r00);
IkReal x3579=(r01*sj5);
IkReal x3580=(r20*sj0);
IkReal x3581=(r00*sj4);
IkReal x3582=((9.9e-7)*cj5);
IkReal x3583=(cj0*sj0);
IkReal x3584=((9.9e-7)*sj0);
IkReal x3585=(r10*sj4);
IkReal x3586=((0.4)*x3567);
IkReal x3587=(r20*x3577);
IkReal x3588=((1.93e-6)*x3565);
IkReal x3589=(r10*x3582);
IkReal x3590=((1.93e-6)*x3567);
IkReal x3591=((0.4)*sj3*sj5);
IkReal x3592=((0.4)*x3565);
IkReal x3593=(x3583*x3588);
IkReal x3594=(x3583*x3586);
evalcond[0]=(((x3571*x3572))+((r20*x3582))+(((-9.9e-7)*x3572))+(((-1.0)*r20*sj4*x3569))+(((-1.0)*pz))+((r22*x3576))+(((-1.0)*x3590))+(((-1.0)*x3592)));
evalcond[1]=((((-1.0)*r12*sj0*x3576))+(((-1.0)*sj0*x3589))+((sj0*x3569*x3585))+(((-1.0)*sj0*x3571*x3574))+(((-1.0)*x3566*x3586))+((x3566*x3588))+((x3574*x3584))+((py*sj0)));
evalcond[2]=((((-1.0)*cj0*r02*x3576))+((cj0*x3569*x3581))+((x3575*x3579))+(((-1.0)*x3575*x3578))+(((-1.0)*cj0*x3571*x3579))+(((-1.0)*x3568*x3586))+((x3568*x3588))+((cj0*px)));
evalcond[3]=(((sj0*x3590))+((sj0*x3592))+((cj3*x3574*x3576))+(((9.9e-7)*sj5*x3570))+(((-1.0)*cj3*r12*x3571))+((r10*x3591))+(((-1.0)*r10*x3569*x3577))+(((-1.0)*x3580*x3582))+((pz*sj0))+((r11*sj3*x3569)));
evalcond[4]=(((r01*sj3*x3569))+((cj3*x3576*x3579))+((r00*x3591))+((x3572*x3575))+(((-1.0)*cj3*r02*x3571))+(((-1.0)*cj5*r20*x3575))+(((-1.0)*r00*x3569*x3577))+((cj0*pz))+((cj0*x3590))+((cj0*x3592)));
evalcond[5]=((((-1.0)*sj0*x3586))+((x3569*x3577*x3580))+(((-1.0)*x3580*x3591))+(((-1.0)*sj3*x3569*x3570))+py+(((-1.0)*cj3*sj5*x3570*x3576))+((sj0*x3588))+(((9.9e-7)*x3574))+(((-1.0)*x3589))+((sj0*x3571*x3573)));
evalcond[6]=(((cj0*x3569*x3587))+(((-1.0)*cj0*r21*sj3*x3569))+(((-1.0)*cj0*x3586))+(((-1.0)*cj0*cj3*x3572*x3576))+(((-9.9e-7)*x3578))+px+(((-1.0)*cj0*r20*x3591))+((cj0*x3571*x3573))+((cj0*x3588))+(((9.9e-7)*x3579)));
evalcond[7]=(((cj0*x3569*x3585))+((x3579*x3584))+x3593+(((-1.0)*cj0*x3571*x3574))+((px*sj0))+(((-1.0)*cj0*r12*x3576))+(((-1.0)*x3578*x3584))+(((-1.0)*x3594)));
evalcond[8]=(((sj0*x3569*x3581))+(((-1.0)*sj0*x3571*x3579))+x3593+(((-1.0)*r02*sj0*x3576))+((x3574*x3575))+(((-1.0)*x3594))+((cj0*py))+(((-1.0)*cj5*r10*x3575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3595=(cj4*sj1);
IkReal x3596=(cj1*sj4);
IkReal x3597=((1.0)*cj5);
IkReal x3598=(r21*sj5);
IkReal x3599=(cj1*cj4);
IkReal x3600=(sj1*sj4);
IkReal x3601=(r01*sj4*sj5);
if( IKabs((((r02*x3599))+((r01*sj5*x3596))+((cj5*r20*x3600))+(((-1.0)*x3598*x3600))+(((-1.0)*r22*x3595))+(((-1.0)*r00*x3596*x3597)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x3595))+(((-1.0)*r20*x3596*x3597))+((x3596*x3598))+((r22*x3599))+(((-1.0)*r00*x3597*x3600))+((r01*sj5*x3600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x3599))+((r01*sj5*x3596))+((cj5*r20*x3600))+(((-1.0)*x3598*x3600))+(((-1.0)*r22*x3595))+(((-1.0)*r00*x3596*x3597))))+IKsqr((((r02*x3595))+(((-1.0)*r20*x3596*x3597))+((x3596*x3598))+((r22*x3599))+(((-1.0)*r00*x3597*x3600))+((r01*sj5*x3600))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x3599))+((r01*sj5*x3596))+((cj5*r20*x3600))+(((-1.0)*x3598*x3600))+(((-1.0)*r22*x3595))+(((-1.0)*r00*x3596*x3597))), (((r02*x3595))+(((-1.0)*r20*x3596*x3597))+((x3596*x3598))+((r22*x3599))+(((-1.0)*r00*x3597*x3600))+((r01*sj5*x3600))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3602=IKcos(j2);
IkReal x3603=IKsin(j2);
IkReal x3604=((1.0)*cj3);
IkReal x3605=(cj5*r00);
IkReal x3606=((1.0)*cj4);
IkReal x3607=(r01*sj5);
IkReal x3608=((1.0)*sj4);
IkReal x3609=(cj5*sj3);
IkReal x3610=(cj5*r20);
IkReal x3611=(sj3*sj5);
IkReal x3612=(r21*sj5);
IkReal x3613=(cj1*x3602);
IkReal x3614=(cj3*cj4*sj5);
IkReal x3615=(cj1*x3603);
IkReal x3616=(sj1*x3603);
IkReal x3617=(sj1*x3602);
IkReal x3618=((1.0)*x3616);
evalcond[0]=((((-1.0)*r02*x3606))+(((-1.0)*x3607*x3608))+x3615+x3617+((sj4*x3605)));
evalcond[1]=(x3613+(((-1.0)*r22*x3606))+((sj4*x3610))+(((-1.0)*x3608*x3612))+(((-1.0)*x3618)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-0.4)*x3616))+(((-9.9e-7)*x3612))+(((9.9e-7)*x3610))+(((-1.0)*pz))+(((0.4)*x3613))+(((-0.4)*sj1)));
evalcond[3]=((((-9.9e-7)*x3607))+(((0.4)*cj1))+(((9.9e-7)*x3605))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((0.4)*x3617))+(((0.4)*x3615)));
evalcond[4]=(((cj3*cj4*x3607))+x3613+((r01*x3609))+((r00*x3611))+(((-1.0)*x3618))+(((-1.0)*cj4*x3604*x3605))+(((-1.0)*r02*sj4*x3604)));
evalcond[5]=((((-1.0)*x3615))+(((-1.0)*x3617))+((cj3*cj4*x3612))+((r21*x3609))+(((-1.0)*r22*sj4*x3604))+(((-1.0)*cj4*x3604*x3610))+((r20*x3611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3619=((1.0)*r01);
IkReal x3620=(sj1*sj4);
IkReal x3621=(cj5*r00);
IkReal x3622=(cj1*cj4);
IkReal x3623=(cj5*r20);
IkReal x3624=(cj1*sj4);
IkReal x3625=(sj5*x3624);
IkReal x3626=((1.0)*cj4*sj1);
if( IKabs((((x3620*x3623))+(((-1.0)*r02*x3622))+((x3621*x3624))+(((-1.0)*r21*sj5*x3620))+(((-1.0)*x3619*x3625))+(((-1.0)*r22*x3626)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x3625))+(((-1.0)*sj5*x3619*x3620))+((x3620*x3621))+(((-1.0)*x3623*x3624))+((r22*x3622))+(((-1.0)*r02*x3626)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3620*x3623))+(((-1.0)*r02*x3622))+((x3621*x3624))+(((-1.0)*r21*sj5*x3620))+(((-1.0)*x3619*x3625))+(((-1.0)*r22*x3626))))+IKsqr((((r21*x3625))+(((-1.0)*sj5*x3619*x3620))+((x3620*x3621))+(((-1.0)*x3623*x3624))+((r22*x3622))+(((-1.0)*r02*x3626))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x3620*x3623))+(((-1.0)*r02*x3622))+((x3621*x3624))+(((-1.0)*r21*sj5*x3620))+(((-1.0)*x3619*x3625))+(((-1.0)*r22*x3626))), (((r21*x3625))+(((-1.0)*sj5*x3619*x3620))+((x3620*x3621))+(((-1.0)*x3623*x3624))+((r22*x3622))+(((-1.0)*r02*x3626))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3627=IKcos(j2);
IkReal x3628=IKsin(j2);
IkReal x3629=((1.0)*cj3);
IkReal x3630=(cj5*r00);
IkReal x3631=((1.0)*cj4);
IkReal x3632=(r01*sj5);
IkReal x3633=((1.0)*sj4);
IkReal x3634=(cj5*sj3);
IkReal x3635=(cj5*r20);
IkReal x3636=((1.0)*sj1);
IkReal x3637=(sj3*sj5);
IkReal x3638=((0.4)*sj1);
IkReal x3639=(r21*sj5);
IkReal x3640=(cj1*x3627);
IkReal x3641=(cj3*cj4*sj5);
IkReal x3642=((0.4)*x3628);
IkReal x3643=(x3627*x3636);
IkReal x3644=((1.0)*cj1*x3628);
IkReal x3645=(x3644+x3643);
evalcond[0]=((((-1.0)*x3628*x3636))+(((-1.0)*x3633*x3639))+(((-1.0)*r22*x3631))+x3640+((sj4*x3635)));
evalcond[1]=((((-1.0)*r02*x3631))+((sj4*x3630))+(((-1.0)*x3645))+(((-1.0)*x3632*x3633)));
evalcond[2]=((((-9.9e-7)*x3639))+(((-1.93e-6)*cj1))+(((-1.0)*x3628*x3638))+(((9.9e-7)*x3635))+(((-1.0)*x3638))+(((-1.0)*pz))+(((0.4)*x3640)));
evalcond[3]=((((-1.0)*x3627*x3638))+(((-9.9e-7)*x3632))+(((9.9e-7)*x3630))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-1.0)*cj1*x3642))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*r02*sj4*x3629))+((sj1*x3628))+((cj3*cj4*x3632))+(((-1.0)*x3640))+(((-1.0)*cj4*x3629*x3630))+((r01*x3634))+((r00*x3637)));
evalcond[5]=((((-1.0)*r22*sj4*x3629))+((cj3*cj4*x3639))+((r21*x3634))+(((-1.0)*cj4*x3629*x3635))+((r20*x3637))+(((-1.0)*x3645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3646=(cj4*r12);
IkReal x3647=(cj4*r22);
IkReal x3648=(cj1*sj4);
IkReal x3649=(r11*sj5);
IkReal x3650=(r21*sj5);
IkReal x3651=((1.0)*sj1);
IkReal x3652=(sj1*sj4);
IkReal x3653=(cj5*r20);
IkReal x3654=((1.0)*cj5*r10);
if( IKabs((((x3652*x3653))+((cj1*x3646))+((x3648*x3649))+(((-1.0)*x3648*x3654))+(((-1.0)*x3647*x3651))+(((-1.0)*sj4*x3650*x3651)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3648*x3653))+((x3649*x3652))+((cj1*x3647))+((x3648*x3650))+((sj1*x3646))+(((-1.0)*cj5*r10*sj4*x3651)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3652*x3653))+((cj1*x3646))+((x3648*x3649))+(((-1.0)*x3648*x3654))+(((-1.0)*x3647*x3651))+(((-1.0)*sj4*x3650*x3651))))+IKsqr(((((-1.0)*x3648*x3653))+((x3649*x3652))+((cj1*x3647))+((x3648*x3650))+((sj1*x3646))+(((-1.0)*cj5*r10*sj4*x3651))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x3652*x3653))+((cj1*x3646))+((x3648*x3649))+(((-1.0)*x3648*x3654))+(((-1.0)*x3647*x3651))+(((-1.0)*sj4*x3650*x3651))), ((((-1.0)*x3648*x3653))+((x3649*x3652))+((cj1*x3647))+((x3648*x3650))+((sj1*x3646))+(((-1.0)*cj5*r10*sj4*x3651))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3655=IKcos(j2);
IkReal x3656=IKsin(j2);
IkReal x3657=(cj3*cj4);
IkReal x3658=(r21*sj5);
IkReal x3659=((1.0)*r22);
IkReal x3660=(cj5*r10);
IkReal x3661=(cj5*r20);
IkReal x3662=(cj5*sj3);
IkReal x3663=(cj3*sj4);
IkReal x3664=(r11*sj5);
IkReal x3665=((1.0)*sj4);
IkReal x3666=((1.0)*r12);
IkReal x3667=(sj3*sj5);
IkReal x3668=(cj1*x3655);
IkReal x3669=(cj1*x3656);
IkReal x3670=(sj1*x3656);
IkReal x3671=(sj1*x3655);
IkReal x3672=((1.0)*x3670);
evalcond[0]=(((sj4*x3660))+x3669+x3671+(((-1.0)*x3664*x3665))+(((-1.0)*cj4*x3666)));
evalcond[1]=((((-1.0)*cj4*x3659))+((sj4*x3661))+x3668+(((-1.0)*x3658*x3665))+(((-1.0)*x3672)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*pz))+(((-0.4)*x3670))+(((9.9e-7)*x3661))+(((-9.9e-7)*x3658))+(((0.4)*x3668))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*cj1))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((9.9e-7)*x3660))+(((0.4)*x3671))+(((-9.9e-7)*x3664))+(((0.4)*x3669)));
evalcond[4]=((((-1.0)*x3663*x3666))+((r11*x3662))+((r10*x3667))+((x3657*x3664))+x3668+(((-1.0)*x3657*x3660))+(((-1.0)*x3672)));
evalcond[5]=((((-1.0)*x3669))+(((-1.0)*x3659*x3663))+((x3657*x3658))+((r20*x3667))+(((-1.0)*x3671))+(((-1.0)*x3657*x3661))+((r21*x3662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3673=((1.0)*cj1);
IkReal x3674=(sj4*sj5);
IkReal x3675=(cj5*sj4);
IkReal x3676=((1.0)*sj1);
IkReal x3677=(sj1*x3675);
IkReal x3678=(cj4*x3676);
if( IKabs((((r20*x3677))+(((-1.0)*cj4*r12*x3673))+(((-1.0)*r22*x3678))+(((-1.0)*r21*x3674*x3676))+(((-1.0)*r11*x3673*x3674))+((cj1*r10*x3675)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r20*x3673*x3675))+(((-1.0)*r12*x3678))+(((-1.0)*r11*x3674*x3676))+((r10*x3677))+((cj1*r21*x3674)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x3677))+(((-1.0)*cj4*r12*x3673))+(((-1.0)*r22*x3678))+(((-1.0)*r21*x3674*x3676))+(((-1.0)*r11*x3673*x3674))+((cj1*r10*x3675))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r20*x3673*x3675))+(((-1.0)*r12*x3678))+(((-1.0)*r11*x3674*x3676))+((r10*x3677))+((cj1*r21*x3674))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x3677))+(((-1.0)*cj4*r12*x3673))+(((-1.0)*r22*x3678))+(((-1.0)*r21*x3674*x3676))+(((-1.0)*r11*x3673*x3674))+((cj1*r10*x3675))), (((cj1*cj4*r22))+(((-1.0)*r20*x3673*x3675))+(((-1.0)*r12*x3678))+(((-1.0)*r11*x3674*x3676))+((r10*x3677))+((cj1*r21*x3674))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3679=IKcos(j2);
IkReal x3680=IKsin(j2);
IkReal x3681=(cj3*cj4);
IkReal x3682=(r21*sj5);
IkReal x3683=((1.0)*r22);
IkReal x3684=(cj5*r10);
IkReal x3685=(cj5*r20);
IkReal x3686=(cj5*sj3);
IkReal x3687=((1.0)*sj1);
IkReal x3688=(cj3*sj4);
IkReal x3689=(sj3*sj5);
IkReal x3690=(r11*sj5);
IkReal x3691=((1.0)*sj4);
IkReal x3692=((1.0)*r12);
IkReal x3693=((0.4)*sj1);
IkReal x3694=(cj1*x3679);
IkReal x3695=((0.4)*x3680);
IkReal x3696=(x3679*x3687);
IkReal x3697=((1.0)*cj1*x3680);
IkReal x3698=(x3696+x3697);
evalcond[0]=(((sj4*x3685))+(((-1.0)*cj4*x3683))+x3694+(((-1.0)*x3680*x3687))+(((-1.0)*x3682*x3691)));
evalcond[1]=(((sj4*x3684))+(((-1.0)*cj4*x3692))+(((-1.0)*x3698))+(((-1.0)*x3690*x3691)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x3694))+(((-1.0)*x3680*x3693))+(((-1.0)*pz))+(((-1.0)*x3693))+(((-9.9e-7)*x3682))+(((9.9e-7)*x3685)));
evalcond[3]=((((-1.0)*x3679*x3693))+(((-9.9e-7)*x3690))+(((-1.0)*cj1*x3695))+(((1.93e-6)*sj1))+(((-1.0)*py))+(((9.9e-7)*x3684))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*x3688*x3692))+((r10*x3689))+((sj1*x3680))+(((-1.0)*x3681*x3684))+((r11*x3686))+(((-1.0)*x3694))+((x3681*x3690)));
evalcond[5]=(((r21*x3686))+((x3681*x3682))+(((-1.0)*x3681*x3685))+(((-1.0)*x3683*x3688))+((r20*x3689))+(((-1.0)*x3698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3699=((1.0)*sj1);
IkReal x3700=(cj5*sj4);
IkReal x3701=(r20*sj0);
IkReal x3702=((1.0)*cj1);
IkReal x3703=(cj4*r12);
IkReal x3704=(cj4*r22*sj0);
IkReal x3705=(r11*sj4*sj5);
IkReal x3706=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x3707=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x3707.valid){
continue;
}
CheckValue<IkReal> x3708 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3700*x3702))+(((-1.0)*x3699*x3704))+(((-1.0)*x3699*x3706))+((sj1*x3700*x3701))+((cj1*x3705))+((cj1*x3703)))),IkReal((((sj1*x3705))+((sj1*x3703))+(((-1.0)*x3700*x3701*x3702))+(((-1.0)*r10*x3699*x3700))+((cj1*x3704))+((cj1*x3706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3708.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3707.value)))+(x3708.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3709=IKsin(j2);
IkReal x3710=IKcos(j2);
IkReal x3711=((1.0)*cj3);
IkReal x3712=(cj5*r00);
IkReal x3713=(cj0*cj1);
IkReal x3714=(cj5*r10);
IkReal x3715=(r01*sj5);
IkReal x3716=((1.0)*sj4);
IkReal x3717=(cj5*sj3);
IkReal x3718=(cj1*sj0);
IkReal x3719=(sj3*sj5);
IkReal x3720=(cj5*r20);
IkReal x3721=((1.0)*cj4);
IkReal x3722=((1.93e-6)*sj1);
IkReal x3723=(r11*sj5);
IkReal x3724=(r21*sj5);
IkReal x3725=(cj1*x3710);
IkReal x3726=(cj3*cj4*sj5);
IkReal x3727=((0.4)*x3709);
IkReal x3728=(sj1*x3710);
IkReal x3729=((1.0)*sj1*x3709);
evalcond[0]=((((-1.0)*r22*x3721))+((sj4*x3720))+(((-1.0)*x3729))+(((-1.0)*x3716*x3724))+x3725);
evalcond[1]=(((sj4*x3712))+(((-1.0)*x3715*x3716))+((x3709*x3713))+((cj0*x3728))+(((-1.0)*r02*x3721)));
evalcond[2]=((((-1.0)*r12*x3721))+((sj4*x3714))+((x3709*x3718))+((sj0*x3728))+(((-1.0)*x3716*x3723)));
evalcond[3]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x3724))+(((0.4)*x3725))+(((-1.0)*pz))+(((9.9e-7)*x3720))+(((-1.0)*sj1*x3727))+(((-0.4)*sj1)));
evalcond[4]=((((0.4)*x3713))+(((9.9e-7)*x3712))+(((-9.9e-7)*x3715))+(((-1.0)*px))+((x3713*x3727))+(((-1.0)*cj0*x3722))+(((0.4)*cj0*x3728)));
evalcond[5]=(((x3718*x3727))+(((-9.9e-7)*x3723))+(((0.4)*x3718))+(((9.9e-7)*x3714))+(((-1.0)*sj0*x3722))+(((-1.0)*py))+(((0.4)*sj0*x3728)));
evalcond[6]=((((-1.0)*cj4*x3711*x3720))+((cj3*cj4*x3724))+((r20*x3719))+(((-1.0)*r22*sj4*x3711))+(((-1.0)*x3728))+((r21*x3717))+(((-1.0)*cj1*x3709)));
evalcond[7]=(((x3710*x3713))+(((-1.0)*r02*sj4*x3711))+((r00*x3719))+((r01*x3717))+(((-1.0)*cj0*x3729))+((cj3*cj4*x3715))+(((-1.0)*cj4*x3711*x3712)));
evalcond[8]=(((x3710*x3718))+((r11*x3717))+((cj3*cj4*x3723))+(((-1.0)*sj0*x3729))+((r10*x3719))+(((-1.0)*r12*sj4*x3711))+(((-1.0)*cj4*x3711*x3714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3730=((1.0)*cj0);
IkReal x3731=(cj4*r02);
IkReal x3732=(cj1*sj4);
IkReal x3733=(cj4*r22);
IkReal x3734=(cj5*r20);
IkReal x3735=(sj1*sj4);
IkReal x3736=(sj5*x3735);
IkReal x3737=((1.0)*cj5*r00);
CheckValue<IkReal> x3738 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x3730*x3733))+((r01*sj5*x3732))+((cj0*x3734*x3735))+(((-1.0)*x3732*x3737))+((cj1*x3731))+(((-1.0)*r21*x3730*x3736)))),IkReal((((r01*x3736))+((cj0*r21*sj5*x3732))+((sj1*x3731))+((cj0*cj1*x3733))+(((-1.0)*x3735*x3737))+(((-1.0)*x3730*x3732*x3734)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3738.valid){
continue;
}
CheckValue<IkReal> x3739=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x3739.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3738.value)+(((1.5707963267949)*(x3739.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3740=IKsin(j2);
IkReal x3741=IKcos(j2);
IkReal x3742=((1.0)*cj3);
IkReal x3743=(cj5*r00);
IkReal x3744=(cj0*cj1);
IkReal x3745=(cj5*r10);
IkReal x3746=(r01*sj5);
IkReal x3747=((1.0)*sj4);
IkReal x3748=(cj5*sj3);
IkReal x3749=(cj1*sj0);
IkReal x3750=(sj3*sj5);
IkReal x3751=(cj5*r20);
IkReal x3752=((1.0)*cj4);
IkReal x3753=((1.93e-6)*sj1);
IkReal x3754=(r11*sj5);
IkReal x3755=(r21*sj5);
IkReal x3756=(cj1*x3741);
IkReal x3757=(cj3*cj4*sj5);
IkReal x3758=((0.4)*x3740);
IkReal x3759=(sj1*x3741);
IkReal x3760=((1.0)*sj1*x3740);
evalcond[0]=((((-1.0)*r22*x3752))+((sj4*x3751))+(((-1.0)*x3747*x3755))+x3756+(((-1.0)*x3760)));
evalcond[1]=(((sj4*x3743))+((cj0*x3759))+(((-1.0)*x3746*x3747))+((x3740*x3744))+(((-1.0)*r02*x3752)));
evalcond[2]=(((sj4*x3745))+((sj0*x3759))+(((-1.0)*r12*x3752))+(((-1.0)*x3747*x3754))+((x3740*x3749)));
evalcond[3]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x3755))+(((-1.0)*pz))+(((9.9e-7)*x3751))+(((0.4)*x3756))+(((-1.0)*sj1*x3758))+(((-0.4)*sj1)));
evalcond[4]=(((x3744*x3758))+(((-9.9e-7)*x3746))+(((-1.0)*px))+(((-1.0)*cj0*x3753))+(((9.9e-7)*x3743))+(((0.4)*x3744))+(((0.4)*cj0*x3759)));
evalcond[5]=((((-1.0)*sj0*x3753))+(((-9.9e-7)*x3754))+(((-1.0)*py))+((x3749*x3758))+(((9.9e-7)*x3745))+(((0.4)*x3749))+(((0.4)*sj0*x3759)));
evalcond[6]=((((-1.0)*cj4*x3742*x3751))+((cj3*cj4*x3755))+((r20*x3750))+(((-1.0)*r22*sj4*x3742))+(((-1.0)*x3759))+(((-1.0)*cj1*x3740))+((r21*x3748)));
evalcond[7]=(((r00*x3750))+((r01*x3748))+(((-1.0)*cj4*x3742*x3743))+(((-1.0)*r02*sj4*x3742))+((cj3*cj4*x3746))+(((-1.0)*cj0*x3760))+((x3741*x3744)));
evalcond[8]=((((-1.0)*cj4*x3742*x3745))+((cj3*cj4*x3754))+(((-1.0)*r12*sj4*x3742))+((r11*x3748))+((r10*x3750))+(((-1.0)*sj0*x3760))+((x3741*x3749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - hsr_co605_dual_arm_with_gripper (1b3a70e1491b899ee634badf1b111d40)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
